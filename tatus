[1mdiff --git a/app/Scripts/ASA_Check_Config.v.1.py b/app/Scripts/ASA_Check_Config.v.1.py[m
[1mindex 1c9c12f..e6a22d5 100644[m
[1m--- a/app/Scripts/ASA_Check_Config.v.1.py[m
[1m+++ b/app/Scripts/ASA_Check_Config.v.1.py[m
[36m@@ -41,7 +41,6 @@[m [mimport datetime[m
 ##import threading[m
 import utils_v2[m
 import re[m
[31m-import shelve[m
 import shutil[m
 import ipaddress[m
 ##import io[m
[36m@@ -55,7 +54,6 @@[m [mfrom ASA_Check_Config_FNC import *[m
 from ASA_Check_Config_VAR import *[m
 from ASA_Check_Config_PARAM import *[m
 from tabulate import tabulate[m
[31m-##import shelve[m
 [m
 #----------------------------------------------------------------------------------------[m
 # ALL                           = 0[m
[36m@@ -88,11 +86,11 @@[m [mTEST_THIS_ONLY   = [1,2,3,4,5,6,7,8,9,      12,         16,17,18][m
 ### debug params -------[m
 ##DEBUG_LEVEL           = 1      #[0 = verbose][m
 ##ARGS_SEE_ELAPSED      = True   #[                                                (-e default = True)][m
[31m-##ARGS_FETCH_CONFIG     = False   #[True=Connect_To_Device, False=Read_Local_Files  (-f default = True)][m
[31m-##ARGS_REBUILD_VARS     = False   #[True=Rebuild Variables, False=Skip this session (-r default = True)][m
[32m+[m[32m##ARGS_FETCH_CONFIG     = False  #[True=Connect_To_Device, False=Read_Local_Files  (-f default = True)][m
[32m+[m[32m##ARGS_REBUILD_VARS     = True  #[True=Rebuild Variables, False=Skip this session (-r default = True)][m
 ##ARGS_PARRALEL_PROCESS = False  #[                                                (-p default = False)][m
 ##DELETE_VAR_FILES      = False[m
[31m-##TEST_THIS_ONLY   = [2][m
[32m+[m[32m##TEST_THIS_ONLY   = [12][m
 #----------------------------------------------------------------------------------------[m
 start_time = time.time()[m
 pd.set_option('display.max_rows', 500)[m
[36m@@ -151,7 +149,7 @@[m [mif len(TEST_THIS_ONLY)>=1:[m
 [m
 DB_Available = True[m
 try:[m
[31m-    engine = db.create_engine("postgresql://%s:%s@%s:%s/%s" % (PostgreSQL_User, PostgreSQL_PW, PostgreSQL_Host, PostgreSQL_Port, db_Name))[m
[32m+[m[32m    engine = db.create_engine(f"postgresql://{PostgreSQL_User}:{PostgreSQL_PW}@{PostgreSQL_Host}:{PostgreSQL_Port}/{db_Name}")[m
     with engine.connect() as connection:[m
         My_Devices      = db.Table('My_Devices',      db.MetaData(), autoload_with=engine)[m
         Global_Settings = db.Table('Global_Settings', db.MetaData(), autoload_with=engine)[m
[36m@@ -333,9 +331,9 @@[m [mif not os.path.exists(log_folder):[m
     try:[m
         os.mkdir(log_folder)[m
     except:[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[31m-            f.write("Can't create destination directory (%s)\n" % (log_folder))[m
[31m-        raise OSError("Can't create destination directory (%s)!" % (log_folder))[m
[32m+[m[32m        with open(f"{Err_folder}/{WTF_Error_FName}","a+") as f:[m
[32m+[m[32m            f.write(f"Can't create destination directory ({log_folder})\n")[m
[32m+[m[32m        raise OSError(f"Can't create destination directory ({log_folder})!")[m
 [m
 if ARGS_DEVICE:[m
     if DB_Available:[m
[36m@@ -419,12 +417,12 @@[m [melse:[m
                 OLD_TimeStamp_t0 = Device_to_Check_df.TimeStamp_t0[0][m
                 counter +=1[m
     except Exception as e:[m
[31m-        Log_Message = (f"Device_List.txt file not found"); print(Log_Message)[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f: f.write(Log_Message)[m
[32m+[m[32m        Log_Message = "Device_List.txt file not found"; print(Log_Message)[m
[32m+[m[32m        with open(f"{Err_folder}/{WTF_Error_FName}","a+") as f: f.write(Log_Message)[m
         row = {'TimeStamp':datetime.datetime.now().astimezone(), 'Level':'ERROR', 'Message':Log_Message}[m
         with engine.begin() as connection: connection.execute(WTF_Log.insert().values(**row))[m
         Log_Message = (f"An error occurred: {e}"); print(Log_Message)[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f: f.write(Log_Message)[m
[32m+[m[32m        with open(f"{Err_folder}/{WTF_Error_FName}","a+") as f: f.write(Log_Message)[m
         row = {'TimeStamp':datetime.datetime.now().astimezone(), 'Level':'ERROR', 'Message':Log_Message}[m
         with engine.begin() as connection: connection.execute(WTF_Log.insert().values(**row))[m
         exit()[m
[36m@@ -448,7 +446,7 @@[m [mif ARGS_FETCH_CONFIG == True:[m
     # connnect to device and give commands[m
 [m
     if len(Devices2) != 0:[m
[31m-        print("Running commands on %s devices" %len(Devices2))[m
[32m+[m[32m        print(f"Running commands on {len(Devices2)} devices")[m
         if ARGS_PARRALEL_PROCESS == True:[m
         #if True:[m
             with concurrent.futures.ThreadPoolExecutor(max_workers=VAR_max_workers) as executor:[m
[36m@@ -535,9 +533,6 @@[m [mdef wtf(t_device, Config_Change, log_folder, ARGS_FETCH_CONFIG, ARGS_REBUILD_VAR[m
 [m
     if len(TEST_THIS_ONLY)>=1:[m
         if DB_Available:[m
[31m-            #engine = db.create_engine("postgresql://%s:%s@%s:%s/%s" % (PostgreSQL_User, PostgreSQL_PW, PostgreSQL_Host, PostgreSQL_Port, db_Name))[m
[31m-            #with engine.connect() as connection:[m
[31m-            #    My_Devices = db.Table('My_Devices', db.MetaData(), autoload_with=engine)[m
             Updated_Vals = {'Processing_Conf_Spinner' : True}[m
             query = db.update(My_Devices).where(My_Devices.c.HostName == hostname___).values(**Updated_Vals)[m
             try:[m
[36m@@ -553,7 +548,8 @@[m [mdef wtf(t_device, Config_Change, log_folder, ARGS_FETCH_CONFIG, ARGS_REBUILD_VAR[m
         else:[m
             print('My_Devices DB NOT AVAILABLE... Can not update "Processing_Conf_Spinner=True" status for %s.\n' %hostname___)[m
 [m
[31m-    if (ARGS_FETCH_CONFIG == True or ARGS_REBUILD_VARS == True):[m
[32m+[m[32m    #if (ARGS_FETCH_CONFIG == True or ARGS_REBUILD_VARS == True):[m
[32m+[m[32m    if (ARGS_FETCH_CONFIG == True):[m
         start = datetime.datetime.now()[m
         Split_Show_run(t_device, Config_Change_Dic[t_device], 'show running-config', log_folder)[m
         Split_Show_run(t_device, Config_Change_Dic[t_device], 'show ver', log_folder)[m
[36m@@ -726,9 +722,9 @@[m [mdef wtf(t_device, Config_Change, log_folder, ARGS_FETCH_CONFIG, ARGS_REBUILD_VAR[m
     if DELETE_VAR_FILES:[m
         #delete all local variable files[m
         DEL_Dir_Path = Path(log_folder_new)[m
[31m-        extensions_to_delete = {'.bak', '.dat', '.dir', '.log'}[m
[32m+[m[32m        extensions_to_delete = {'.bak', '.dat', '.dir', '.log', '.feather'}[m
         #excluded_file = "Diff_Only_DF"[m
[31m-        excluded_file = ""[m
[32m+[m[32m        excluded_file = "None"[m
 [m
         # Iterate through all files in the directory and subdirectories[m
         Deleted_Flag = False[m
[36m@@ -810,7 +806,7 @@[m [mif DB_Available:[m
 # i numeri di ACL in NoLogForAcl e in DB for acl non sono gli stessi... come mai?[m
 ## perche' db4acl tiene in pancia anche la acl not applied to any interface...[m
 [m
[31m-# nella tabella "Check Acl Destination Vs Routing Table" aggoingere una colonna con l'hit count cumulativo della riga[m
[32m+[m[32m# nella tabella "Check Acl Destination Vs Routing Table" aggiungere una colonna con l'hit count cumulativo della riga[m
 [m
 # Move to the end the top most wide ACL[m
 [m
[1mdiff --git a/app/Scripts/ASA_Check_Config_FNC.py b/app/Scripts/ASA_Check_Config_FNC.py[m
[1mindex c4d8179..2c5feb5 100644[m
[1m--- a/app/Scripts/ASA_Check_Config_FNC.py[m
[1m+++ b/app/Scripts/ASA_Check_Config_FNC.py[m
[36m@@ -1,17 +1,48 @@[m
[31m-[m
[32m+[m[32m#----------------------------------------------------------------------------------------------------[m
[32m+[m[32m# def Get_ASA_Commands[m
[32m+[m[32m# def Split_Show_run[m
[32m+[m[32m# def Config_Diff[m
[32m+[m[32m# def ACL_VS_Interface[m
[32m+[m[32m# def NO_Log_For_ACL[m
[32m+[m[32m# def Unused_ACL[m
[32m+[m[32m# def Unused_Object[m
[32m+[m[32m# def ObjGrpNet_With1Entry[m
[32m+[m[32m# def Duplicated_Objects[m
[32m+[m[32m# def ACL_Source_Vs_Routing_Table[m
[32m+[m[32m# def ACL_Dest_Vs_Routing_Table[m
[32m+[m[32m# def F_Active_Capture[m
[32m+[m[32m# def Use_Declared_Objects[m
[32m+[m[32m# def Explicit_Deny_IP_Any_Any[m
[32m+[m[32m# def DB_For_ACL[m
[32m+[m[32m# def Check_Dec_Shadowing[m
[32m+[m[32m# def Check_NAT[m
[32m+[m[32m# def Check_Range[m
[32m+[m[32m# def Where_Used[m
[32m+[m[32m#----------------------------------------------------------------------------------------------------[m
 import os, sys[m
 import datetime[m
 import re[m
[31m-from difflib import Differ[m
 import utils_v2[m
[31m-import datetime[m
[32m+[m[32mimport shelve[m
[32m+[m[32mimport ipaddress[m
[32m+[m[32mimport pandas as pd[m
[32m+[m[32mimport sqlalchemy as db[m
[32m+[m[32mimport time[m
[32m+[m[32mimport pyarrow[m
[32m+[m[32mimport json[m
[32m+[m
[32m+[m[32mfrom difflib import Differ[m
 from ASA_Check_Config_PARAM import *[m
[31m-from utils_v2 import Write_Think_File, File_Save_Try, File_Save_Try2[m
[32m+[m[32mfrom utils_v2 import Write_Think_File, File_Save_Try, File_Save_Try2, timedelta_in_months[m
 [m
 from netmiko import ConnectHandler, NetmikoTimeoutException, NetmikoAuthenticationException[m
 from paramiko.ssh_exception import SSHException, BadHostKeyException[m
 from pathlib import Path[m
 [m
[32m+[m[32mfrom Network_Calc import Sub_Mask_2, Sub_Mask_1, IPv4_to_DecList, Is_Dec_Overlapping, Port_Converter[m
[32m+[m[32mfrom Network_Calc import PRTOTOCOLS, Proto_Map[m
[32m+[m[32mfrom tabulate import tabulate[m
[32m+[m
 re_space = re.compile(r'[ ]{2,}')[m
 re_iprange = re.compile(r'\b\d+\.\d+\.\d+\.\d+-\d+\.\d+\.\d+\.\d+\b')[m
 [m
[36m@@ -25,16 +56,14 @@[m [mdef Get_ASA_Commands(Device, Config_Change, log_folder, Status_Flag):[m
     # return False to order the caller to kill the program[m
 [m
     Config_Change.append('\n')[m
[31m-    t_line = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')[m
[31m-    Config_Change.append('Timestamp = %s\n' %t_line)[m
[31m-    print(f'Timestamp = %s\n' %t_line)[m
[32m+[m[32m    t_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')[m
[32m+[m[32m    Config_Change.append(f'Timestamp = {t_time}\n')[m
[32m+[m[32m    print (f'Timestamp = {t_time}\n')[m
 [m
[31m-    import shelve[m
[31m-    import sqlalchemy as db[m
     DB_Available = True[m
 [m
     try:[m
[31m-        engine = db.create_engine("postgresql://%s:%s@%s:%s/%s" % (PostgreSQL_User, PostgreSQL_PW, PostgreSQL_Host, PostgreSQL_Port, db_Name))[m
[32m+[m[32m        engine = db.create_engine(f"postgresql://{PostgreSQL_User}:{PostgreSQL_PW}@{PostgreSQL_Host}:{PostgreSQL_Port}/{db_Name}")[m
         with engine.connect() as connection:[m
             WTF_Log    = db.Table('WTF_Log',    db.MetaData(), autoload_with=engine)[m
     except Exception as e:[m
[36m@@ -45,7 +74,6 @@[m [mdef Get_ASA_Commands(Device, Config_Change, log_folder, Status_Flag):[m
         Config_Change.append('DB not connected, some feature is unavailable\n')[m
         DB_Available = False[m
 [m
[31m-    import time[m
     Commands = [][m
     Commands.append('term page 0')[m
     Commands.append('show ver')[m
[36m@@ -74,39 +102,39 @@[m [mdef Get_ASA_Commands(Device, Config_Change, log_folder, Status_Flag):[m
             print('trying to connect to %s...' %(Device_Info["host"]))[m
             Config_Change.append(f'trying to connect to {Device_Info["host"]}...')[m
             device_connection = ConnectHandler(**Device_Info)[m
[31m-            if device_connection.is_alive() == False:[m
[31m-                err_line = f'device_connection.is_alive() == False:'[m
[32m+[m[32m            if not device_connection.is_alive():[m
[32m+[m[32m                err_line = 'device_connection.is_alive() == False:'[m
                 print(err_line)[m
                 Config_Change.append(err_line)[m
                 return False[m
             else:[m
[31m-                err_line = f'device_connection.is_alive() == True:'[m
[32m+[m[32m                err_line = 'device_connection.is_alive() == True:'[m
                 print(err_line)[m
                 Config_Change.append(err_line)[m
                 break[m
         except NetmikoTimeoutException:[m
[31m-            err_line = f'Connection timed out!'[m
[32m+[m[32m            err_line = 'Connection timed out!'[m
             print(err_line)[m
             Config_Change.append(err_line)[m
             row = {'TimeStamp':_now_, 'Level':'ERROR', 'Message':(f'@{Device_Info["host"]} - Connection timed out!')}[m
             with engine.begin() as connection: connection.execute(WTF_Log.insert().values(**row))[m
             retries +=1[m
         except NetmikoAuthenticationException:[m
[31m-            err_line = f'Authentication failed!'[m
[32m+[m[32m            err_line = 'Authentication failed!'[m
             print(err_line)[m
             Config_Change.append(err_line)[m
             row = {'TimeStamp':_now_, 'Level':'ERROR', 'Message':(f'@{Device_Info["host"]} - Authentication failed!')}[m
             with engine.begin() as connection: connection.execute(WTF_Log.insert().values(**row))[m
             retries +=1[m
         except BadHostKeyException:[m
[31m-            err_line = f'The host key is not recognized. Possible man-in-the-middle attack!'[m
[32m+[m[32m            err_line = 'The host key is not recognized. Possible man-in-the-middle attack!'[m
             print(err_line)[m
             Config_Change.append(err_line)[m
             row = {'TimeStamp':_now_, 'Level':'ERROR', 'Message':(f'@{Device_Info["host"]} - The host key is not recognized. Possible man-in-the-middle attack!')}[m
             with engine.begin() as connection: connection.execute(WTF_Log.insert().values(**row))[m
             retries +=1[m
         except SSHException:[m
[31m-            err_line = f'SSH connection failed!'[m
[32m+[m[32m            err_line = 'SSH connection failed!'[m
             print(err_line)[m
             Config_Change.append(err_line)[m
             row = {'TimeStamp':_now_, 'Level':'ERROR', 'Message':(f'@{Device_Info["host"]} - SSH connection failed!')}[m
[36m@@ -121,7 +149,7 @@[m [mdef Get_ASA_Commands(Device, Config_Change, log_folder, Status_Flag):[m
             retries +=1[m
 [m
     if retries >= 3:[m
[31m-        err_line = f'_________________________________________________________'[m
[32m+[m[32m        err_line = '_________________________________________________________'[m
         print(err_line)[m
         Config_Change.append(err_line)[m
         err_line = f'FAILED TO CONNECT TO {Device[4]}@{Device[0]}'[m
[36m@@ -198,7 +226,7 @@[m [mdef Get_ASA_Commands(Device, Config_Change, log_folder, Status_Flag):[m
         if retries == 4:[m
             Log_Message = (f"UNABLE TO RUN COMMAND {t_Command} on {hostname}"); print(Log_Message)[m
             Config_Change.append(Log_Message)[m
[31m-            pritn(Log_Message)[m
[32m+[m[32m            print(Log_Message)[m
             row = {'TimeStamp':_now_, 'Level':'ERROR', 'Message':f'UNABLE TO RUN COMMAND {t_Command} on {hostname}'}[m
             with engine.begin() as connection: connection.execute(WTF_Log.insert().values(**row))[m
             return False[m
[36m@@ -236,7 +264,6 @@[m [mdef Get_ASA_Commands(Device, Config_Change, log_folder, Status_Flag):[m
 ##(___/(__)  (____)(____) (__)(___)(___/(_) (_)(_____)(__/\__)(___)(_)\_)(______)(_)\_)[m
 [m
 def Split_Show_run(Device, Config_Change, Show_Line, log_folder):[m
[31m-    import sqlalchemy as db[m
 [m
     hostname___ = Device.replace('/','___')[m
     FW_log_folder = log_folder + '/' + hostname___[m
[36m@@ -245,8 +272,8 @@[m [mdef Split_Show_run(Device, Config_Change, Show_Line, log_folder):[m
         with open(f"{FW_log_folder}/{hostname___}.log", 'r', encoding='utf-8', errors='replace') as f:[m
             l = f.readlines()[m
     except:[m
[31m-        print('file %s/%s.log not found!' %(FW_log_folder,hostname___))[m
[31m-        Config_Change_Dic.append(f'file {FW_log_folder}/{hostname___}.log not found!')[m
[32m+[m[32m        print(f'file {FW_log_folder}/{hostname___}.log not found!')[m
[32m+[m[32m        Config_Change.append(f'file {FW_log_folder}/{hostname___}.log not found!')[m
 [m
     for n in range(0,len(l)):[m
         line = l[n][m
[36m@@ -366,10 +393,6 @@[m [mdef Split_Show_run(Device, Config_Change, Show_Line, log_folder):[m
 ## \___)(_____)(_)\_)(__)  (____)\___/  (____/(____)(__)  (__)[m
 [m
 def Config_Diff(Device, Config_Change, log_folder):[m
[31m-    import sqlalchemy as db[m
[31m-    import pandas as pd[m
[31m-    import shelve[m
[31m-    from tabulate import tabulate[m
 [m
     DB_Available = True[m
     try:[m
[36m@@ -393,11 +416,11 @@[m [mdef Config_Diff(Device, Config_Change, log_folder):[m
     #log_folder = hostname___[m
     global WTF_Error_FName[m
 [m
[31m-    text = ('Config Diff @ %s' %hostname___)[m
[32m+[m[32m    text = f'Config Diff @ {hostname___}'[m
     utils_v2.Text_in_Frame (text, Config_Change, Print_also=1)[m
 [m
     T_0_ShowRun_file   = FW_log_folder + '/' + hostname___ + '.CFG.t-0.txt'[m
[31m-    T_1_ShowRun_file   = FW_log_folder + '/' + hostname___ + '.CFG.t-1.txt'[m
[32m+[m[32m    #T_1_ShowRun_file   = FW_log_folder + '/' + hostname___ + '.CFG.t-1.txt'[m
     Delta_ShowRun_file = FW_log_folder + '/' + hostname___ + '.CFG.Delta.txt'[m
     Delta_ShowRun_html = hostname___ + '.CFG.Delta.html'[m
     html_folder = FW_log_folder[m
[36m@@ -455,15 +478,15 @@[m [mdef Config_Diff(Device, Config_Change, log_folder):[m
                     Diff_Only.append(item)[m
                     Num_Remvd_Lines +=1[m
 [m
[31m-        if DB_Available:[m
[31m-            Updated_Vals = dict([m
[31m-                                Config_Diff_Added_Lines = Num_Added_Lines,[m
[31m-                                Config_Diff_Remvd_Lines = Num_Remvd_Lines,[m
[31m-                                Config_Total_Lines = len(new_file)[m
[31m-                                )[m
[31m-            query = db.update(My_Devices).where(My_Devices.c.HostName==hostname___).values(Updated_Vals)[m
[31m-            with engine.begin() as connection:[m
[31m-                results = connection.execute(query)[m
[32m+[m[32m    if DB_Available:[m
[32m+[m[32m        Updated_Vals = dict([m
[32m+[m[32m                            Config_Diff_Added_Lines = Num_Added_Lines,[m
[32m+[m[32m                            Config_Diff_Remvd_Lines = Num_Remvd_Lines,[m
[32m+[m[32m                            Config_Total_Lines = len(new_file)[m
[32m+[m[32m                            )[m
[32m+[m[32m        query = db.update(My_Devices).where(My_Devices.c.HostName==hostname___).values(Updated_Vals)[m
[32m+[m[32m        with engine.begin() as connection:[m
[32m+[m[32m            results = connection.execute(query)[m
 [m
     # --- Clean old logs (remove NEW + purge old entries) ---[m
     cutoff = datetime.datetime.now() - datetime.timedelta(days=Max_Diff_Log_Age)[m
[36m@@ -498,7 +521,12 @@[m [mdef Config_Diff(Device, Config_Change, log_folder):[m
         if rows:  # only build dataframe if rows exist[m
             headers = rows[0][m
             data = rows[1:][m
[31m-            Delta_ShowRun_df = pd.DataFrame(data, columns=headers)[m
[32m+[m[32m            try:[m
[32m+[m[32m                Delta_ShowRun_df = pd.DataFrame(data, columns=headers)[m
[32m+[m[32m            except ValueError as e:[m
[32m+[m[32m                print(f"[!] Data mismatch: {e}")[m
[32m+[m[32m                print(f"Header count: {len(headers)}, Sample row length: {len(data[0]) if data else 'N/A'}")[m
[32m+[m[32m                print(f"data = {data}, headers = {headers}")[m
         else:[m
             Delta_ShowRun_df = pd.DataFrame()  # empty dataframe[m
     else:[m
[36m@@ -548,7 +576,7 @@[m [mdef Config_Diff(Device, Config_Change, log_folder):[m
         Processed_Line = False[m
         for t_word in Bad_Words:[m
             if t_word in line[1]:[m
[31m-                if Processed_Line == False:[m
[32m+[m[32m                if not Processed_Line:[m
                     if DB_Available:[m
                         row = dict([m
                                   HostName = Device,[m
[36m@@ -570,14 +598,14 @@[m [mdef Config_Diff(Device, Config_Change, log_folder):[m
         try:[m
             os.mkdir(html_folder)[m
         except:[m
[31m-             raise OSError("Can't create destination directory (%s)!" % (html_folder))[m
[32m+[m[32m            raise OSError("Can't create destination directory (%s)!" % (html_folder))[m
 [m
     t_html_file = [][m
     t_html_file.append('<div class="card-body">\n')[m
     t_html_file.append('''[m
        <table class="table-bordered table-condensed table-striped table-responsive" id="dataTable" width="100%" cellspacing="0" data-order='[[ 0, "desc" ]]' data-page-length="50" >\n[m
        ''')[m
[31m-    my_index = 0[m
[32m+[m[32m    #my_index = 0[m
     if not Diff_Only_DF.empty:[m
         N_Cols = Diff_Only_DF.shape[1][m
         t_html_file.append('       <thead><tr>\n')[m
[36m@@ -596,7 +624,7 @@[m [mdef Config_Diff(Device, Config_Change, log_folder):[m
                     new_line = new_line.encode('ascii', errors='replace').decode('ascii')[m
                     t_html_file.append('           <td class="text-nowrap mr-2">%s</td>\n' %new_line)[m
                 elif t_col_index == 0:[m
[31m-                    t_html_file.append('           <td>%s</td>\n' %Diff_Only_DF.iloc[row.Index][t_col_index])[m
[32m+[m[32m                    t_html_file.append('           <td class="text-nowrap mr-2">%s</td>\n' %Diff_Only_DF.iloc[row.Index][t_col_index])[m
                 else :[m
                     t_html_file.append('           <td class="text-center">%s</td>\n' %Diff_Only_DF.iloc[row.Index][t_col_index])[m
             t_html_file.append('       </tr>\n')[m
[36m@@ -606,7 +634,7 @@[m [mdef Config_Diff(Device, Config_Change, log_folder):[m
     else:[m
         t_html_file.append('\n')[m
 [m
[31m-    t_DestFileName = (f"{html_folder}/{Delta_ShowRun_html}")[m
[32m+[m[32m    t_DestFileName = f"{html_folder}/{Delta_ShowRun_html}"[m
     log_msg = File_Save_Try2(t_DestFileName, t_html_file, t_ErrFileFullName, Config_Change)[m
     if log_msg:[m
         with engine.begin() as connection: connection.execute(WTF_Log.insert().values(**log_msg))[m
[36m@@ -614,13 +642,12 @@[m [mdef Config_Diff(Device, Config_Change, log_folder):[m
     # ============================================[m
     # ========= config length line chart =========[m
     # ============================================[m
[31m-    from utils_v2 import timedelta_in_months[m
[31m-    from utils_v2 import File_Save_Try[m
[32m+[m
     ConfLenHist_FList = [][m
[31m-    ConfLenHist_FName = ('%s/%s-ConfLenHist.txt' %(FW_log_folder,hostname___))[m
[32m+[m[32m    ConfLenHist_FName = f'{FW_log_folder}/{hostname___}-ConfLenHist.txt'[m
     t_year_Nbr  = int(datetime.datetime.now().strftime('%Y'))[m
     t_month_Nbr = int(datetime.datetime.now().strftime('%m'))[m
[31m-    t_month_Str = datetime.datetime.now().strftime('%b')[m
[32m+[m[32m    #t_month_Str = datetime.datetime.now().strftime('%b')[m
 [m
     ConfLenHist_Exists = False[m
     if len(new_file) > 0:[m
[36m@@ -657,7 +684,7 @@[m [mdef Config_Diff(Device, Config_Change, log_folder):[m
             if log_msg:[m
                 with engine.begin() as connection: connection.execute(WTF_Log.insert().values(**log_msg))[m
 [m
[31m-    if ConfLenHist_Exists == True:[m
[32m+[m[32m    if ConfLenHist_Exists:[m
         if Delta_Months == 0:[m
             ConfLenHist[-1] = ConfLenHist[-1].split()[0]+ ' ' + str(len(new_file)) + '\n'[m
             text = ''.join(i for i in ConfLenHist)[m
[36m@@ -729,7 +756,7 @@[m [mdef Config_Diff(Device, Config_Change, log_folder):[m
             temp = temp + '],\n'[m
             l[n] = temp[m
 [m
[31m-    t_fname = ("%s/chart-area1.js"%(html_folder))[m
[32m+[m[32m    t_fname = f"{html_folder}/chart-area1.js"[m
     File_Save_Try(t_fname,l)[m
 [m
     return Config_Change[m
[36m@@ -742,8 +769,6 @@[m [mdef Config_Diff(Device, Config_Change, log_folder):[m
 ##(__)(__)\___)(____)    \/  (___/  (____)(_)\_)(____) (__) (____)(_)\_)(__)(__)(__)\___)(____)[m
 [m
 def ACL_VS_Interface(t_device, Config_Change, log_folder):[m
[31m-    import time[m
[31m-    from utils_v2 import Write_Think_File[m
 [m
     hostname___ = t_device.replace('/','___')[m
     Err_folder  = log_folder[m
[36m@@ -761,13 +786,11 @@[m [mdef ACL_VS_Interface(t_device, Config_Change, log_folder):[m
         try:[m
             os.mkdir(html_folder)[m
         except:[m
[31m-             raise OSError("Can't create destination directory (%s)!" % (html_folder))[m
[32m+[m[32m            raise OSError("Can't create destination directory (%s)!" % (html_folder))[m
 [m
[31m-    text = ('Acl Vs Ineterface @ %s' %hostname___)[m
[32m+[m[32m    text = f'Acl Vs Ineterface @ {hostname___}'[m
     utils_v2.Text_in_Frame (text, Config_Change, Print_also=1)[m
 [m
[31m-    import shelve[m
[31m-    import sqlalchemy as db[m
     DB_Available = True[m
 [m
     try:[m
[36m@@ -803,13 +826,13 @@[m [mdef ACL_VS_Interface(t_device, Config_Change, log_folder):[m
             Nameif_Dic[l[n].split()[1]] = l[n].split()[0][m
 [m
     t_N_Interfaces_NoACL = 0[m
[31m-    t_N_Interfaces = len(Nameif_Dic.keys())[m
[32m+[m[32m    t_N_Interfaces = len(Nameif_Dic)[m
     Done_Flag = False[m
[31m-    for n in Nameif_Dic.keys():[m
[31m-        if n not in Accessgroup_Dic_by_if.keys():[m
[32m+[m[32m    for n in Nameif_Dic:[m
[32m+[m[32m        if n not in Accessgroup_Dic_by_if:[m
             if not Done_Flag:[m
                 #Watch_FList.append('The Following Interfaces have not ACLs applied:<br>')[m
[31m-                text_line = ('The following Interfaces have not ACLs applied:')[m
[32m+[m[32m                text_line = 'The following Interfaces have not ACLs applied:'[m
                 Done_Flag = True[m
             Watch_FList.append('%s' %n)[m
             Think_FList.append('show interface %s' %n)[m
[36m@@ -826,9 +849,9 @@[m [mdef ACL_VS_Interface(t_device, Config_Change, log_folder):[m
 [m
     tf_name = f"{FW_log_folder}/VAR_{hostname___}___ACL_List_Dict"[m
     ACL_List_Dict = utils_v2.Shelve_Read_Try(tf_name,'')[m
[31m-    Root_ACL_Lines_DF = utils_v2.ASA_ACL_to_DF(ACL_List_Dict.keys())[m
[32m+[m[32m    Root_ACL_Lines_DF = utils_v2.ASA_ACL_to_DF(ACL_List_Dict)[m
 [m
[31m-    for t_item in Accessgroup_Dic_by_if.keys():[m
[32m+[m[32m    for t_item in Accessgroup_Dic_by_if:[m
         Root_ACL_Lines_DF_Slice = Root_ACL_Lines_DF.loc[Root_ACL_Lines_DF['Name'] == Accessgroup_Dic_by_if[t_item]][m
         Root_ACL_Lines_DF_Slice.reset_index(inplace=True, drop=True)[m
 [m
[36m@@ -910,10 +933,6 @@[m [mdef ACL_VS_Interface(t_device, Config_Change, log_folder):[m
 ##(_)\_)(_____)  (____)(_____)\___/  (__)  (_____)(_)\_)  (__)(__)\___)(____)[m
 [m
 def NO_Log_For_ACL(t_device, Config_Change, log_folder):[m
[31m-    import shelve[m
[31m-    import time[m
[31m-    import sqlalchemy as db[m
[31m-    from utils_v2 import File_Save_Try[m
 [m
     DB_Available = True[m
     try:[m
[36m@@ -942,12 +961,12 @@[m [mdef NO_Log_For_ACL(t_device, Config_Change, log_folder):[m
     nologacl_htm_FName = FW_log_folder + '/' + hostname___ + '.nologacl_Fix.html'[m
     logdisabledacl_htm_FName = FW_log_folder + '/' + hostname___ + '.logdisabledacl_Fix.html'[m
 [m
[31m-    text = ('No Log For Acl @ %s' %hostname___)[m
[32m+[m[32m    text = f'No Log For Acl @ {hostname___}'[m
     utils_v2.Text_in_Frame (text, Config_Change, Print_also=1)[m
 [m
[31m-    inactiveacl_htm_FName = FW_log_folder + '/' + hostname___ + '.inactiveacl_Fix.html'[m
[31m-    text = ('Inactive Acl @ %s' %hostname___)[m
[31m-    re9 = re.compile(r'(hitcnt=.*)')[m
[32m+[m[32m    #inactiveacl_htm_FName = FW_log_folder + '/' + hostname___ + '.inactiveacl_Fix.html'[m
[32m+[m[32m    text = f'Inactive Acl @ {hostname___}'[m
[32m+[m[32m    #re9 = re.compile(r'(hitcnt=.*)')[m
 [m
     try:[m
         with open("%s/%s___Show_Running-Config.log"%(FW_log_folder,hostname___),'r', encoding='utf-8', errors='replace') as f:[m
[36m@@ -970,15 +989,15 @@[m [mdef NO_Log_For_ACL(t_device, Config_Change, log_folder):[m
             ACL_NAME = l[n].split()[1][m
             if ACL_NAME in list(Accessgroup_Dic_by_if.values()): #sto facendo i controlli solo sulle ACL applicate ad interfacce[m
                 if ' remark ' not in l[n]:[m
[31m-                    if (' standard ') not in l[n]:[m
[32m+[m[32m                    if ' standard ' not in l[n]:[m
                         N_Lines_ACL = N_Lines_ACL +1[m
                         if ' inactive' not in l[n]:[m
                             N_Lines_ACL_active += 1[m
[31m-                            if (' log disable' in l[n]):[m
[32m+[m[32m                            if ' log disable' in l[n]:[m
                                 temp = l[n].rstrip().replace(' log disable', ' log')[m
                                 Show_run_ACL_LogDis_Lst.append(temp)[m
                                 N_Lines_ACL_LogDis = N_Lines_ACL_LogDis +1[m
[31m-                            elif (' log ' not in l[n]):[m
[32m+[m[32m                            elif ' log ' not in l[n]:[m
                                 Show_run_ACL_NoLog_Lst.append(l[n].strip() + ' log')[m
                                 N_Lines_ACL_NoLog = N_Lines_ACL_NoLog +1[m
                         else:[m
[36m@@ -995,8 +1014,8 @@[m [mdef NO_Log_For_ACL(t_device, Config_Change, log_folder):[m
     else:[m
         Config_Change.append('Suggestion!!! no explicit logging monitor level configured')[m
 [m
[31m-    percent = round(N_Lines_ACL_NoLog/N_Lines_ACL_active*100,2) if N_Lines_ACL_active else 0[m
[31m-    percent = round(N_Lines_ACL_LogDis/N_Lines_ACL_active*100,2) if N_Lines_ACL_active else 0[m
[32m+[m[32m    #percent = round(N_Lines_ACL_NoLog/N_Lines_ACL_active*100,2) if N_Lines_ACL_active else 0[m
[32m+[m[32m    #percent = round(N_Lines_ACL_LogDis/N_Lines_ACL_active*100,2) if N_Lines_ACL_active else 0[m
 [m
     Write_Think_File(nologacl_htm_FName, Show_run_ACL_NoLog_Lst)[m
     Write_Think_File(logdisabledacl_htm_FName, Show_run_ACL_LogDis_Lst)[m
[36m@@ -1026,9 +1045,6 @@[m [mdef NO_Log_For_ACL(t_device, Config_Change, log_folder):[m
 ##(______)(_)\_)(______)(___/(____)(____/   (__)(__)\___)(____)[m
 [m
 def Unused_ACL(t_device, Config_Change, log_folder):[m
[31m-    import shelve[m
[31m-    import time[m
[31m-    import sqlalchemy as db[m
 [m
     DB_Available = True[m
     try:[m
[36m@@ -1047,7 +1063,7 @@[m [mdef Unused_ACL(t_device, Config_Change, log_folder):[m
     hostname___ = t_device.replace('/','___')[m
     FW_log_folder = log_folder + '/' + hostname___[m
     Watch_FList = [' '][m
[31m-    Watch_Heading_Text = ('The Following ACLs are not applied:')[m
[32m+[m[32m    Watch_Heading_Text = 'The Following ACLs are not applied:'[m
     Watch_FName = FW_log_folder + '/' + hostname___ + '-Unused_ACL-Watch.html'[m
     Think_FList = [' '][m
     Think_FName = FW_log_folder + '/' + hostname___ + '-Unused_ACL-Think.html'[m
[36m@@ -1099,7 +1115,7 @@[m [mdef Unused_ACL(t_device, Config_Change, log_folder):[m
 [m
     for n in ACL_List:[m
         #if n not in Accessgroup_Dic_by_if.values():[m
[31m-        if n not in Accessgroup_Dic_by_ACL.keys():[m
[32m+[m[32m        if n not in Accessgroup_Dic_by_ACL:[m
             if n not in ACL_Capture_List:[m
                 if n not in Used_ACL_ServPol:[m
                     if n not in ACL_SplitTunnel_List:[m
[36m@@ -1129,7 +1145,7 @@[m [mdef Unused_ACL(t_device, Config_Change, log_folder):[m
     for n in Unused_ACL_List:[m
         Think_FList.append('show run | i %s ' %n)[m
 [m
[31m-    if (len(Unused_ACL_List) > 0):[m
[32m+[m[32m    if len(Unused_ACL_List) > 0:[m
         for n in Unused_ACL_List:[m
             Fix_FList.append('clear configure access-list %s' %n)[m
 [m
[36m@@ -1150,7 +1166,7 @@[m [mdef Unused_ACL(t_device, Config_Change, log_folder):[m
                     FirstRun = False[m
 [m
     FirstRun = True[m
[31m-    for n in PolicyMap_Dct.keys():[m
[32m+[m[32m    for n in PolicyMap_Dct:[m
         if n not in ServicePolicy_Lst:[m
             if FirstRun == True:[m
                 Watch_FList.append('!')[m
[36m@@ -1188,10 +1204,6 @@[m [mdef Unused_ACL(t_device, Config_Change, log_folder):[m
 ##(______)(_)\_)(______)(___/(____)(____/   (_____)(____/\____) (____)\___) (__)[m
 [m
 def Unused_Object(t_device, Config_Change, log_folder):[m
[31m-    import shelve[m
[31m-    import time[m
[31m-    import sqlalchemy as db[m
[31m-    from utils_v2 import File_Save_Try[m
 [m
     DB_Available = True[m
     try:[m
[36m@@ -1212,7 +1224,7 @@[m [mdef Unused_Object(t_device, Config_Change, log_folder):[m
     html_folder = FW_log_folder[m
     global WTF_Error_FName[m
 [m
[31m-    text = ('Unused Object @ %s' %hostname___)[m
[32m+[m[32m    text = f'Unused Object @ {hostname___}'[m
     utils_v2.Text_in_Frame (text, Config_Change, Print_also=1)[m
 [m
     Used_Object_List = [][m
[36m@@ -1240,7 +1252,7 @@[m [mdef Unused_Object(t_device, Config_Change, log_folder):[m
     OBJ_GRP_PRT_Dic = utils_v2.Shelve_Read_Try(tf_name,'')[m
 [m
     OBJ_GRP_SVC_Dic_2 = OBJ_GRP_SVC_Dic.copy()[m
[31m-    for t_OBJ_GRP_SVC_Dic_key in OBJ_GRP_SVC_Dic.keys():[m
[32m+[m[32m    for t_OBJ_GRP_SVC_Dic_key in OBJ_GRP_SVC_Dic:[m
         if len(t_OBJ_GRP_SVC_Dic_key.split()) == 2:[m
             OBJ_GRP_SVC_Dic_2[t_OBJ_GRP_SVC_Dic_key.split()[0]] = [t_OBJ_GRP_SVC_Dic_key.split()[1], OBJ_GRP_SVC_Dic_2.pop(t_OBJ_GRP_SVC_Dic_key)][m
         else:[m
[36m@@ -1253,7 +1265,7 @@[m [mdef Unused_Object(t_device, Config_Change, log_folder):[m
         if n not in Used_Object_List:[m
             Count_Obj_Not_Applied += 1[m
             Unused_Obj_Net.append(n)[m
[31m-    percent = round(Count_Obj_Not_Applied/len(Declared_OBJ_NET)*100,2) if len(Declared_OBJ_NET) else 0[m
[32m+[m[32m    #percent = round(Count_Obj_Not_Applied/len(Declared_OBJ_NET)*100,2) if len(Declared_OBJ_NET) else 0[m
 [m
     Unused_ObjGrp_Net = [][m
     Count_ObjGrp_Not_Applied = 0[m
[36m@@ -1261,7 +1273,7 @@[m [mdef Unused_Object(t_device, Config_Change, log_folder):[m
         if n not in Used_Object_List:[m
             Count_ObjGrp_Not_Applied += 1[m
             Unused_ObjGrp_Net.append(n)[m
[31m-    percent = round(Count_ObjGrp_Not_Applied/len(Declared_OBJ_GRP_NET)*100,2) if len(Declared_OBJ_GRP_NET) else 0[m
[32m+[m[32m    #percent = round(Count_ObjGrp_Not_Applied/len(Declared_OBJ_GRP_NET)*100,2) if len(Declared_OBJ_GRP_NET) else 0[m
 [m
     Unused_Obj_Service = [][m
     Count_ObjSrv_Not_Applied = 0[m
[36m@@ -1269,22 +1281,22 @@[m [mdef Unused_Object(t_device, Config_Change, log_folder):[m
         if n not in Used_Object_List:[m
             Count_ObjSrv_Not_Applied += 1[m
             Unused_Obj_Service.append(n)[m
[31m-    percent = round(Count_ObjSrv_Not_Applied/len(Declared_Object_service)*100,2) if len(Declared_Object_service) else 0[m
[32m+[m[32m    #percent = round(Count_ObjSrv_Not_Applied/len(Declared_Object_service)*100,2) if len(Declared_Object_service) else 0[m
 [m
     Unused_ObjGrp_Service = [][m
     Count_ObjGrpSrv_Not_Applied = 0[m
     # find in services[m
[31m-    for n in OBJ_GRP_SVC_Dic_2.keys():[m
[32m+[m[32m    for n in OBJ_GRP_SVC_Dic_2:[m
         if n not in Used_Object_List:[m
             Count_ObjGrpSrv_Not_Applied += 1[m
             Unused_ObjGrp_Service.append(n)[m
     # find in protocols[m
[31m-    for n in OBJ_GRP_PRT_Dic.keys():[m
[32m+[m[32m    for n in OBJ_GRP_PRT_Dic:[m
         if n not in Used_Object_List:[m
             Count_ObjGrpSrv_Not_Applied += 1[m
             Unused_ObjGrp_Service.append(n)[m
[31m-    LEN_OBJ_SVC = len(OBJ_GRP_SVC_Dic_2.keys()) + len(OBJ_GRP_PRT_Dic.keys())[m
[31m-    percent = round(Count_ObjGrpSrv_Not_Applied/LEN_OBJ_SVC*100,2) if LEN_OBJ_SVC else 0[m
[32m+[m[32m    LEN_OBJ_SVC = len(OBJ_GRP_SVC_Dic_2) + len(OBJ_GRP_PRT_Dic)[m
[32m+[m[32m    #percent = round(Count_ObjGrpSrv_Not_Applied/LEN_OBJ_SVC*100,2) if LEN_OBJ_SVC else 0[m
 [m
     # ----- WTF for Unused_Obj_Net ---------------------------------------------------[m
     Watch_FList = [][m
[36m@@ -1372,9 +1384,9 @@[m [mdef Unused_Object(t_device, Config_Change, log_folder):[m
         for item in Unused_ObjGrp_Service:[m
             Watch_FList.append('<li>%s</li>' %item)[m
             Think_FList.append('show run | i %s' %item)[m
[31m-            if item in OBJ_GRP_SVC_Dic_2.keys():[m
[32m+[m[32m            if item in OBJ_GRP_SVC_Dic_2:[m
                 Fix_FList.append('no object-group service %s' %item)[m
[31m-            elif item in OBJ_GRP_PRT_Dic.keys():[m
[32m+[m[32m            elif item in OBJ_GRP_PRT_Dic:[m
                 Fix_FList.append('no object-group protocol %s' %item)[m
             else:[m
                 print('WTF!!!! @ unused object')[m
[36m@@ -1424,10 +1436,9 @@[m [mdef Unused_Object(t_device, Config_Change, log_folder):[m
 def ObjGrpNet_With1Entry(t_device, Config_Change, log_folder):[m
     re10 = re.compile(r'line \d+ ')[m
 [m
[31m-    import shelve[m
     hostname___ = t_device.replace('/','___')[m
 [m
[31m-    text = ('object-group network with one entry @ %s' %hostname___)[m
[32m+[m[32m    text = f'object-group network with one entry @ {hostname___}'[m
     utils_v2.Text_in_Frame (text, Config_Change, Print_also=1)[m
 [m
     FW_log_folder = log_folder + '/' + hostname___[m
[36m@@ -1443,7 +1454,7 @@[m [mdef ObjGrpNet_With1Entry(t_device, Config_Change, log_folder):[m
     Old_to_New = {}[m
     TEMP_Config_Change = [][m
 [m
[31m-    for t_key in OBJ_GRP_NET_Dic.keys():[m
[32m+[m[32m    for t_key in OBJ_GRP_NET_Dic:[m
         if len(OBJ_GRP_NET_Dic[t_key]) == 1:[m
             TEMP_Config_Change.append('\n!object-group network %s' %(t_key))[m
             TEMP_Config_Change.append('!%s' %(OBJ_GRP_NET_Dic[t_key][0]))[m
[36m@@ -1487,7 +1498,7 @@[m [mdef ObjGrpNet_With1Entry(t_device, Config_Change, log_folder):[m
     TEMP_Config_Change.append('')[m
     for t_key in OBJ_GRP_NET_Dic:[m
         for t_item in OBJ_GRP_NET_Dic[t_key]:[m
[31m-            for tt_key in Old_to_New.keys():[m
[32m+[m[32m            for tt_key in Old_to_New:[m
                 if 'group-object ' in t_item:[m
                     if tt_key == t_item.split()[1]:[m
                         TEMP_Config_Change.append('object-group network %s' %t_key)[m
[36m@@ -1534,10 +1545,6 @@[m [mdef ObjGrpNet_With1Entry(t_device, Config_Change, log_folder):[m
 [m
 def Duplicated_Objects(t_device, Config_Change, log_folder):[m
 [m
[31m-    import shelve[m
[31m-    import time[m
[31m-    import sqlalchemy as db[m
[31m-[m
     hostname___ = t_device.replace('/','___')[m
     FW_log_folder  = log_folder + '/' + hostname___[m
     html_folder = FW_log_folder[m
[36m@@ -1557,7 +1564,7 @@[m [mdef Duplicated_Objects(t_device, Config_Change, log_folder):[m
         Config_Change.append('DB not connected, some feature is unavailable\n')[m
         DB_Available = False[m
 [m
[31m-    text = ('Duplicated Objects @ %s' %hostname___)[m
[32m+[m[32m    text = f'Duplicated Objects @ {hostname___}'[m
     utils_v2.Text_in_Frame (text, Config_Change, Print_also=1)[m
 [m
     tf_name = f"{FW_log_folder}/VAR_{hostname___}___Undeclared_NetObj_List"[m
[36m@@ -1580,13 +1587,13 @@[m [mdef Duplicated_Objects(t_device, Config_Change, log_folder):[m
     Dup_OBJ_NET_List = [][m
     N_of_Duplicated_OBJ_NET = 0[m
     N_of_unique_Duplicated_OBJ_NET = 0[m
[31m-    for t_key in Obejct_by_value_Dict.keys():[m
[32m+[m[32m    for t_key in Obejct_by_value_Dict:[m
         if len(Obejct_by_value_Dict[t_key]) > 1:[m
             N_of_Duplicated_OBJ_NET += 1[m
             N_of_unique_Duplicated_OBJ_NET += len(Obejct_by_value_Dict[t_key])[m
             Dup_OBJ_NET_List.append([t_key, Obejct_by_value_Dict[t_key]])[m
 [m
[31m-    Prcnt_N_of_unique_Dup_OBJ_NET = round(100*N_of_unique_Duplicated_OBJ_NET/len(Declared_OBJ_NET),1) if (len(Declared_OBJ_NET)!=0) else 0[m
[32m+[m[32m    #Prcnt_N_of_unique_Dup_OBJ_NET = round(100*N_of_unique_Duplicated_OBJ_NET/len(Declared_OBJ_NET),1) if (len(Declared_OBJ_NET)!=0) else 0[m
 [m
     Watch_Flist = [][m
     Watch_Flist.append('<div class="card-body">\n')[m
[36m@@ -1622,24 +1629,20 @@[m [mdef Duplicated_Objects(t_device, Config_Change, log_folder):[m
     OBJ_GRP_NET_Dic_explode = {}[m
 ##    Duplicated_Object_List = [][m
     Duplicated_Object_Dic = {}[m
[31m-    for t_key in OBJ_GRP_NET_Dic.keys():[m
[31m-        if 'DB_PAAS_AZURE_10.164.24.8' in t_key:[m
[31m-            print('stop')[m
[32m+[m[32m    for t_key in OBJ_GRP_NET_Dic:[m
         t_vals = [][m
         for t_item in OBJ_GRP_NET_Dic[t_key]:[m
[31m-            if 'DB_PAAS_AZURE_10.164.24.8' in t_item:[m
[31m-                print('stop')[m
             if 'network-object host ' in t_item:[m
 ##                if t_item.split()[-1] in t_vals:[m
 ##                    print(f'Duplicated Object in {t_key}: {t_item.split()[-1]}')[m
 ##                    Duplicated_Object_List.append(f'{t_key}: {t_item.split()[-1]}')[m
                 t_vals.append(t_item.split()[-1])[m
[31m-                if f'{t_key}|{t_item.split()[-1]}' not in Duplicated_Object_Dic.keys():[m
[32m+[m[32m                if f'{t_key}|{t_item.split()[-1]}' not in Duplicated_Object_Dic:[m
                     Duplicated_Object_Dic[f'{t_key}|{t_item.split()[-1]}'] = [f'{t_key} => {t_item}'][m
                 else:[m
                     Duplicated_Object_Dic[f'{t_key}|{t_item.split()[-1]}'].append(f'{t_key} => {t_item}')[m
             elif 'network-object object ' in t_item:[m
[31m-                if (t_item.split()[-1]) in Obj_Net_Dic:[m
[32m+[m[32m                if t_item.split()[-1] in Obj_Net_Dic:[m
                     temp = Obj_Net_Dic[t_item.split()[-1]][m
                     temp = temp.replace('host ','')[m
                     temp = temp.replace('range ','')[m
[36m@@ -1654,98 +1657,107 @@[m [mdef Duplicated_Objects(t_device, Config_Change, log_folder):[m
                     Config_Change.append(f"Key not found: {t_item.split()[-1]}\n")[m
                     Config_Change.append(f"network-object object {t_item} # can be safely removed from {t_key}\n")[m
                 t_vals.append(temp)[m
[31m-                if f'{t_key}|{temp}' not in Duplicated_Object_Dic.keys():[m
[32m+[m[32m                if f'{t_key}|{temp}' not in Duplicated_Object_Dic:[m
                     Duplicated_Object_Dic[f'{t_key}|{temp}'] = [f'{t_key} => {t_item}'][m
                 else:[m
                     Duplicated_Object_Dic[f'{t_key}|{temp}'].append(f'{t_key} => {t_item}')[m
             elif 'group-object ' in t_item:[m
                 tt_key = t_item.split()[-1][m
[31m-                for tt_item in OBJ_GRP_NET_Dic[tt_key]:[m
[31m-                    if 'network-object host ' in tt_item:[m
[31m-##                        if tt_item.split()[-1] in t_vals:[m
[31m-##                            print(f'Duplicated Object in {t_key}: {tt_item.split()[-1]}')[m
[31m-##                            Duplicated_Object_List.append(f'{t_key}: {tt_item.split()[-1]}')[m
[31m-                        t_vals.append(tt_item.split()[-1])[m
[31m-                        if f'{t_key}|{tt_item.split()[-1]}' not in Duplicated_Object_Dic.keys():[m
[31m-                            Duplicated_Object_Dic[f'{t_key}|{tt_item.split()[-1]}'] = [f'{t_key} => {tt_key} => {tt_item}'][m
[31m-                        else:[m
[31m-                            Duplicated_Object_Dic[f'{t_key}|{tt_item.split()[-1]}'].append(f'{t_key} => {tt_key} => {tt_item}')[m
[31m-                    elif 'network-object object ' in tt_item:[m
[31m-                        if (tt_item.split()[-1]) in Obj_Net_Dic:[m
[31m-                            temp = Obj_Net_Dic[tt_item.split()[-1]][m
[31m-                            temp = temp.replace('host ','')[m
[31m-                            temp = temp.replace('range ','')[m
[31m-                            temp = temp.replace('subnet ','')[m
[31m-                            temp = temp.replace('fqdn ','')[m
[31m-                        else:[m
[31m-                            print(f"Key not found: {tt_item.split()[-1]}")[m
[31m-                            print(f"network-object object {tt_item} # can be safely removed from {tt_key}")[m
[31m-                            Config_Change.append(f"Key not found: {tt_item.split()[-1]}\n")[m
[31m-                            Config_Change.append(f"network-object object {tt_item} # can be safely removed from {tt_key}\n")[m
[31m-##                        if temp in t_vals:[m
[31m-##                            print(f'Duplicated Object in {t_key}: {temp}')[m
[31m-##                            Duplicated_Object_List.append(f'{t_key}: {temp}')[m
[31m-                        t_vals.append(temp)[m
[31m-                        if f'{t_key}|{temp}' not in Duplicated_Object_Dic.keys():[m
[31m-                            Duplicated_Object_Dic[f'{t_key}|{temp}'] = [f'{t_key} => {tt_key} => {tt_item}'][m
[31m-                        else:[m
[31m-                            Duplicated_Object_Dic[f'{t_key}|{temp}'].append(f'{t_key} => {tt_key} => {tt_item}')[m
[31m-                    elif 'group-object ' in tt_item:[m
[31m-                        ttt_key = tt_item.split()[-1][m
[31m-                        for ttt_item in OBJ_GRP_NET_Dic[ttt_key]:[m
[31m-                            if 'network-object host ' in ttt_item:[m
[31m-##                                if ttt_item.split()[-1] in t_vals:[m
[31m-##                                    print(f'Duplicated Object in {t_key}: {ttt_item.split()[-1]}')[m
[31m-##                                    Duplicated_Object_List.append(f'{t_key}: {ttt_item.split()[-1]}')[m
[31m-                                t_vals.append(ttt_item.split()[-1])[m
[31m-                                if f'{t_key}|{ttt_item.split()[-1]}' not in Duplicated_Object_Dic.keys():[m
[31m-                                    Duplicated_Object_Dic[f'{t_key}|{ttt_item.split()[-1]}'] = [f'{t_key} => {tt_key} => {ttt_key} => {ttt_item}'][m
[31m-                                else:[m
[31m-                                    Duplicated_Object_Dic[f'{t_key}|{ttt_item.split()[-1]}'].append(f'{t_key} => {tt_key} => {ttt_key} => {ttt_item}')[m
[31m-                            elif 'network-object object ' in ttt_item:[m
[31m-                                if (ttt_item.split()[-1]) in Obj_Net_Dic:[m
[31m-                                    temp = Obj_Net_Dic[ttt_item.split()[-1]][m
[31m-                                    temp = temp.replace('host ','')[m
[31m-                                    temp = temp.replace('range ','')[m
[31m-                                    temp = temp.replace('subnet ','')[m
[31m-                                    temp = temp.replace('fqdn ','')[m
[31m-                                else:[m
[31m-                                    print(f"Key not found: {ttt_item.split()[-1]}")[m
[31m-                                    print(f"network-object object {ttt_item} # can be safely removed from {ttt_key}")[m
[31m-                                    Config_Change.append(f"Key not found: {ttt_item.split()[-1]}\n")[m
[31m-                                    Config_Change.append(f"network-object object {ttt_item} # can be safely removed from {ttt_key}\n")[m
[31m-##                                if temp in t_vals:[m
[31m-##                                    print(f'Duplicated Object in {t_key}: {temp}')[m
[31m-##                                    Duplicated_Object_List.append(f'{t_key}: {temp}')[m
[31m-                                t_vals.append(temp)[m
[31m-                                if f'{t_key}|{temp}' not in Duplicated_Object_Dic.keys():[m
[31m-                                    Duplicated_Object_Dic[f'{t_key}|{temp}'] = [f'{t_key} => {tt_key} => {ttt_key} => {ttt_item}'][m
[31m-                                else:[m
[31m-                                    Duplicated_Object_Dic[f'{t_key}|{temp}'].append(f'{t_key} => {tt_key} => {ttt_key} => {ttt_item}')[m
[31m-                            elif 'group-object ' in ttt_item:[m
[31m-                                ttt_key = ttt_item.split()[-1][m
[32m+[m[32m                if tt_key in OBJ_GRP_NET_Dic:[m
[32m+[m[32m                    for tt_item in OBJ_GRP_NET_Dic[tt_key]:[m
[32m+[m[32m                        if 'network-object host ' in tt_item:[m
[32m+[m[32m    ##                        if tt_item.split()[-1] in t_vals:[m
[32m+[m[32m    ##                            print(f'Duplicated Object in {t_key}: {tt_item.split()[-1]}')[m
[32m+[m[32m    ##                            Duplicated_Object_List.append(f'{t_key}: {tt_item.split()[-1]}')[m
[32m+[m[32m                            t_vals.append(tt_item.split()[-1])[m
[32m+[m[32m                            if f'{t_key}|{tt_item.split()[-1]}' not in Duplicated_Object_Dic:[m
[32m+[m[32m                                Duplicated_Object_Dic[f'{t_key}|{tt_item.split()[-1]}'] = [f'{t_key} => {tt_key} => {tt_item}'][m
                             else:[m
[31m-                                # network-object 10.10.100.0 255.255.254.0[m
[31m-##                                if (ttt_item.replace('network-object ','')) in t_vals:[m
[31m-##                                    print(f"Duplicated Object in {t_key}: {ttt_item.replace('network-object ','')}")[m
[31m-##                                    Duplicated_Object_List.append(f"{t_key}: {ttt_item.replace('network-object ','')}")[m
[31m-                                t_vals.append(ttt_item.replace('network-object ',''))[m
[31m-                                temp = ttt_item.replace('network-object ','')[m
[31m-                                if f'{t_key}|{temp}' not in Duplicated_Object_Dic.keys():[m
[31m-                                    Duplicated_Object_Dic[f'{t_key}|{temp}'] = [f"{t_key} => {tt_key} => {ttt_key} => {temp}"][m
[31m-                                else:[m
[31m-                                    Duplicated_Object_Dic[f'{t_key}|{temp}'].append(f"{t_key} => {tt_key} => {ttt_key} => {temp}")[m
[31m-                    else:[m
[31m-                        # network-object 10.10.100.0 255.255.254.0[m
[31m-##                        if (tt_item.replace('network-object ','')) in t_vals:[m
[31m-##                            print(f"Duplicated Object in {t_key}: {tt_item.replace('network-object ','')}")[m
[31m-##                            Duplicated_Object_List.append(f"{t_key}: {tt_item.replace('network-object ','')}")[m
[31m-                        t_vals.append(tt_item.replace('network-object ',''))[m
[31m-                        temp = tt_item.replace('network-object ','')[m
[31m-                        if f'{t_key}|{temp}' not in Duplicated_Object_Dic.keys():[m
[31m-                            Duplicated_Object_Dic[f'{t_key}|{temp}'] = [f"{t_key} => {tt_key} => {temp}"][m
[32m+[m[32m                                Duplicated_Object_Dic[f'{t_key}|{tt_item.split()[-1]}'].append(f'{t_key} => {tt_key} => {tt_item}')[m
[32m+[m[32m                        elif 'network-object object ' in tt_item:[m
[32m+[m[32m                            if tt_item.split()[-1] in Obj_Net_Dic:[m
[32m+[m[32m                                temp = Obj_Net_Dic[tt_item.split()[-1]][m
[32m+[m[32m                                temp = temp.replace('host ','')[m
[32m+[m[32m                                temp = temp.replace('range ','')[m
[32m+[m[32m                                temp = temp.replace('subnet ','')[m
[32m+[m[32m                                temp = temp.replace('fqdn ','')[m
[32m+[m[32m                            else:[m
[32m+[m[32m                                print(f"Key not found: {tt_item.split()[-1]}")[m
[32m+[m[32m                                print(f"network-object object {tt_item} # can be safely removed from {tt_key}")[m
[32m+[m[32m                                Config_Change.append(f"Key not found: {tt_item.split()[-1]}\n")[m
[32m+[m[32m                                Config_Change.append(f"network-object object {tt_item} # can be safely removed from {tt_key}\n")[m
[32m+[m[32m    ##                        if temp in t_vals:[m
[32m+[m[32m    ##                            print(f'Duplicated Object in {t_key}: {temp}')[m
[32m+[m[32m    ##                            Duplicated_Object_List.append(f'{t_key}: {temp}')[m
[32m+[m[32m                            t_vals.append(temp)[m
[32m+[m[32m                            if f'{t_key}|{temp}' not in Duplicated_Object_Dic:[m
[32m+[m[32m                                Duplicated_Object_Dic[f'{t_key}|{temp}'] = [f'{t_key} => {tt_key} => {tt_item}'][m
[32m+[m[32m                            else:[m
[32m+[m[32m                                Duplicated_Object_Dic[f'{t_key}|{temp}'].append(f'{t_key} => {tt_key} => {tt_item}')[m
[32m+[m[32m                        elif 'group-object ' in tt_item:[m
[32m+[m[32m                            ttt_key = tt_item.split()[-1][m
[32m+[m[32m                            if ttt_key in OBJ_GRP_NET_Dic:[m
[32m+[m[32m                                for ttt_item in OBJ_GRP_NET_Dic[ttt_key]:[m
[32m+[m[32m                                    if 'network-object host ' in ttt_item:[m
[32m+[m[32m        ##                                if ttt_item.split()[-1] in t_vals:[m
[32m+[m[32m        ##                                    print(f'Duplicated Object in {t_key}: {ttt_item.split()[-1]}')[m
[32m+[m[32m        ##                                    Duplicated_Object_List.append(f'{t_key}: {ttt_item.split()[-1]}')[m
[32m+[m[32m                                        t_vals.append(ttt_item.split()[-1])[m
[32m+[m[32m                                        if f'{t_key}|{ttt_item.split()[-1]}' not in Duplicated_Object_Dic:[m
[32m+[m[32m                                            Duplicated_Object_Dic[f'{t_key}|{ttt_item.split()[-1]}'] = [f'{t_key} => {tt_key} => {ttt_key} => {ttt_item}'][m
[32m+[m[32m                                        else:[m
[32m+[m[32m                                            Duplicated_Object_Dic[f'{t_key}|{ttt_item.split()[-1]}'].append(f'{t_key} => {tt_key} => {ttt_key} => {ttt_item}')[m
[32m+[m[32m                                    elif 'network-object object ' in ttt_item:[m
[32m+[m[32m                                        if ttt_item.split()[-1] in Obj_Net_Dic:[m
[32m+[m[32m                                            temp = Obj_Net_Dic[ttt_item.split()[-1]][m
[32m+[m[32m                                            temp = temp.replace('host ','')[m
[32m+[m[32m                                            temp = temp.replace('range ','')[m
[32m+[m[32m                                            temp = temp.replace('subnet ','')[m
[32m+[m[32m                                            temp = temp.replace('fqdn ','')[m
[32m+[m[32m                                        else:[m
[32m+[m[32m                                            print(f"Key not found: {ttt_item.split()[-1]}")[m
[32m+[m[32m                                            print(f"network-object object {ttt_item} # can be safely removed from {ttt_key}")[m
[32m+[m[32m                                            Config_Change.append(f"Key not found: {ttt_item.split()[-1]}\n")[m
[32m+[m[32m                                            Config_Change.append(f"network-object object {ttt_item} # can be safely removed from {ttt_key}\n")[m
[32m+[m[32m        ##                                if temp in t_vals:[m
[32m+[m[32m        ##                                    print(f'Duplicated Object in {t_key}: {temp}')[m
[32m+[m[32m        ##                                    Duplicated_Object_List.append(f'{t_key}: {temp}')[m
[32m+[m[32m                                        t_vals.append(temp)[m
[32m+[m[32m                                        if f'{t_key}|{temp}' not in Duplicated_Object_Dic:[m
[32m+[m[32m                                            Duplicated_Object_Dic[f'{t_key}|{temp}'] = [f'{t_key} => {tt_key} => {ttt_key} => {ttt_item}'][m
[32m+[m[32m                                        else:[m
[32m+[m[32m                                            Duplicated_Object_Dic[f'{t_key}|{temp}'].append(f'{t_key} => {tt_key} => {ttt_key} => {ttt_item}')[m
[32m+[m[32m                                    elif 'group-object ' in ttt_item:[m
[32m+[m[32m                                        ttt_key = ttt_item.split()[-1][m
[32m+[m[32m                                    else:[m
[32m+[m[32m                                        # network-object 10.10.100.0 255.255.254.0[m
[32m+[m[32m        ##                                if (ttt_item.replace('network-object ','')) in t_vals:[m
[32m+[m[32m        ##                                    print(f"Duplicated Object in {t_key}: {ttt_item.replace('network-object ','')}")[m
[32m+[m[32m        ##                                    Duplicated_Object_List.append(f"{t_key}: {ttt_item.replace('network-object ','')}")[m
[32m+[m[32m                                        t_vals.append(ttt_item.replace('network-object ',''))[m
[32m+[m[32m                                        temp = ttt_item.replace('network-object ','')[m
[32m+[m[32m                                        if f'{t_key}|{temp}' not in Duplicated_Object_Dic:[m
[32m+[m[32m                                            Duplicated_Object_Dic[f'{t_key}|{temp}'] = [f"{t_key} => {tt_key} => {ttt_key} => {temp}"][m
[32m+[m[32m                                        else:[m
[32m+[m[32m                                            Duplicated_Object_Dic[f'{t_key}|{temp}'].append(f"{t_key} => {tt_key} => {ttt_key} => {temp}")[m
[32m+[m[32m                            else:[m
[32m+[m[32m                                print(f"Undeclared object '{ttt_key}' used in '{t_key}': REMOVE IT!")[m
[32m+[m[32m                                Config_Change.append(f"Undeclared object '{ttt_key}' used in '{t_key}': REMOVE IT!\n")[m
                         else:[m
[31m-                            Duplicated_Object_Dic[f'{t_key}|{temp}'].append(f"{t_key} => {tt_key} => {temp}")[m
[32m+[m[32m                            # network-object 10.10.100.0 255.255.254.0[m
[32m+[m[32m    ##                        if (tt_item.replace('network-object ','')) in t_vals:[m
[32m+[m[32m    ##                            print(f"Duplicated Object in {t_key}: {tt_item.replace('network-object ','')}")[m
[32m+[m[32m    ##                            Duplicated_Object_List.append(f"{t_key}: {tt_item.replace('network-object ','')}")[m
[32m+[m[32m                            t_vals.append(tt_item.replace('network-object ',''))[m
[32m+[m[32m                            temp = tt_item.replace('network-object ','')[m
[32m+[m[32m                            if f'{t_key}|{temp}' not in Duplicated_Object_Dic:[m
[32m+[m[32m                                Duplicated_Object_Dic[f'{t_key}|{temp}'] = [f"{t_key} => {tt_key} => {temp}"][m
[32m+[m[32m                            else:[m
[32m+[m[32m                                Duplicated_Object_Dic[f'{t_key}|{temp}'].append(f"{t_key} => {tt_key} => {temp}")[m
[32m+[m[32m                else:[m
[32m+[m[32m                    print(f"Undeclared object '{tt_key}' used in '{t_key}': REMOVE IT!")[m
[32m+[m[32m                    Config_Change.append(f"Undeclared object '{tt_key}' used in '{t_key}': REMOVE IT!\n")[m
[32m+[m
             else:[m
                 # network-object 10.10.100.0 255.255.254.0[m
 ##                if (t_item.replace('network-object ','')) in t_vals:[m
[36m@@ -1753,7 +1765,7 @@[m [mdef Duplicated_Objects(t_device, Config_Change, log_folder):[m
 ##                    Duplicated_Object_List.append(f"{t_key}: {t_item.replace('network-object ','')}")[m
                 t_vals.append(t_item.replace('network-object ',''))[m
                 temp = t_item.replace('network-object ','')[m
[31m-                if f'{t_key}|{temp}' not in Duplicated_Object_Dic.keys():[m
[32m+[m[32m                if f'{t_key}|{temp}' not in Duplicated_Object_Dic:[m
                     Duplicated_Object_Dic[f'{t_key}|{temp}'] = [f"{t_key} => {temp}"][m
                 else:[m
                     Duplicated_Object_Dic[f'{t_key}|{temp}'].append(f"{t_key} => {temp}")[m
[36m@@ -1761,7 +1773,7 @@[m [mdef Duplicated_Objects(t_device, Config_Change, log_folder):[m
 [m
     Dup_OBJGRP_NET_List = [][m
     Found_keys = [][m
[31m-    t_key_List = list(OBJ_GRP_NET_Dic_explode.keys())[m
[32m+[m[32m    t_key_List = list(OBJ_GRP_NET_Dic_explode)[m
     for n1 in range(0,len(t_key_List)):[m
         if t_key_List[n1] in Found_keys:[m
             continue[m
[36m@@ -1813,7 +1825,7 @@[m [mdef Duplicated_Objects(t_device, Config_Change, log_folder):[m
 ##        Watch_Flist.append(f'   <li>{t_line}</li>\n')[m
 ##    Watch_Flist.append('   </ul>\n')[m
     Watch_Flist.append('   <br>\n')[m
[31m-    for t_key in Duplicated_Object_Dic.keys():[m
[32m+[m[32m    for t_key in Duplicated_Object_Dic:[m
         if len(Duplicated_Object_Dic[t_key]) > 1:[m
             Watch_Flist.append(f'   <ul><li>{t_key}\n')[m
             Watch_Flist.append('   <ul>\n')[m
[36m@@ -1839,22 +1851,22 @@[m [mdef Duplicated_Objects(t_device, Config_Change, log_folder):[m
     tf_name = f"{FW_log_folder}/VAR_{hostname___}___OBJ_SVC_Dic"[m
     OBJ_SVC_Dic = utils_v2.Shelve_Read_Try(tf_name,'')[m
 [m
[31m-    for m in range(0,len(OBJ_SVC_Dic.keys())):[m
[31m-        tm_key = list(OBJ_SVC_Dic.keys())[m][m
[32m+[m[32m    for m in range(0,len(OBJ_SVC_Dic)):[m
[32m+[m[32m        tm_key = list(OBJ_SVC_Dic)[m][m
         tm_item = OBJ_SVC_Dic[tm_key][m
[31m-        for mm in range(m+1,len(OBJ_SVC_Dic.keys())):[m
[31m-            tmm_key = list(OBJ_SVC_Dic.keys())[mm][m
[32m+[m[32m        for mm in range(m+1,len(OBJ_SVC_Dic)):[m
[32m+[m[32m            tmm_key = list(OBJ_SVC_Dic)[mm][m
             tmm_item = OBJ_SVC_Dic[tmm_key][m
             if tmm_item == tm_item:[m
                 Duplicated_OBJ_SVC[tm_item] = [tm_key][m
                 if tmm_key not in Duplicated_OBJ_SVC[tm_item]:[m
                     Duplicated_OBJ_SVC[tm_item].append(tmm_key)[m
     if len(Duplicated_OBJ_SVC)>0:[m
[31m-        for t_key in Duplicated_OBJ_SVC.keys():[m
[32m+[m[32m        for t_key in Duplicated_OBJ_SVC:[m
             temp = '|'.join(Duplicated_OBJ_SVC[t_key])[m
 [m
     N_of_Duplicated_OBJ_SVC = sum(len(sublist) for sublist in list(Duplicated_OBJ_SVC.values()))[m
[31m-    Prcnt_N_of_Duplicated_OBJ_SVC = round(100*N_of_Duplicated_OBJ_SVC/len(OBJ_SVC_Dic.keys()),1) if (len(OBJ_SVC_Dic.keys())!=0) else 0[m
[32m+[m[32m    #Prcnt_N_of_Duplicated_OBJ_SVC = round(100*N_of_Duplicated_OBJ_SVC/len(OBJ_SVC_Dic),1) if (len(OBJ_SVC_Dic)!=0) else 0[m
 [m
     Watch_Flist = [][m
     Watch_Flist.append('<div class="card-body">\n')[m
[36m@@ -1864,7 +1876,7 @@[m [mdef Duplicated_Objects(t_device, Config_Change, log_folder):[m
     Watch_Flist.append('           <th class="px-2">Service Name</th>\n')[m
     Watch_Flist.append('       </tr></thead>\n')[m
     Watch_Flist.append('       <tbody>\n')[m
[31m-    for t_key in Duplicated_OBJ_SVC.keys():[m
[32m+[m[32m    for t_key in Duplicated_OBJ_SVC:[m
         Watch_Flist.append('       <tr>\n')[m
         Watch_Flist.append('           <td class="font-weight-bold text-nowrap px-2">%s</td>\n' %t_key)[m
         Watch_Flist.append('       <td class="px-2">\n')[m
[36m@@ -1888,7 +1900,7 @@[m [mdef Duplicated_Objects(t_device, Config_Change, log_folder):[m
     Think_Flist.append('           <th>Object Service</th>\n')[m
     Think_Flist.append('       </tr></thead>\n')[m
     Think_Flist.append('       <tbody>\n')[m
[31m-    for t_key in Duplicated_OBJ_SVC.keys():[m
[32m+[m[32m    for t_key in Duplicated_OBJ_SVC:[m
         Think_Flist.append('       <tr><td class="text-nowrap mr-2">\n')[m
         Think_Flist.append('<ul>\n')[m
         Think_Flist.append('      <br><li>\n')[m
[36m@@ -1916,7 +1928,7 @@[m [mdef Duplicated_Objects(t_device, Config_Change, log_folder):[m
         if t_line.split()[0] == '<_CODE_>':[m
             t_line = ' '.join(t_line.split()[1:])[m
             t_line = utils_v2.Color_Line(t_line)[m
[31m-            Think_Flist[i] = ('%s\n' %t_line)[m
[32m+[m[32m            Think_Flist[i] = f'{t_line}\n'[m
         elif t_line.split()[0] == '<_L1_TEXT_>':[m
             Think_Flist[i] = ('%s\n' %' '.join(t_line.split()[1:]))[m
         elif t_line.split()[0] == '<_L2_TEXT_>':[m
[36m@@ -1949,12 +1961,12 @@[m [mdef Duplicated_Objects(t_device, Config_Change, log_folder):[m
 ##  port-object   Configure a port object[m
 [m
     OBJ_GRP_SVC_Dic_2 = OBJ_GRP_SVC_Dic.copy()[m
[31m-    for t_OBJ_GRP_SVC_Dic_key in OBJ_GRP_SVC_Dic.keys():[m
[32m+[m[32m    for t_OBJ_GRP_SVC_Dic_key in OBJ_GRP_SVC_Dic:[m
         if len(t_OBJ_GRP_SVC_Dic_key.split()) == 2:[m
             OBJ_GRP_SVC_Dic_2[t_OBJ_GRP_SVC_Dic_key.split()[0]] = OBJ_GRP_SVC_Dic_2.pop(t_OBJ_GRP_SVC_Dic_key)[m
 [m
     OBJ_GRP_SVC_Dic_explode = {}[m
[31m-    for t_key in OBJ_GRP_SVC_Dic_2.keys():[m
[32m+[m[32m    for t_key in OBJ_GRP_SVC_Dic_2:[m
         t_vals = [][m
         for t_item in OBJ_GRP_SVC_Dic_2[t_key]:[m
             if 'port-object ' in t_item:[m
[36m@@ -1963,24 +1975,38 @@[m [mdef Duplicated_Objects(t_device, Config_Change, log_folder):[m
                 t_vals.append(t_item.strip().replace('service-object ',''))[m
             elif 'group-object ' in t_item:[m
                 tt_key = t_item.strip().replace('group-object ','')[m
[31m-                for tt_item in OBJ_GRP_SVC_Dic_2[tt_key]:[m
[31m-                    if 'port-object ' in tt_item:[m
[31m-                        t_vals.append(tt_item.strip().replace('port-object ',''))[m
[31m-                    elif 'service-object ' in tt_item:[m
[31m-                        t_vals.append(tt_item.strip().replace('service-object ',''))[m
[31m-                    elif 'group-object ' in tt_item:[m
[31m-                        ttt_key = tt_item.strip().replace('group-object ','')[m
[31m-                        for ttt_item in OBJ_GRP_SVC_Dic_2[ttt_key]:[m
[31m-                            if 'port-object ' in ttt_item:[m
[31m-                                t_vals.append(ttt_item.strip().replace('port-object ',''))[m
[31m-                            elif 'service-object ' in ttt_item:[m
[31m-                                t_vals.append(ttt_item.strip().replace('service-object ',''))[m
[31m-                            elif 'group-object ' in ttt_item:[m
[31m-                                ttt_key = ttt_item.strip().replace('group-object ','')[m
[32m+[m[32m                if tt_key in OBJ_GRP_SVC_Dic_2:[m
[32m+[m[32m                    for tt_item in OBJ_GRP_SVC_Dic_2[tt_key]:[m
[32m+[m[32m                        if 'port-object ' in tt_item:[m
[32m+[m[32m                            t_vals.append(tt_item.strip().replace('port-object ',''))[m
[32m+[m[32m                        elif 'service-object ' in tt_item:[m
[32m+[m[32m                            t_vals.append(tt_item.strip().replace('service-object ',''))[m
[32m+[m[32m                        elif 'group-object ' in tt_item:[m
[32m+[m[32m                            ttt_key = tt_item.strip().replace('group-object ','')[m
[32m+[m[32m                            if ttt_key in OBJ_GRP_SVC_Dic_2:[m
[32m+[m[32m                                if ttt_key == 'ephemeral_port':[m
[32m+[m[32m                                    print('stop')[m
[32m+[m[32m                                for ttt_item in OBJ_GRP_SVC_Dic_2[ttt_key]:[m
[32m+[m[32m                                    if 'port-object ' in ttt_item:[m
[32m+[m[32m                                        t_vals.append(ttt_item.strip().replace('port-object ',''))[m
[32m+[m[32m                                    elif 'service-object ' in ttt_item:[m
[32m+[m[32m                                        t_vals.append(ttt_item.strip().replace('service-object ',''))[m
[32m+[m[32m                                    elif 'group-object ' in ttt_item:[m
[32m+[m[32m                                        ttt_key = ttt_item.strip().replace('group-object ','')[m
[32m+[m[32m                                    else:[m
[32m+[m[32m                                        print('... there is some problem here')[m
                             else:[m
[31m-                                print('... there is some problem here')[m
[31m-                    else:[m
[31m-                        print('... there is some problem here')[m
[32m+[m[32m                                print(f"Key not found: {ttt_key}")[m
[32m+[m[32m                                print(f"group-object {ttt_key} # can be safely removed from {tt_key}")[m
[32m+[m[32m                                Config_Change.append(f"Key not found: {ttt_key}\n")[m
[32m+[m[32m                                Config_Change.append(f"group-object {ttt_key} # can be safely removed from {tt_key}\n")[m
[32m+[m[32m                        else:[m
[32m+[m[32m                            print('... there is some problem here')[m
[32m+[m[32m                else:[m
[32m+[m[32m                    print(f"Key not found: {tt_key}")[m
[32m+[m[32m                    print(f"group-object {tt_key} # can be safely removed from {t_key}")[m
[32m+[m[32m                    Config_Change.append(f"Key not found: {tt_key}\n")[m
[32m+[m[32m                    Config_Change.append(f"group-object {tt_key} # can be safely removed from {t_key}\n")[m
 [m
             else:[m
                 print('... there is some problem here')[m
[36m@@ -1988,7 +2014,7 @@[m [mdef Duplicated_Objects(t_device, Config_Change, log_folder):[m
 [m
     Dup_OBJGRP_SVC_List = [][m
     Found_keys = [][m
[31m-    t_key_List = list(OBJ_GRP_SVC_Dic_explode.keys())[m
[32m+[m[32m    t_key_List = list(OBJ_GRP_SVC_Dic_explode)[m
     for n1 in range(0,len(t_key_List)):[m
         if t_key_List[n1] in Found_keys:[m
             continue[m
[36m@@ -2044,7 +2070,7 @@[m [mdef Duplicated_Objects(t_device, Config_Change, log_folder):[m
     netobjusedList = [][m
     Undeclared_NetObj_Used_List = [][m
     for n in Undeclared_NetObj_List:[m
[31m-        if n in Obejct_by_value_Dict.keys():[m
[32m+[m[32m        if n in Obejct_by_value_Dict:[m
             netobjusedList.append('object <b>%s</b> declared as network-object but object network %s exists' %(n,Obejct_by_value_Dict[n]))[m
             Undeclared_NetObj_Used_List.append(n)[m
 [m
[36m@@ -2057,12 +2083,12 @@[m [mdef Duplicated_Objects(t_device, Config_Change, log_folder):[m
     retries = utils_v2.Shelve_Write_Try(tf_name,Undeclared_NetObj_Used_List)[m
 [m
     #Config_Change.append('')[m
[31m-    for t_key in OBJ_GRP_NET_Dic.keys():[m
[32m+[m[32m    for t_key in OBJ_GRP_NET_Dic:[m
         Printed_Header = False[m
         for t_item in OBJ_GRP_NET_Dic[t_key]:[m
             if t_item.startswith(' network-object host '):[m
                 temp = t_item.split()[2][m
[31m-                if temp in Obejct_by_value_Dict.keys():[m
[32m+[m[32m                if temp in Obejct_by_value_Dict:[m
                     if Printed_Header == False:[m
                         Config_Change.append('!\nobject-group network %s' %t_key)[m
                         Printed_Header = True[m
[36m@@ -2071,7 +2097,7 @@[m [mdef Duplicated_Objects(t_device, Config_Change, log_folder):[m
             elif t_item.startswith(' network-object '):[m
                 if len(t_item.replace(' ','.').split('.')) == 10:[m
                     temp = t_item.split()[1] + ' ' + t_item.split()[2][m
[31m-                    if temp in Obejct_by_value_Dict.keys():[m
[32m+[m[32m                    if temp in Obejct_by_value_Dict:[m
                         if Printed_Header == False:[m
                             Config_Change.append('!\nobject-group network %s' %t_key)[m
                             Printed_Header = True[m
[36m@@ -2103,13 +2129,6 @@[m [mdef Duplicated_Objects(t_device, Config_Change, log_folder):[m
 [m
 def ACL_Source_Vs_Routing_Table(t_device, Config_Change, log_folder):[m
 [m
[31m-    from Network_Calc import Sub_Mask_2[m
[31m-    from tabulate import tabulate[m
[31m-    import shelve[m
[31m-    import ipaddress[m
[31m-    import pandas as pd[m
[31m-    import sqlalchemy as db[m
[31m-[m
     hostname___ = t_device.replace('/','___')[m
     Err_folder = log_folder[m
     FW_log_folder = log_folder + '/' + hostname___[m
[36m@@ -2145,43 +2164,30 @@[m [mdef ACL_Source_Vs_Routing_Table(t_device, Config_Change, log_folder):[m
 [m
     Printed_Lines = set()[m
     NoActive_NoRoute_Root_ACL = [][m
[31m-    SiActive_NoRoute_Root_ACL = [][m
[31m-    NoActive_NoRoute_Child_ACL = [][m
[31m-    SiActive_NoRoute_Child_ACL = [][m
[31m-    NoActive_Noroute_Hash_ACL_Dic = {}[m
[32m+[m[32m    #SiActive_NoRoute_Root_ACL = [][m
[32m+[m[32m    #NoActive_NoRoute_Child_ACL = [][m
[32m+[m[32m    #SiActive_NoRoute_Child_ACL = [][m
[32m+[m[32m    #NoActive_Noroute_Hash_ACL_Dic = {}[m
     SiActive_Noroute_Hash_ACL_Dic = {}[m
 [m
     Double_NO_Active_Hash = [][m
     Double_SI_Active_Hash = [][m
     Totally_Wrong_Routing_Active_ACL = [][m
[31m-    Partlly_Wrong_Routing_Active_ACL = [][m
[32m+[m[32m    #Partlly_Wrong_Routing_Active_ACL = [][m
     Partlly_Wrong_Routing_Active_ACL_Dic = {}[m
     Totally_Wrong_Routing_Active_ACL_Counting = [][m
 [m
[31m-    text = ('Check Acl Source Vs Routing Table @ %s' %hostname___)[m
[32m+[m[32m    text = f'Check Acl Source Vs Routing Table @ {hostname___}'[m
     utils_v2.Text_in_Frame (text, Config_Change, Print_also=1)[m
     Config_Change.append('Check if URPF (Unicast Reverse Path Forwarding) is enabled\n')[m
 [m
[32m+[m[32m    Obj_vs_Route_Lookup = {}[m
[32m+[m[32m    Obj_vs_Iface_Lookup = {}[m
     ROUTE_IP_DF = ROUTE_DF.copy()[m
[31m-    for row in ROUTE_IP_DF.itertuples():[m
[31m-        try:[m
[31m-            ROUTE_IP_DF.at[row.Index, 'Network'] = ipaddress.IPv4Network(row.Network)[m
[31m-        except:[m
[31m-            Config_Change.append('ERROR 1106 while converting %s to ipaddress\n' %row.Network)[m
[31m-            print('ERROR 1106 while converting %s to ipaddress\n' %row.Network)[m
[31m-            ROUTE_IP_DF = ROUTE_IP_DF.drop(row.Index)[m
[31m-            row = { 'TimeStamp' : datetime.datetime.now().astimezone(),[m
[31m-                    'Level'     : 'WARNING',[m
[31m-                    'Message'   : (f'Error While Converting "{row.Network}" to ipaddress in {t_device}')}[m
[31m-            with engine.begin() as connection: connection.execute(WTF_Log.insert().values(**row))[m
[31m-            continue[m
[31m-[m
[31m-[m
[31m-    ROUTE_IP_DF["PrefixLength"] = ROUTE_IP_DF["Network"].apply(lambda x: (x).prefixlen)[m
 [m
     ACL_WiderThanRouting = {}[m
[31m-    BINS = 0; LOOP_INDEX = -1; STEPS = 10; ITEMS = len(ACL_List_Dict.keys())[m
[31m-    #for t_key in list(ACL_List_Dict.keys()):[m
[32m+[m[32m    BINS = 0; LOOP_INDEX = -1; STEPS = 10; ITEMS = len(ACL_List_Dict)[m
[32m+[m[32m    #for t_key in list(ACL_List_Dict):[m
     for t_key, acl in ACL_List_Dict.items():[m
         t_Root__Hash = t_key.split()[-1][m
         t_Child_Hash = [][m
[36m@@ -2204,15 +2210,21 @@[m [mdef ACL_Source_Vs_Routing_Table(t_device, Config_Change, log_folder):[m
             continue[m
 [m
         for row in t_ACL_Lines_DF.itertuples():[m
[32m+[m[32m            #print(f'row = {row}')[m
             this_Src_Obj = utils_v2.ASA_ACL_Obj_to_Net(row.Source)[m
             if this_Src_Obj == []: # ipv6 to be done[m
                 continue[m
             for t_this_Src_Obj in this_Src_Obj:[m
[32m+[m[32m##                if '10.10.10.6' in t_this_Src_Obj:[m
[32m+[m[32m##                    print('row')[m
[32m+[m[32m##                else:[m
[32m+[m[32m##                    break[m
[32m+[m[32m                #print(f't_this_Src_Obj = {t_this_Src_Obj}')[m
                 temp = t_this_Src_Obj.split()[m
                 try:[m
                     t_this_Src_Obj = temp[0] + Sub_Mask_2[temp[1]][m
                 except:[m
[31m-                    text_line = ('>>>   ERROR... non conventional subnet mask for "%s"' %t_this_Src_Obj)[m
[32m+[m[32m                    text_line = f'>>>   ERROR... non conventional subnet mask for "{t_this_Src_Obj}"'[m
                     if text_line not in Printed_Lines:[m
                         #print(text_line)[m
                         Config_Change.append(text_line)[m
[36m@@ -2231,32 +2243,27 @@[m [mdef ACL_Source_Vs_Routing_Table(t_device, Config_Change, log_folder):[m
                 #Wider_Object_Found = False[m
                 BEST_ROUTE_IF = ''[m
                 BEST_ROUTE_IP = ''[m
[31m-                BEST_ROUTE_DF = pd.Series([m
[31m-                                    data=['-'] * 5,[m
[31m-                                    index=['HostName', 'Type', 'Network', 'Interface', 'NextHop'],[m
[31m-                                    dtype='object'[m
[31m-                                    )[m
 [m
[31m-                for _, this_route in ROUTE_IP_DF.iterrows():[m
[31m-                    # Check if this_Src_Obj_IP is a subnet of this_route['Network'][m
[31m-                    if this_Src_Obj_IP.subnet_of(this_route['Network']):[m
[31m-                        # Update BEST_ROUTE_IP and BEST_ROUTE_DF if necessary[m
[31m-                        if BEST_ROUTE_IP == '':[m
[31m-                            BEST_ROUTE_IP = this_route['Network'][m
[31m-                            BEST_ROUTE_DF = this_route[m
[31m-                        elif this_route['Network'].subnet_of(BEST_ROUTE_IP):  # Swap routes[m
[32m+[m[32m                if this_Src_Obj_IP in Obj_vs_Route_Lookup:[m
[32m+[m[32m                    BEST_ROUTE_IP = Obj_vs_Route_Lookup[this_Src_Obj_IP][m
[32m+[m[32m                    BEST_ROUTE_IF = Obj_vs_Iface_Lookup[this_Src_Obj_IP][m
[32m+[m[32m                else:[m
[32m+[m[32m                    for _, this_route in ROUTE_IP_DF.iterrows():[m
[32m+[m[32m                        # Check if this_Src_Obj_IP is a subnet of this_route['Network'][m
[32m+[m[32m                        if this_Src_Obj_IP.subnet_of(this_route['Network']):[m
                             BEST_ROUTE_IP = this_route['Network'][m
[31m-                            BEST_ROUTE_DF = this_route[m
[31m-                        if this_route['Interface'] == t_ACL_If_Name:[m
[31m-                            # Update BEST_ROUTE_IF if necessary[m
[31m-                            if BEST_ROUTE_IF == '':[m
[31m-                                BEST_ROUTE_IF = this_route['Network'][m
[31m-                            elif this_route['Network'].subnet_of(BEST_ROUTE_IF):  # Swap routes[m
[31m-                                BEST_ROUTE_IF = this_route['Network'][m
[32m+[m[32m                            Obj_vs_Route_Lookup[this_Src_Obj_IP] = BEST_ROUTE_IP[m
[32m+[m[32m                            BEST_ROUTE_IF = this_route['Interface'][m
[32m+[m[32m                            Obj_vs_Iface_Lookup[this_Src_Obj_IP] = BEST_ROUTE_IF[m
[32m+[m[32m                            break[m
 [m
                 WIDE_ROUTE_List = [][m
[32m+[m[32m                if isinstance(BEST_ROUTE_IP, (ipaddress.IPv4Network, ipaddress.IPv6Network)):[m
[32m+[m[32m                    best_prefixlen = BEST_ROUTE_IP.prefixlen[m
[32m+[m[32m                else:[m
[32m+[m[32m                    best_prefixlen = -1[m
                 Bool_check = ('Interface == "%s"') %(t_ACL_If_Name)[m
[31m-                if BEST_ROUTE_IF == '': #no best route found[m
[32m+[m[32m                if (best_prefixlen == 0) or (BEST_ROUTE_IF == ''): #no best route found[m
                     if t_this_Src_Obj != '0.0.0.0/0':[m
                         t_ROUTE_IP_DF = ROUTE_IP_DF.loc[ROUTE_IP_DF['Interface'] == t_ACL_If_Name][m
                         ROUTE_IP_DF_Hi = t_ROUTE_IP_DF.loc[t_ROUTE_IP_DF['PrefixLength'] > this_Src_Obj_IP.prefixlen][m
[36m@@ -2266,14 +2273,14 @@[m [mdef ACL_Source_Vs_Routing_Table(t_device, Config_Change, log_folder):[m
                                 if this_route.subnet_of(this_Src_Obj_IP):[m
                                     WIDE_ROUTE_List.append(str(this_route))[m
                             except:[m
[31m-                                print('Error at line 1702:')[m
[32m+[m[32m                                print('Error at line 2333:')[m
                                 print('this_route = %s' %this_route)[m
                                 print('this_Src_Obj_IP = %s' %this_Src_Obj_IP)[m
                                 exit()[m
 [m
                 if WIDE_ROUTE_List != []:[m
                     ACL_WiderThanRouting[t_key] = [][m
[31m-                    text_line = (' - Surce_Object is <b>%s</b>, interface is <b>%s</b>, routing is:' %(t_this_Src_Obj, t_ACL_If_Name))[m
[32m+[m[32m                    text_line = f' - Surce_Object is <b>{t_this_Src_Obj}</b>, interface is <b>{t_ACL_If_Name}</b>, routing is:'[m
                     ACL_WiderThanRouting[t_key].append(text_line)[m
                     temp = [][m
                     for n in WIDE_ROUTE_List:[m
[36m@@ -2281,22 +2288,16 @@[m [mdef ACL_Source_Vs_Routing_Table(t_device, Config_Change, log_folder):[m
                     ACL_WiderThanRouting[t_key].append(temp)[m
 [m
                 if t_this_Src_Obj != '0.0.0.0/0':[m
[31m-                    if ((BEST_ROUTE_IF=='') and (WIDE_ROUTE_List==[])) or ((BEST_ROUTE_DF['Interface']!='-') & (BEST_ROUTE_DF['Interface']!=t_ACL_If_Name)):[m
[32m+[m[32m                    #if ((BEST_ROUTE_IF=='') and (WIDE_ROUTE_List==[])) or ((BEST_ROUTE_DF.Interface!='-') and (BEST_ROUTE_DF.Interface!=t_ACL_If_Name)):[m
[32m+[m[32m                    if ((BEST_ROUTE_IF!=t_ACL_If_Name) and (WIDE_ROUTE_List==[])) or ((BEST_ROUTE_IF!='-') and (BEST_ROUTE_IF!=t_ACL_If_Name)):[m
                         temp1 = [row.ACL, row.Name, row.Line, row.Type, row.Action, row.Service, row.Source, row.S_Port, row.Dest, row.D_Port, row.Rest, row.Inactive, row.Hitcnt, row.Hash][m
                         if 'inactive' in row.Inactive:[m
[31m-                            if t_key not in NoActive_NoRoute_Root_ACL:[m
[31m-                                NoActive_NoRoute_Root_ACL.append(t_key)[m
[31m-                            NoActive_NoRoute_Child_ACL.append(re_space.sub(' ',' '.join(temp1)))[m
                             if row.Hash not in t_Child_Hash:[m
                                 t_Child_Hash.append(row.Hash)[m
                             else:[m
                                 if 'range' not in row.Source:[m
                                     Double_NO_Active_Hash.append(re_space.sub(' ',' '.join(temp1)))[m
[31m-                            NoActive_Noroute_Hash_ACL_Dic[t_Root__Hash] = t_Child_Hash[m
                         else:[m
[31m-                            if t_key not in SiActive_NoRoute_Root_ACL:[m
[31m-                                SiActive_NoRoute_Root_ACL.append(t_key)[m
[31m-                            SiActive_NoRoute_Child_ACL.append(re_space.sub(' ',' '.join(temp1)))[m
                             if row.Hash not in t_Child_Hash:[m
                                 t_Child_Hash.append(row.Hash)[m
                             else:[m
[36m@@ -2326,7 +2327,7 @@[m [mdef ACL_Source_Vs_Routing_Table(t_device, Config_Change, log_folder):[m
 [m
     re_space = re.compile(r'  +') # two or more spaces[m
     ACL_Lines_DF = utils_v2.ASA_ACL_to_DF(ACL_List_Dict.keys())[m
[31m-    for t_key in list(SiActive_Noroute_Hash_ACL_Dic.keys()):[m
[32m+[m[32m    for t_key in list(SiActive_Noroute_Hash_ACL_Dic):[m
         Bool_check = ('Hash == "%s"') %(t_key)[m
         for row in ACL_Lines_DF.query(Bool_check).itertuples(): # one item[m
             if row.Inactive == 'inactive':[m
[36m@@ -2413,7 +2414,7 @@[m [mdef ACL_Source_Vs_Routing_Table(t_device, Config_Change, log_folder):[m
     t_html_file = [][m
     if len(ACL_WiderThanRouting) > 0:[m
         t_html_file.append('<ul>')[m
[31m-        for t_key in ACL_WiderThanRouting.keys():[m
[32m+[m[32m        for t_key in ACL_WiderThanRouting:[m
             t_html_file.append('<li> %s<br>' %utils_v2.Color_Line(t_key))[m
             t_html_file.append('%s' %ACL_WiderThanRouting[t_key][0])[m
             t_html_file.append('<p class="text-dark small">')[m
[36m@@ -2455,7 +2456,7 @@[m [mdef ACL_Source_Vs_Routing_Table(t_device, Config_Change, log_folder):[m
     Show_ACL_Lines_DF = utils_v2.Shelve_Read_Try(tf_name,'')[m
     Processed_line = [][m
     Processed_ACL_line = [][m
[31m-    for t_key in Partlly_Wrong_Routing_Active_ACL_Dic.keys():[m
[32m+[m[32m    for t_key in Partlly_Wrong_Routing_Active_ACL_Dic:[m
         Root_ACL_df  = utils_v2.ASA_ACL_to_DF_light([t_key])[m
         check_point = Root_ACL_df['Name'][0] + ' ' + Root_ACL_df['Source'][0][m
         if check_point not in Processed_ACL_line:[m
[36m@@ -2478,12 +2479,11 @@[m [mdef ACL_Source_Vs_Routing_Table(t_device, Config_Change, log_folder):[m
                     PartlyWrongRouteACL[t_key].append('Object "%s" not used as destination' %t_OBJ_Src)[m
                     #print('Object can be removed...')[m
 [m
[31m-                    if  (t_OBJ_Src.split()[0]) == 'object':[m
[32m+[m[32m                    if (t_OBJ_Src.split()[0]) == 'object':[m
                         this_src_OBJ = t_OBJ_Src.split()[1][m
                         print(".. object... WTF???? Dovrebbe essere un totally wrong routing.... ")[m
                         print('t_OBJ_Src = %s' %t_OBJ_Src)[m
                         print('t_key = %s' %t_key)[m
[31m-                        print('row = %s' %row)[m
                     elif(t_OBJ_Src.split()[0]) == 'object-group':[m
                         this_src_OBJ = t_OBJ_Src.split()[1][m
                         PartlyWrongRouteACL[t_key].append('object-group network %s' %this_src_OBJ)[m
[36m@@ -2549,7 +2549,7 @@[m [mdef ACL_Source_Vs_Routing_Table(t_device, Config_Change, log_folder):[m
                     elif(t_OBJ_Src.split()[0]) == 'host':[m
                         this_src_OBJ = t_OBJ_Src.split()[1][m
                         print(".. host... WTF???? should be a totally wrong routing.... ")[m
[31m-                    elif('.' in t_OBJ_Src.split()[0]):[m
[32m+[m[32m                    elif '.' in t_OBJ_Src.split()[0]:[m
                         try:[m
                             t_this_Src_ip = t_OBJ_Src.split()[0] + Sub_Mask_2[t_OBJ_Src.split()[1]][m
                             ipaddress.IPv4Network(t_this_Src_ip, strict=False)[m
[36m@@ -2599,7 +2599,7 @@[m [mdef ACL_Source_Vs_Routing_Table(t_device, Config_Change, log_folder):[m
     t_html_file = [][m
     if len(PartlyWrongRouteACL) > 0:[m
         t_html_file.append('<ul>')[m
[31m-        for t_key in PartlyWrongRouteACL.keys():[m
[32m+[m[32m        for t_key in PartlyWrongRouteACL:[m
             t_html_file.append('<li> %s<br>' %utils_v2.Color_Line(t_key))[m
             t_html_file.append('<p class="text-dark small" style="overflow-x: auto; overflow-y: hidden; white-space: nowrap;">')[m
             for t_line in PartlyWrongRouteACL[t_key]:[m
[36m@@ -2631,14 +2631,6 @@[m [mdef ACL_Source_Vs_Routing_Table(t_device, Config_Change, log_folder):[m
 [m
 def ACL_Dest_Vs_Routing_Table(t_device, Config_Change, log_folder):[m
 [m
[31m-    from Network_Calc import Sub_Mask_2,Sub_Mask_1,IPv4_to_DecList,Is_Dec_Overlapping,Port_Converter[m
[31m-    from tabulate import tabulate[m
[31m-    import shelve[m
[31m-    import ipaddress[m
[31m-    import pandas as pd[m
[31m-    import sqlalchemy as db[m
[31m-    from utils_v2 import File_Save_Try[m
[31m-[m
     hostname___ = t_device.replace('/','___')[m
     Err_folder = log_folder[m
     FW_log_folder = log_folder + '/' + hostname___[m
[36m@@ -2673,23 +2665,10 @@[m [mdef ACL_Dest_Vs_Routing_Table(t_device, Config_Change, log_folder):[m
     Nameif_List = utils_v2.Shelve_Read_Try(tf_name,'')[m
 [m
     Printed_Lines = [][m
[31m-    NoActive_NoRoute_Root_ACL = [][m
[31m-    SiActive_NoRoute_Root_ACL = [][m
[31m-    NoActive_NoRoute_Child_ACL = [][m
[31m-    SiActive_NoRoute_Child_ACL = [][m
[31m-    NoActive_Noroute_Hash_ACL_Dic = {}[m
[31m-    SiActive_Noroute_Hash_ACL_Dic = {}[m
[31m-[m
[31m-    Double_NO_Active_Hash = [][m
[31m-    Double_SI_Active_Hash = [][m
[31m-    Totally_Wrong_Routing_Active_ACL = [][m
[31m-    Partlly_Wrong_Routing_Active_ACL = [][m
[31m-    Partlly_Wrong_Routing_Active_ACL_Dic = {}[m
[31m-[m
     Redundant_Routes = [][m
     Redundant_Routes_Warnign = [][m
 [m
[31m-    text = ('Check Acl Destination Vs Routing Table @ %s' %hostname___)[m
[32m+[m[32m    text = f'Check Acl Destination Vs Routing Table @ {hostname___}'[m
     utils_v2.Text_in_Frame (text, Config_Change, Print_also=1)[m
 [m
     ACL_OUT_IF_COUNTER_dic = {}[m
[36m@@ -2704,31 +2683,52 @@[m [mdef ACL_Dest_Vs_Routing_Table(t_device, Config_Change, log_folder):[m
         ACL_OUT_IF_ACLs_dic[(t_IN_ifName,'Null0')] = [][m
 [m
     # add column "IPv4_Network" to ROUTE_IP_DF[m
[31m-    ROUTE_IP_DF = ROUTE_DF.copy()[m
[32m+[m[32m    #ROUTE_IP_DF = ROUTE_DF.copy()[m
[32m+[m[32m    ROUTE_IP_DF = ROUTE_DF[m
     ROUTE_IP_DF['IPv4_Network'] = ''[m
 [m
     t_N_Total_Routes = ROUTE_IP_DF.shape[0][m
     t_N_Redun_Routes = 0[m
[31m-    for row in ROUTE_IP_DF.itertuples():[m
[32m+[m
[32m+[m[32m    def safe_ipv4network(net):[m
         try:[m
[31m-            ROUTE_IP_DF.at[row.Index, 'IPv4_Network'] = ipaddress.IPv4Network(row.Network)[m
[32m+[m[32m            return ipaddress.IPv4Network(net)[m
         except:[m
             try:[m
[31m-                t_routename = row.Network.split('/')[0][m
[31m-                t_routeip = Name_dic[t_routename] +'/'+ row.Network.split('/')[1][m
[31m-                ROUTE_IP_DF.at[row.Index, 'IPv4_Network'] = ipaddress.IPv4Network(t_routeip)[m
[32m+[m[32m                t_ip_name, t_sm = net.split('/')[m
[32m+[m[32m                t_ip = Name_dic.get(t_ip_name)[m
[32m+[m[32m                if t_ip:[m
[32m+[m[32m                    return ipaddress.IPv4Network(f"{t_ip}/{t_sm}", strict=False)[m
             except:[m
[31m-                Config_Change.append('ERROR 2600 while converting %s to ipaddress\n' %row.Network)[m
[31m-                print('ERROR 2600 while converting %s to ipaddress\n' %row.Network)[m
[31m-                ROUTE_IP_DF = ROUTE_IP_DF.drop(row.Index)[m
[31m-                continue[m
[32m+[m[32m                return None[m
[32m+[m
[32m+[m[32m    ROUTE_IP_DF["IPv4_Network"] = ROUTE_IP_DF["Network"].apply(safe_ipv4network)[m
[32m+[m[32m    ROUTE_IP_DF["IPv4_Network"][m
[32m+[m[32m    bad_rows = ROUTE_IP_DF[ROUTE_IP_DF["IPv4_Network"].isna()][m
[32m+[m
[32m+[m[32m    if not bad_rows.empty:[m
[32m+[m[32m        for _, row in bad_rows.iterrows():[m
[32m+[m[32m            msg = f'ERROR 2794 while converting {row.IPv4_Network} to ipaddress in {t_device}\n'[m
[32m+[m[32m            Config_Change.append(msg)[m
[32m+[m[32m            print(msg)[m
[32m+[m
[32m+[m[32m            log_entry = {[m
[32m+[m[32m                'TimeStamp': datetime.datetime.now().astimezone(),[m
[32m+[m[32m                'Level': 'WARNING',[m
[32m+[m[32m                'Message': msg[m
[32m+[m[32m            }[m
[32m+[m[32m            with engine.begin() as connection:[m
[32m+[m[32m                connection.execute(WTF_Log.insert().values(**log_entry))[m
[32m+[m
[32m+[m[32m        ROUTE_IP_DF = ROUTE_IP_DF.drop(bad_rows.index)[m
[32m+[m
     ROUTE_IP_DF_copy = ROUTE_IP_DF.copy()[m
 [m
     Routing_Space_IN = {}[m
     for t_IN_ifName in list(ROUTE_IP_DF.Interface.unique()):[m
         Routing_Space_IN[t_IN_ifName] = 0[m
     for t_IN_ifName in Nameif_List:[m
[31m-        if t_IN_ifName not in Routing_Space_IN.keys():[m
[32m+[m[32m        if t_IN_ifName not in Routing_Space_IN:[m
             Routing_Space_IN[t_IN_ifName] = 0[m
     Routing_Space_IN['Null0'] = 0[m
     Routing_Space_OUT = Routing_Space_IN.copy()[m
[36m@@ -2746,29 +2746,29 @@[m [mdef ACL_Dest_Vs_Routing_Table(t_device, Config_Change, log_folder):[m
                 continue[m
             Interface2 = row2.Interface[m
             if row1.IPv4_Network.subnet_of(row2.IPv4_Network):[m
[31m-                if row1.Interface != row2.Interface:[m
[31m-                    Routing_Space_IN[row2.Interface] -= row1.IPv4_Network.num_addresses[m
[32m+[m[32m                if Interface1 != Interface2:[m
[32m+[m[32m                    Routing_Space_IN[Interface2] -= row1.IPv4_Network.num_addresses[m
             if row2.Network == '0.0.0.0/0':[m
                 continue[m
             if (row1.IPv4_Network).subnet_of(row2.IPv4_Network):[m
                 if BEST_ROUTE == []:[m
[31m-                    BEST_ROUTE = [row2.IPv4_Network, row2.Interface, row2.NextHop][m
[32m+[m[32m                    BEST_ROUTE = [row2.IPv4_Network, Interface2, row2.NextHop][m
                 elif row2.IPv4_Network.subnet_of(BEST_ROUTE[0]): # swap routes[m
                     if row1.NextHop == row2.NextHop:[m
[31m-                        BEST_ROUTE = [row2.IPv4_Network, row2.Interface, row2.NextHop][m
[32m+[m[32m                        BEST_ROUTE = [row2.IPv4_Network, Interface2, row2.NextHop][m
                     else:[m
                         Redundant_Routes_Warnign.append('\n')[m
[31m-                        Redundant_Routes_Warnign.append('route %s %s %s\n' %(row2.Interface, row2.IPv4_Network, row2.NextHop))[m
[31m-                        Redundant_Routes_Warnign.append('route %s %s %s\n' %(row1.Interface, row1.IPv4_Network, row1.NextHop))[m
[32m+[m[32m                        Redundant_Routes_Warnign.append('route %s %s %s\n' %(Interface2, row2.IPv4_Network, row2.NextHop))[m
[32m+[m[32m                        Redundant_Routes_Warnign.append('route %s %s %s\n' %(Interface1, row1.IPv4_Network, row1.NextHop))[m
 [m
         if BEST_ROUTE != []:[m
             if Interface1 == BEST_ROUTE[1]:[m
                 if row1.Type == 'C':[m
                     #print('CONNECTED!!!')[m
                     Redundant_Routes.append('\n CONNECTED!!!')[m
[31m-                    Redundant_Routes.append('! %s @ %s ==> %s' %(row1.IPv4_Network, row1.Interface, BEST_ROUTE[0]))[m
[32m+[m[32m                    Redundant_Routes.append('! %s @ %s ==> %s' %(row1.IPv4_Network, Interface1, BEST_ROUTE[0]))[m
                 else:[m
[31m-                    Redundant_Routes.append('\n! %s @ %s ==> %s' %(row1.IPv4_Network, row1.Interface, BEST_ROUTE[0]))[m
[32m+[m[32m                    Redundant_Routes.append('\n! %s @ %s ==> %s' %(row1.IPv4_Network, Interface1, BEST_ROUTE[0]))[m
                     Redundant_Routes.append('no route %s %s %s %s ' %((row1.Interface), str(row1.IPv4_Network.network_address), str(row1.IPv4_Network.netmask), row1.NextHop))[m
                 ROUTE_IP_DF = ROUTE_IP_DF.drop(row1.Index)[m
                 t_N_Redun_Routes += 1[m
[36m@@ -2793,9 +2793,9 @@[m [mdef ACL_Dest_Vs_Routing_Table(t_device, Config_Change, log_folder):[m
     Prc_N_Redun_Routes = round(100*t_N_Redun_Routes/t_N_Total_Routes,1) if not (t_N_Total_Routes==0) else 0[m
     print ('Prc_N_Redun_Routes = %s' %Prc_N_Redun_Routes)[m
 [m
[31m-    for t_key1 in Routing_Space_IN.keys():[m
[32m+[m[32m    for t_key1 in Routing_Space_IN:[m
         sum_delta = 0[m
[31m-        for t_key2 in Routing_Space_IN.keys():[m
[32m+[m[32m        for t_key2 in Routing_Space_IN:[m
             if t_key1 != t_key2:[m
                 sum_delta += Routing_Space_IN[t_key2][m
         Routing_Space_OUT[t_key1] = Routing_Space_IN[t_key1]*sum_delta[m
[36m@@ -2804,7 +2804,7 @@[m [mdef ACL_Dest_Vs_Routing_Table(t_device, Config_Change, log_folder):[m
     t_html_file = ['<ul>'][m
     Founded_Routes = {}[m
     acl_too_open = [][m
[31m-    BINS = 0; LOOP_INDEX = -1; STEPS = 10; ITEMS = len(ACL_List_Dict.keys())[m
[32m+[m[32m    BINS = 0; LOOP_INDEX = -1; STEPS = 10; ITEMS = len(ACL_List_Dict)[m
     ACL_Space_ICMP_Detail = {}[m
     ACL_Space_TCP__Detail = {}[m
     ACL_Space_UDP__Detail = {}[m
[36m@@ -2904,7 +2904,7 @@[m [mdef ACL_Dest_Vs_Routing_Table(t_device, Config_Change, log_folder):[m
                 ACL_Space_TCP__Detail[t_key] += SRC*DST*N_of_Ports[m
                 ACL_Space_IP___Detail[t_key] += SRC*DST*N_of_Ports*2[m
 [m
[31m-            if this_Dst_Obj[0] in list(Founded_Routes.keys()):[m
[32m+[m[32m            if this_Dst_Obj[0] in list(Founded_Routes):[m
                 if this_Dst_Obj[0] != '0.0.0.0 0.0.0.0':[m
                     Out_Interface = Founded_Routes[this_Dst_Obj[0]][m
                     ACL_OUT_IF_COUNTER_dic[(t_If_Name,Out_Interface)] += 1[m
[36m@@ -2916,7 +2916,7 @@[m [mdef ACL_Dest_Vs_Routing_Table(t_device, Config_Change, log_folder):[m
                 try:[m
                     t_this_Dst_Obj = temp[0] + Sub_Mask_2[temp[1]][m
                 except:[m
[31m-                    text_line = ('>>>   ERROR... non conventional subnet mask for "%s"' %t_this_Dst_Obj)[m
[32m+[m[32m                    text_line = f'>>>   ERROR... non conventional subnet mask for "{t_this_Dst_Obj}"'[m
                     if text_line not in Printed_Lines:[m
                         Config_Change.append(text_line)[m
                         Printed_Lines.append(text_line)[m
[36m@@ -2949,7 +2949,7 @@[m [mdef ACL_Dest_Vs_Routing_Table(t_device, Config_Change, log_folder):[m
                             continue[m
                         ACL_OUT_IF_COUNTER_dic[(t_If_Name,Out_Interface)] += 1[m
                         ACL_OUT_IF_ACLs_dic[(t_If_Name,Out_Interface)].append(ACL_text)[m
[31m-                        if this_Dst_Obj[0] not in list(Founded_Routes.keys()):[m
[32m+[m[32m                        if this_Dst_Obj[0] not in list(Founded_Routes):[m
                             Founded_Routes[this_Dst_Obj[0]] = Out_Interface[m
 [m
                         ROUTE_IP_DF_bis = ROUTE_IP_DF_copy.copy()[m
[36m@@ -2970,13 +2970,13 @@[m [mdef ACL_Dest_Vs_Routing_Table(t_device, Config_Change, log_folder):[m
                         ACL_OUT_IF_ACLs_dic[(t_If_Name,t_OUT_ifName)].append(ACL_text)[m
 [m
                 if WIDE_ROUTE_List != []:[m
[31m-                    text_line = ('<li> %s' %t_key)[m
[32m+[m[32m                    text_line = f'<li> {t_key}'[m
                     t_html_file.append(text_line)[m
                     t_this_Dst_Obj = this_Dst_Obj[0].split()[m
                     try:[m
[31m-                        text_line = (' - Dest_Object is "%s%s", interface IN is "%s"\n' %(t_this_Dst_Obj[0], Sub_Mask_2[t_this_Dst_Obj[1]], t_If_Name))[m
[32m+[m[32m                        text_line = f' - Dest_Object is "{t_this_Dst_Obj[0]}{Sub_Mask_2[t_this_Dst_Obj[1]]}", interface IN is "{t_If_Name}"\n'[m
                     except:[m
[31m-                        text_line = (' - Dest_Object is "%s", interface IN is "%s"\n' %(this_Dst_Obj[0], t_If_Name))[m
[32m+[m[32m                        text_line = f' - Dest_Object is "{this_Dst_Obj[0]}", interface IN is "{t_If_Name}"\n'[m
                     BEST_ROUTE = ''[m
                     OUT_IF = ''[m
                     for row_1 in ROUTE_IP_DF_copy.itertuples():[m
[36m@@ -2993,7 +2993,7 @@[m [mdef ACL_Dest_Vs_Routing_Table(t_device, Config_Change, log_folder):[m
                     t_html_file.append(text_line)[m
                     t_html_file.append('<p class="text-dark small">')[m
                     for n in WIDE_ROUTE_List:[m
[31m-                        temp = (f"{n[0]:<20} {n[1]:<5}")[m
[32m+[m[32m                        temp = f"{n[0]:<20} {n[1]:<5}"[m
                         t_html_file.append(temp.replace(' ','&nbsp;'))[m
                     t_html_file.append('</p></li>')[m
 [m
[36m@@ -3104,7 +3104,7 @@[m [mdef ACL_Dest_Vs_Routing_Table(t_device, Config_Change, log_folder):[m
         DB_Available = False[m
 [m
     if DB_Available:[m
[31m-        for t_key in ACL_Space_ICMP.keys():[m
[32m+[m[32m        for t_key in ACL_Space_ICMP:[m
             if Routing_Space_OUT[t_key] != 0:[m
                 if round(100*ACL_Space_ICMP[t_key]/Routing_Space_OUT[t_key],2) > 100:[m
                     ACL_Space_ICMP_Percent = 100[m
[36m@@ -3158,10 +3158,10 @@[m [mdef ACL_Dest_Vs_Routing_Table(t_device, Config_Change, log_folder):[m
         print('ERROR in ACL_Dest_Vs_Routing_Table: DB NOT Available!')[m
 [m
     ACL_OUT_IF_COUNTER_list = [][m
[31m-    for t_key in ACL_OUT_IF_COUNTER_dic.keys():[m
[32m+[m[32m    for t_key in ACL_OUT_IF_COUNTER_dic:[m
         if ACL_OUT_IF_COUNTER_dic[t_key] != 0:[m
             ACL_OUT_IF_COUNTER_list.append([t_key[0], t_key[1], ACL_OUT_IF_COUNTER_dic[t_key]])[m
[31m-    ACL_OUT_IF_COUNTER_df = pd.DataFrame(ACL_OUT_IF_COUNTER_list, columns = ['IF_in' , 'IF_Out', 'Count'])[m
[32m+[m[32m    #ACL_OUT_IF_COUNTER_df = pd.DataFrame(ACL_OUT_IF_COUNTER_list, columns = ['IF_in' , 'IF_Out', 'Count'])[m
 [m
     # OUTPUT HTML FILE 'acl_too_open-Watch.html' ------------------------------------------[m
     if not os.path.exists(html_folder):[m
[36m@@ -3236,7 +3236,7 @@[m [mdef ACL_Dest_Vs_Routing_Table(t_device, Config_Change, log_folder):[m
     t_html_file.append('    <select class="form-control form-control-sm">\n')[m
     t_html_file.append('      <option value="">Filter IF_IN</option>\n')[m
     done_if = [][m
[31m-    for t_key in ACL_OUT_IF_ACLs_dic.keys():[m
[32m+[m[32m    for t_key in ACL_OUT_IF_ACLs_dic:[m
         if len(ACL_OUT_IF_ACLs_dic[t_key]) != 0:[m
             if t_key[0] not in done_if:[m
                 t_html_file.append('      <option value="%s">%s</option>\n' %(t_key[0],t_key[0]))[m
[36m@@ -3249,7 +3249,7 @@[m [mdef ACL_Dest_Vs_Routing_Table(t_device, Config_Change, log_folder):[m
     t_html_file.append('    <th><input type="text" class="form-control form-control-sm" placeholder="Filter Hash"></th>\n')[m
     t_html_file.append('  </tr></tfoot>\n')[m
     t_html_file.append('  <tbody>\n')[m
[31m-    for t_key in ACL_OUT_IF_ACLs_dic.keys():[m
[32m+[m[32m    for t_key in ACL_OUT_IF_ACLs_dic:[m
         if len(ACL_OUT_IF_ACLs_dic[t_key]) != 0:[m
             for t_ACL in ACL_OUT_IF_ACLs_dic[t_key]:[m
                 t_html_file.append('  <tr>\n')[m
[36m@@ -3317,11 +3317,11 @@[m [mdef ACL_Dest_Vs_Routing_Table(t_device, Config_Change, log_folder):[m
                 temp = temp + "['"+m[0]+"','"+m[1]+"_',"+str(m[2])+"],\n"[m
             l[n] = temp[m
         elif "_HEIGHT_GOES_HERE_" in l[n]:[m
[31m-            if len(ACL_OUT_IF_COUNTER_dic.keys()) < 600:[m
[31m-                CONST_Height_Scale_Factor = round(600 / len(ACL_OUT_IF_COUNTER_dic.keys()))[m
[31m-                if_number = len(ACL_OUT_IF_COUNTER_dic.keys())*CONST_Height_Scale_Factor[m
[32m+[m[32m            if len(ACL_OUT_IF_COUNTER_dic) < 600:[m
[32m+[m[32m                CONST_Height_Scale_Factor = round(600 / len(ACL_OUT_IF_COUNTER_dic))[m
[32m+[m[32m                if_number = len(ACL_OUT_IF_COUNTER_dic)*CONST_Height_Scale_Factor[m
             else:[m
[31m-                if_number = len(ACL_OUT_IF_COUNTER_dic.keys())[m
[32m+[m[32m                if_number = len(ACL_OUT_IF_COUNTER_dic)[m
             l[n] = '    height: %s\n,' %if_number[m
             #    height: window.innerHeight*2,[m
 [m
[36m@@ -3342,13 +3342,6 @@[m [mdef ACL_Dest_Vs_Routing_Table(t_device, Config_Change, log_folder):[m
 [m
 def F_Active_Capture(t_device, Config_Change, log_folder):[m
 [m
[31m-    import sqlalchemy as db[m
[31m-    import pandas as pd[m
[31m-    from tabulate import tabulate[m
[31m-    import re[m
[31m-    import shelve[m
[31m-    import ipaddress[m
[31m-[m
     t_N_Capture = 0[m
     t_N_Capture_CircBuff = 0[m
     t_N_Capture_Active = 0[m
[36m@@ -3361,6 +3354,7 @@[m [mdef F_Active_Capture(t_device, Config_Change, log_folder):[m
             Active_Capture = db.Table('Active_Capture', db.MetaData(), autoload_with=engine)[m
             My_Devices = db.Table('My_Devices', db.MetaData(), autoload_with=engine)[m
             Global_Settings = db.Table('Global_Settings', db.MetaData(), autoload_with=engine)[m
[32m+[m[32m            WTF_Log = db.Table('WTF_Log', db.MetaData(), autoload_with=engine)[m
     except Exception as e:[m
         print(f"error is: {e}")[m
         print('=================[ Warning ]==================')[m
[36m@@ -3572,9 +3566,6 @@[m [mdef F_Active_Capture(t_device, Config_Change, log_folder):[m
 ##(______)(___/(____)  (____/(____)\___)(____)(__)(__)(_)\_)(____)(____/   (_____)(____/\____) (____)\___) (__) (___/[m
 [m
 def Use_Declared_Objects(t_device, Config_Change, log_folder):[m
[31m-#    from Network_Calc import Sub_Mask_2[m
[31m-    import shelve[m
[31m-#    import ipaddress[m
 [m
     hostname___ = t_device.replace('/','___')[m
     FW_log_folder = log_folder + '/' + hostname___[m
[36m@@ -3633,8 +3624,6 @@[m [mdef Use_Declared_Objects(t_device, Config_Change, log_folder):[m
 ##(____)(_/\_)(__)  (____)(____)\___)(____) (__)   (____/(____)(_)\_) (__)   (____)(__)    (__)(__)(_)\_) (__)   (__)(__)(_)\_) (__)[m
 [m
 def Explicit_Deny_IP_Any_Any(t_device, Config_Change, log_folder):[m
[31m-    from tabulate import tabulate[m
[31m-    import shelve[m
 [m
     hostname___ = t_device.replace('/','___')[m
     FW_log_folder = log_folder + '/' + hostname___[m
[36m@@ -3652,8 +3641,8 @@[m [mdef Explicit_Deny_IP_Any_Any(t_device, Config_Change, log_folder):[m
     temp = Show_ACL_Lines_DF.query(Bool_check)[m
 [m
     # check it only for ACL in "access-group"[m
[31m-    for n in range(0,len(Accessgroup_Dic_by_ACL.keys())):[m
[31m-        t_ACL = list(Accessgroup_Dic_by_ACL.keys())[n][m
[32m+[m[32m    for n in range(0,len(Accessgroup_Dic_by_ACL)):[m
[32m+[m[32m        t_ACL = list(Accessgroup_Dic_by_ACL)[n][m
         if t_ACL not in temp.Name.tolist():[m
             if t_ACL not in Unused_ACL_List:[m
                 Config_Change.append('! --- WARNING ---')[m
[36m@@ -3687,17 +3676,10 @@[m [mdef Explicit_Deny_IP_Any_Any(t_device, Config_Change, log_folder):[m
 ##(____/(____/  (__)  (_____)(_)\_)  (__)(__)\___)(____)[m
 [m
 def DB_For_ACL(t_device, Config_Change, log_folder):[m
[31m-    from tabulate import tabulate[m
[31m-    #from Network_Calc import Sub_Mask_2[m
[31m-    import shelve[m
[31m-    import time[m
[31m-    import re[m
[31m-    import pandas as pd[m
[31m-    import sqlalchemy as db[m
 [m
     DB_Available = True[m
     try:[m
[31m-        engine = db.create_engine("postgresql://%s:%s@%s:%s/%s" % (PostgreSQL_User, PostgreSQL_PW, PostgreSQL_Host, PostgreSQL_Port, db_Name))[m
[32m+[m[32m        engine = db.create_engine(f"postgresql://{PostgreSQL_User}:{PostgreSQL_PW}@{PostgreSQL_Host}:{PostgreSQL_Port}/{db_Name}")[m
         with engine.connect() as connection:[m
             My_Devices         = db.Table('My_Devices',        db.MetaData(), autoload_with=engine)[m
             ACL_GROSS          = db.Table('ACL_GROSS',         db.MetaData(), autoload_with=engine)[m
[36m@@ -3729,9 +3711,9 @@[m [mdef DB_For_ACL(t_device, Config_Change, log_folder):[m
         query = db.select(Global_Settings).where(Global_Settings.c.Name=='Global_Settings')[m
         with engine.connect() as connection:[m
             Global_Settings_df = pd.DataFrame(connection.execute(query).fetchall())[m
[31m-        query = db.select(My_Devices).where(My_Devices.c.HostName=="%s" %hostname___)[m
[32m+[m[32m        query = db.select(ACL_GROSS).where(ACL_GROSS.columns.HostName=="%s" %hostname___)[m
         with engine.connect() as connection:[m
[31m-            Device_to_Check_df = pd.DataFrame(connection.execute(query).fetchall())[m
[32m+[m[32m            ACL_GROSS_db = pd.DataFrame(connection.execute(query).fetchall())[m
     else:[m
         print('@ DB_For_ACL: DB_Available=False')[m
 [m
[36m@@ -3776,36 +3758,33 @@[m [mdef DB_For_ACL(t_device, Config_Change, log_folder):[m
             ACL_Lines_DF = ACL_Lines_DF.drop(row.Index)[m
 [m
     today = datetime.datetime.now().strftime('%Y-%m-%d')[m
[31m-    if DB_Available:[m
[31m-        query = db.select(ACL_GROSS).where(ACL_GROSS.columns.HostName=="%s" %hostname___)[m
[31m-        with engine.connect() as connection:[m
[31m-            ACL_GROSS_db = pd.DataFrame(connection.execute(query).fetchall())[m
[32m+[m
 [m
     if len(ACL_GROSS_db) == 0: # New Device[m
         print('Device not in DB... writing %s lines' %len(ACL_Lines_DF))[m
         Config_Change.append('Device not in DB... writing %s lines' %len(ACL_Lines_DF))[m
[31m-        for row in ACL_Lines_DF.itertuples():[m
[31m-            N_of_ACL_NEW += 1[m
[31m-            New_Vals = dict([m
[31m-                            HostName    =hostname___,[m
[31m-                            First_Seen  =today,[m
[31m-                            Name        =row.Name,[m
[31m-                            Line        =row.Line,[m
[31m-                            Type        =row.Type,[m
[31m-                            Action      =row.Action,[m
[31m-                            Service     =row.Service,[m
[31m-                            Source      =row.Source,[m
[31m-                            S_Port      =row.S_Port,[m
[31m-                            Dest        =row.Dest,[m
[31m-                            D_Port      =row.D_Port,[m
[31m-                            Rest        =row.Rest,[m
[31m-                            Inactive    =row.Inactive,[m
[31m-                            Hitcnt      =row.Hitcnt,[m
[31m-                            Hash        =row.Hash,[m
[31m-                            Delta_HitCnt=0[m
[31m-            )[m
[31m-            insert_stmt = ACL_GROSS.insert().values(**New_Vals)[m
[31m-            with engine.begin() as connection:[m
[32m+[m[32m        with engine.begin() as connection:[m
[32m+[m[32m            for row in ACL_Lines_DF.itertuples():[m
[32m+[m[32m                N_of_ACL_NEW += 1[m
[32m+[m[32m                New_Vals = dict([m
[32m+[m[32m                                HostName    =hostname___,[m
[32m+[m[32m                                First_Seen  =today,[m
[32m+[m[32m                                Name        =row.Name,[m
[32m+[m[32m                                Line        =row.Line,[m
[32m+[m[32m                                Type        =row.Type,[m
[32m+[m[32m                                Action      =row.Action,[m
[32m+[m[32m                                Service     =row.Service,[m
[32m+[m[32m                                Source      =row.Source,[m
[32m+[m[32m                                S_Port      =row.S_Port,[m
[32m+[m[32m                                Dest        =row.Dest,[m
[32m+[m[32m                                D_Port      =row.D_Port,[m
[32m+[m[32m                                Rest        =row.Rest,[m
[32m+[m[32m                                Inactive    =row.Inactive,[m
[32m+[m[32m                                Hitcnt      =row.Hitcnt,[m
[32m+[m[32m                                Hash        =row.Hash,[m
[32m+[m[32m                                Delta_HitCnt=0[m
[32m+[m[32m                )[m
[32m+[m[32m                insert_stmt = ACL_GROSS.insert().values(**New_Vals)[m
                 result = connection.execute(insert_stmt)[m
 [m
         # make empty report files:[m
[36m@@ -3831,189 +3810,224 @@[m [mdef DB_For_ACL(t_device, Config_Change, log_folder):[m
 [m
         N_ACL_Lines = ACL_Lines_DF.shape[0][m
         BINS = 0; LOOP_INDEX = -1; STEPS = 10; ITEMS = N_ACL_Lines[m
[31m-        for row in ACL_Lines_DF.itertuples():[m
[31m-            LOOP_INDEX = LOOP_INDEX + 1[m
[31m-            if LOOP_INDEX > (ITEMS/STEPS)*BINS:[m
[31m-                print ('...%s%%' %int(BINS*100/STEPS)); BINS = BINS + 1[m
[31m-            t_hash = row.Hash[m
[31m-            Bool_check = (('Name=="%s" & Action=="%s" & Service=="%s"& Source=="%s" & Dest=="%s" & D_Port=="%s" & Hash=="%s"') %(row.Name, row.Action, row.Service, row.Source, row.Dest, row.D_Port, row.Hash))[m
[31m-            t_ACL_GROSS_db = (ACL_GROSS_db.query(Bool_check))[m
[31m-[m
[31m-            # there can not be two identical ACL lines[m
[31m-            if len(t_ACL_GROSS_db) > 1:[m
[31m-                Log_Message = (f'@ ACL_GROSS for {hostname} has to be cleaned'); print(Log_Message); Config_Change.append(Log_Message)[m
[31m-                Log_row = {'TimeStamp':datetime.datetime.now().astimezone(), 'Level':'ERROR', 'Message':Log_Message}[m
[31m-                with engine.begin() as connection: connection.execute(WTF_Log.insert().values(**Log_row))[m
[31m-                Log_Message = (f'@ ACL = access-list {row.Name} {row.Action} {row.Service} {row.Source} {row.Dest} {row.D_Port} {row.Hash}'); print(Log_Message); Config_Change.append(Log_Message)[m
[31m-                Log_row = {'TimeStamp':datetime.datetime.now().astimezone(), 'Level':'ERROR', 'Message':Log_Message}[m
[31m-                with engine.begin() as connection: connection.execute(WTF_Log.insert().values(**Log_row))[m
[31m-                exit()[m
[31m-[m
[31m-            if len(t_ACL_GROSS_db) == 0: # ACL LINE is new[m
[31m-                N_of_ACL_NEW += 1[m
[31m-                t_line = 'access-list %s %s %s %s %s %s %s %s %s %s %s %s %s' %(row.Name,row.Line, row.Type, row.Action, row.Service, row.Source, row.S_Port, row.Dest, row.D_Port, row.Rest,row.Inactive, row.Hitcnt, row.Hash)[m
[31m-                t_line = re_space.sub(' ',t_line)[m
[31m-                Config_Change.append(t_line)[m
[31m-                Config_Change.append('ACL LINE is new... writing to DB')[m
[31m-[m
[31m-                New_Vals = dict([m
[31m-                                HostName    =hostname___,[m
[31m-                                First_Seen  =today,[m
[31m-                                Name        =row.Name,[m
[31m-                                Line        =row.Line,[m
[31m-                                Type        =row.Type,[m
[31m-                                Action      =row.Action,[m
[31m-                                Service     =row.Service,[m
[31m-                                Source      =row.Source,[m
[31m-                                S_Port      =row.S_Port,[m
[31m-                                Dest        =row.Dest,[m
[31m-                                D_Port      =row.D_Port,[m
[31m-                                Rest        =row.Rest,[m
[31m-                                Inactive    =row.Inactive,[m
[31m-                                Hitcnt      =row.Hitcnt,[m
[31m-                                Hash        =row.Hash,[m
[31m-                                Delta_HitCnt=0[m
[31m-                )[m
[31m-                insert_stmt = ACL_GROSS.insert().values(**New_Vals)[m
[31m-                with engine.begin() as connection:[m
[32m+[m[32m        with engine.begin() as connection:[m
[32m+[m[32m            #for row in ACL_Lines_DF.itertuples():[m
[32m+[m[32m            for t_iteration, row in enumerate(ACL_Lines_DF.itertuples(), start=1):[m
[32m+[m[32m                LOOP_INDEX = LOOP_INDEX + 1[m
[32m+[m[32m                if LOOP_INDEX > (ITEMS/STEPS)*BINS:[m
[32m+[m[32m                    print ('...%s%%' %int(BINS*100/STEPS)); BINS = BINS + 1[m
[32m+[m[32m                #t_hash = row.Hash[m
[32m+[m[32m                Bool_check = (('Name=="%s" & Action=="%s" & Service=="%s"& Source=="%s" & Dest=="%s" & D_Port=="%s" & Hash=="%s"') %(row.Name, row.Action, row.Service, row.Source, row.Dest, row.D_Port, row.Hash))[m
[32m+[m[32m                t_ACL_GROSS_db = (ACL_GROSS_db.query(Bool_check))[m
[32m+[m
[32m+[m[32m                # there can not be two identical ACL lines[m
[32m+[m[32m                if len(t_ACL_GROSS_db) > 1:[m
[32m+[m[32m                    Log_Message = (f'@ ACL_GROSS for {hostname} has to be cleaned'); print(Log_Message); Config_Change.append(Log_Message)[m
[32m+[m[32m                    Log_row = {'TimeStamp':datetime.datetime.now().astimezone(), 'Level':'ERROR', 'Message':Log_Message}[m
[32m+[m[32m                    connection.execute(WTF_Log.insert().values(**Log_row))[m
[32m+[m[32m                    Log_Message = (f'@ ACL = access-list {row.Name} {row.Action} {row.Service} {row.Source} {row.Dest} {row.D_Port} {row.Hash}'); print(Log_Message); Config_Change.append(Log_Message)[m
[32m+[m[32m                    Log_row = {'TimeStamp':datetime.datetime.now().astimezone(), 'Level':'ERROR', 'Message':Log_Message}[m
[32m+[m[32m                    connection.execute(WTF_Log.insert().values(**Log_row))[m
[32m+[m[32m                    exit()[m
[32m+[m
[32m+[m[32m                if len(t_ACL_GROSS_db) == 0: # ACL LINE is new[m
[32m+[m[32m                    N_of_ACL_NEW += 1[m
[32m+[m[32m                    t_line = 'access-list %s %s %s %s %s %s %s %s %s %s %s %s %s' %(row.Name,row.Line, row.Type, row.Action, row.Service, row.Source, row.S_Port, row.Dest, row.D_Port, row.Rest,row.Inactive, row.Hitcnt, row.Hash)[m
[32m+[m[32m                    t_line = re_space.sub(' ',t_line)[m
[32m+[m[32m                    Config_Change.append(t_line)[m
[32m+[m[32m                    Config_Change.append('ACL LINE is new... writing to DB')[m
[32m+[m
[32m+[m[32m                    New_Vals = dict([m
[32m+[m[32m                                    HostName    =hostname___,[m
[32m+[m[32m                                    First_Seen  =today,[m
[32m+[m[32m                                    Name        =row.Name,[m
[32m+[m[32m                                    Line        =row.Line,[m
[32m+[m[32m                                    Type        =row.Type,[m
[32m+[m[32m                                    Action      =row.Action,[m
[32m+[m[32m                                    Service     =row.Service,[m
[32m+[m[32m                                    Source      =row.Source,[m
[32m+[m[32m                                    S_Port      =row.S_Port,[m
[32m+[m[32m                                    Dest        =row.Dest,[m
[32m+[m[32m                                    D_Port      =row.D_Port,[m
[32m+[m[32m                                    Rest        =row.Rest,[m
[32m+[m[32m                                    Inactive    =row.Inactive,[m
[32m+[m[32m                                    Hitcnt      =row.Hitcnt,[m
[32m+[m[32m                                    Hash        =row.Hash,[m
[32m+[m[32m                                    Delta_HitCnt=0[m
[32m+[m[32m                    )[m
[32m+[m[32m                    insert_stmt = ACL_GROSS.insert().values(**New_Vals)[m
                     result = connection.execute(insert_stmt)[m
[31m-            else:[m
[31m-                # check if Hitcnt incremented[m
[31m-                try:[m
[31m-                    if int(row.Hitcnt) > int(t_ACL_GROSS_db.Hitcnt):[m
[31m-                        pass[m
[31m-                except:[m
[31m-                    print('ERROR Triggered in DB_For_ACL ...int(t_ACL_GROSS_db.Hitcnt)... ----------------------------------------------------------------------------')[m
[31m-                    for n in t_ACL_GROSS_db:[m
[31m-                        print(n)[m
[31m-[m
[31m-                if int(row.Hitcnt) > int(t_ACL_GROSS_db.Hitcnt):[m
[31m-                    if int(row.Hitcnt)-int(t_ACL_GROSS_db.Hitcnt) <= Min_Hitcnt_Threshold:[m
[31m-                        temp_few_hitcnt.append('\n%s Hitcount in %s days' %(int(row.Hitcnt)-int(t_ACL_GROSS_db.Hitcnt), (t_today-t_ACL_GROSS_db.First_Seen.item()).days))[m
[31m-                        t_line = 'access-list %s %s %s %s %s %s %s %s %s %s %s' %(row.Name, row.Type, row.Action, row.Service, row.Source, row.S_Port, row.Dest, row.D_Port, row.Rest, row.Hitcnt, row.Hash)[m
[32m+[m[32m                else:[m
[32m+[m[32m                    # check if Hitcnt incremented[m
[32m+[m[32m                    try:[m
[32m+[m[32m                        if int(row.Hitcnt) > int(t_ACL_GROSS_db.Hitcnt.item()):[m
[32m+[m[32m                            pass[m
[32m+[m[32m                    except:[m
[32m+[m[32m                        print('ERROR Triggered in DB_For_ACL ...int(t_ACL_GROSS_db.Hitcnt)... ----------------------------------------------------------------------------')[m
[32m+[m[32m                        for n in t_ACL_GROSS_db:[m
[32m+[m[32m                            print(n)[m
[32m+[m
[32m+[m[32m                    t_row_HitCnt = int(row.Hitcnt)[m
[32m+[m[32m                    t_ACL_GROSS_db_Hitcnt = int(t_ACL_GROSS_db.Hitcnt.item())[m
[32m+[m
[32m+[m[32m                    if t_row_HitCnt > t_ACL_GROSS_db_Hitcnt:[m
[32m+[m[32m                        if t_row_HitCnt-t_ACL_GROSS_db_Hitcnt <= Min_Hitcnt_Threshold:[m
[32m+[m[32m                            temp_few_hitcnt.append('\n%s Hitcount in %s days' %(t_row_HitCnt-t_ACL_GROSS_db_Hitcnt, (t_today-t_ACL_GROSS_db.First_Seen.item()).days))[m
[32m+[m[32m                            t_line = 'access-list %s %s %s %s %s %s %s %s %s %s %s' %(row.Name, row.Type, row.Action, row.Service, row.Source, row.S_Port, row.Dest, row.D_Port, row.Rest, row.Hitcnt, row.Hash)[m
[32m+[m[32m                            t_line = re_space.sub(' ',t_line)[m
[32m+[m[32m                            temp_few_hitcnt.append(t_line)[m
[32m+[m
[32m+[m[32m                        N_of_ACL_Incremented += 1[m
[32m+[m[32m                        Delta = t_row_HitCnt - t_ACL_GROSS_db_Hitcnt[m
[32m+[m[32m                        Updated_Vals = dict([m
[32m+[m[32m                                            First_Seen  = today,[m
[32m+[m[32m                                            Line        = row.Line,[m
[32m+[m[32m                                            Hitcnt      = row.Hitcnt,[m
[32m+[m[32m                                            Delta_HitCnt= Delta,[m
[32m+[m[32m                                            Inactive    = row.Inactive,[m
[32m+[m[32m                                            Rest        = row.Rest[m
[32m+[m[32m                                            )[m
[32m+[m[32m                        query = db.update(ACL_GROSS).where(db.and_( ACL_GROSS.c.HostName==hostname___,[m
[32m+[m[32m                                                                    ACL_GROSS.c.Name==row.Name,[m
[32m+[m[32m                                                                    ACL_GROSS.c.Action==row.Action,[m
[32m+[m[32m                                                                    ACL_GROSS.c.Service==row.Service,[m
[32m+[m[32m                                                                    ACL_GROSS.c.Source==row.Source,[m
[32m+[m[32m                                                                    ACL_GROSS.c.Dest==row.Dest,[m
[32m+[m[32m                                                                    ACL_GROSS.c.D_Port==row.D_Port,[m
[32m+[m[32m                                                                    ACL_GROSS.c.Hash==row.Hash)).values(**Updated_Vals)[m
[32m+[m[32m                        results = connection.execute(query)[m
[32m+[m
[32m+[m[32m                    # turn inactive[m
[32m+[m[32m                    elif t_row_HitCnt == t_ACL_GROSS_db_Hitcnt:[m
[32m+[m[32m                        #First_Seen = t_ACL_GROSS_db.First_Seen.item()[m
[32m+[m[32m                        t_Days = (t_today-t_ACL_GROSS_db.First_Seen.item()).days[m
[32m+[m[32m                        t_line = 'access-list %s %s %s %s %s %s %s %s %s %s %s (hitcnt=%s) %s' %(row.Name, row.Line, row.Type, row.Action, row.Service, row.Source, row.S_Port, row.Dest, row.D_Port, row.Rest, row.Inactive, row.Hitcnt, row.Hash)[m
                         t_line = re_space.sub(' ',t_line)[m
[31m-                        temp_few_hitcnt.append(t_line)[m
[32m+[m[32m                        t_line_clean = 'access-list %s %s %s %s %s %s %s %s %s inactive' %(row.Name, row.Type, row.Action, row.Service, row.Source, row.S_Port, row.Dest, row.D_Port, row.Rest)[m
[32m+[m[32m                        t_line_clean = re_space.sub(' ',t_line_clean)[m
 [m
[31m-                    N_of_ACL_Incremented += 1[m
[31m-                    Delta = int(row.Hitcnt) - int(t_ACL_GROSS_db.Hitcnt)[m
[31m-                    Updated_Vals = dict([m
[31m-                                        First_Seen  = today,[m
[31m-                                        Line        = row.Line,[m
[31m-                                        Hitcnt      = row.Hitcnt,[m
[31m-                                        Delta_HitCnt= Delta,[m
[31m-                                        Inactive    = row.Inactive,[m
[31m-                                        Rest        = row.Rest[m
[31m-                                        )[m
[31m-                    query = db.update(ACL_GROSS).where(db.and_( ACL_GROSS.c.HostName==hostname___,[m
[31m-                                                                ACL_GROSS.c.Name==row.Name,[m
[31m-                                                                ACL_GROSS.c.Action==row.Action,[m
[31m-                                                                ACL_GROSS.c.Service==row.Service,[m
[31m-                                                                ACL_GROSS.c.Source==row.Source,[m
[31m-                                                                ACL_GROSS.c.Dest==row.Dest,[m
[31m-                                                                ACL_GROSS.c.D_Port==row.D_Port,[m
[31m-                                                                ACL_GROSS.c.Hash==row.Hash)).values(**Updated_Vals)[m
[31m-                    with engine.begin() as connection:[m
[32m+[m[32m                        if 'inactive' in row.Inactive:[m
[32m+[m[32m                            # check if it is the first time we see it as inactive[m
[32m+[m[32m                            # if yes, reset First_Seen[m
[32m+[m[32m                            if 'inactive' not in t_ACL_GROSS_db.Inactive.item(): # --- was not inactive[m
[32m+[m[32m                                Updated_Vals = dict([m
[32m+[m[32m                                                    First_Seen  = today,[m
[32m+[m[32m                                                    Line        = row.Line,[m
[32m+[m[32m                                                    Hitcnt      = row.Hitcnt,[m
[32m+[m[32m                                                    Delta_HitCnt= 0,[m
[32m+[m[32m                                                    Inactive    = row.Inactive,[m
[32m+[m[32m                                                    Rest        = row.Rest[m
[32m+[m[32m                                                    )[m
[32m+[m[32m                                query = db.update(ACL_GROSS).where(db.and_( ACL_GROSS.c.HostName==hostname___,[m
[32m+[m[32m                                                                            ACL_GROSS.c.Name==row.Name,[m
[32m+[m[32m                                                                            ACL_GROSS.c.Action==row.Action,[m
[32m+[m[32m                                                                            ACL_GROSS.c.Service==row.Service,[m
[32m+[m[32m                                                                            ACL_GROSS.c.Source==row.Source,[m
[32m+[m[32m                                                                            ACL_GROSS.c.Dest==row.Dest,[m
[32m+[m[32m                                                                            ACL_GROSS.c.D_Port==row.D_Port,[m
[32m+[m[32m                                                                            ACL_GROSS.c.Hash==row.Hash)).values(**Updated_Vals)[m
[32m+[m[32m                                results = connection.execute(query)[m
[32m+[m[32m                            else:[m
[32m+[m[32m                                # check if to be deleted[m
[32m+[m[32m                                if t_Days >= Max_ACL_Inactive_Age:[m
[32m+[m[32m                                    # --- Max_ACL_Inactive_Age expired => delete it ---[m
[32m+[m[32m                                    # Check line before if is a remark[m
[32m+[m[32m                                    tmp_line = 'access-list %s line %s remark ' %(row.Name, str(int(row.Line.split()[1])-1))[m
[32m+[m[32m                                    for t_ACL_remark_Lines in ACL_remark_Lines:[m
[32m+[m[32m                                        if t_ACL_remark_Lines.startswith(tmp_line):[m
[32m+[m[32m                                            #temp_no_inactive.append(['',t_ACL_remark_Lines])[m
[32m+[m[32m                                            temp_no_inactive.append([t_iteration, '', t_ACL_remark_Lines])[m
[32m+[m[32m                                            #Fix_FList_Inactive.append('no %s' %(t_ACL_remark_Lines))[m
[32m+[m[32m                                            cleaned = re.sub(r'\bline\s+\d+\s*', '', t_ACL_remark_Lines)[m
[32m+[m[32m                                            Fix_FList_Inactive.append([t_iteration, t_Days, f'no {cleaned}'])[m
[32m+[m[32m                                    #temp_no_inactive.append([t_Days, t_line])[m
[32m+[m[32m                                    temp_no_inactive.append([t_iteration, t_Days, t_line])[m
[32m+[m[32m                                    #Fix_FList_Inactive.append('no %s' %(t_line_clean))[m
[32m+[m[32m                                    Fix_FList_Inactive.append([t_iteration, t_Days, f'no {t_line_clean}'])[m
[32m+[m[32m                                    N_temp_no_inactive += 1[m
[32m+[m[32m                                else:[m
[32m+[m[32m                                    # Max_ACL_Inactive_Age not expired => Report it[m
[32m+[m[32m                                    #temp_inactive_below.append([t_Days, t_line])[m
[32m+[m[32m                                    temp_inactive_below.append([t_iteration, t_Days, t_line])[m
[32m+[m[32m                                    N_temp_inactive_below += 1[m
[32m+[m[32m                        else:[m
[32m+[m[32m                            if 'inactive' in t_ACL_GROSS_db.Inactive.item(): # --- was inactive and has been activated[m
[32m+[m[32m                                Updated_Vals = dict([m
[32m+[m[32m                                                    First_Seen  = today,[m
[32m+[m[32m                                                    Line        = row.Line,[m
[32m+[m[32m                                                    Hitcnt      = row.Hitcnt,[m
[32m+[m[32m                                                    Delta_HitCnt= 0,[m
[32m+[m[32m                                                    Inactive    = row.Inactive,[m
[32m+[m[32m                                                    Rest        = row.Rest[m
[32m+[m[32m                                                    )[m
[32m+[m[32m                                query = db.update(ACL_GROSS).where(db.and_( ACL_GROSS.c.HostName==hostname___,[m
[32m+[m[32m                                                                            ACL_GROSS.c.Name==row.Name,[m
[32m+[m[32m                                                                            ACL_GROSS.c.Action==row.Action,[m
[32m+[m[32m                                                                            ACL_GROSS.c.Service==row.Service,[m
[32m+[m[32m                                                                            ACL_GROSS.c.Source==row.Source,[m
[32m+[m[32m                                                                            ACL_GROSS.c.Dest==row.Dest,[m
[32m+[m[32m                                                                            ACL_GROSS.c.D_Port==row.D_Port,[m
[32m+[m[32m                                                                            ACL_GROSS.c.Hash==row.Hash)).values(**Updated_Vals)[m
[32m+[m[32m                                results = connection.execute(query)[m
[32m+[m[32m                            else:[m
[32m+[m[32m                                # check if to make inactive[m
[32m+[m[32m                                if row.Action.lower() == 'deny':[m
[32m+[m[32m                                    continue[m
[32m+[m[32m                                elif t_Days >= Max_ACL_HitCnt0_Age:[m
[32m+[m[32m                                    # Max_ACL_HitCnt0_Age expired => turn it to inactive[m
[32m+[m[32m                                    temp_yo_inactive.append([t_iteration, t_Days, t_line])[m
[32m+[m[32m                                    Fix_FList_DeltaHit0.append([t_iteration, t_Days, t_line_clean])[m
[32m+[m[32m                                    N_temp_yo_inactive += 1[m
[32m+[m[32m                                else:[m
[32m+[m[32m                                    # Max_ACL_HitCnt0_Age not expired => Report it[m
[32m+[m[32m                                    t_line = t_line.replace(' inactive', '')[m
[32m+[m[32m                                    temp_yo_inactive_below.append([t_iteration, t_Days, t_line])[m
[32m+[m[32m                                    N_temp_yo_inactive_below += 1[m
[32m+[m
[32m+[m[32m                        Delta = 0[m
[32m+[m[32m                        Updated_Vals = {[m
[32m+[m[32m                                        'Line'        : row.Line,[m
[32m+[m[32m                                        'Inactive'    : row.Inactive,[m
[32m+[m[32m                                        'Delta_HitCnt': Delta,[m
[32m+[m[32m                                        'Rest'        : row.Rest[m
[32m+[m[32m                                        }[m
[32m+[m[32m                        query = db.update(ACL_GROSS).where(db.and_( ACL_GROSS.c.HostName==hostname___,[m
[32m+[m[32m                                                                    ACL_GROSS.c.Name==row.Name,[m
[32m+[m[32m                                                                    ACL_GROSS.c.Action==row.Action,[m
[32m+[m[32m                                                                    ACL_GROSS.c.Service==row.Service,[m
[32m+[m[32m                                                                    ACL_GROSS.c.Source==row.Source,[m
[32m+[m[32m                                                                    ACL_GROSS.c.Dest==row.Dest,[m
[32m+[m[32m                                                                    ACL_GROSS.c.D_Port==row.D_Port,[m
[32m+[m[32m                                                                    ACL_GROSS.c.Hash==row.Hash)).values(**Updated_Vals)[m
                         results = connection.execute(query)[m
 [m
[31m-                elif int(row.Hitcnt) == int(t_ACL_GROSS_db.Hitcnt):[m
[31m-                    t_Days = (t_today-t_ACL_GROSS_db.First_Seen.item()).days[m
[31m-                    t_line = 'access-list %s %s %s %s %s %s %s %s %s %s %s (hitcnt=%s) %s' %(row.Name, row.Line, row.Type, row.Action, row.Service, row.Source, row.S_Port, row.Dest, row.D_Port, row.Rest, row.Inactive, row.Hitcnt, row.Hash)[m
[31m-                    t_line = re_space.sub(' ',t_line)[m
[31m-                    t_line_clean = 'access-list %s %s %s %s %s %s %s %s %s inactive' %(row.Name, row.Type, row.Action, row.Service, row.Source, row.S_Port, row.Dest, row.D_Port, row.Rest)[m
[31m-                    t_line_clean = re_space.sub(' ',t_line_clean)[m
[31m-[m
[31m-                    if 'inactive' in row.Inactive:[m
[31m-                        # check if to be deleted[m
[31m-                        if t_Days >= Max_ACL_Inactive_Age:[m
[31m-                            # --- Max_ACL_Inactive_Age expired => delete it ---[m
[31m-                            # Check line before if is a remark[m
[31m-                            tmp_line = 'access-list %s line %s remark ' %(row.Name, str(int(row.Line.split()[1])-1))[m
[31m-                            for t_ACL_remark_Lines in ACL_remark_Lines:[m
[31m-                                if t_ACL_remark_Lines.startswith(tmp_line):[m
[31m-                                    temp_no_inactive.append(['',t_ACL_remark_Lines])[m
[31m-                                    Fix_FList_Inactive.append('no %s' %(t_ACL_remark_Lines))[m
[31m-                            temp_no_inactive.append([t_Days, t_line])[m
[31m-                            Fix_FList_Inactive.append('no %s' %(t_line_clean))[m
[31m-                            N_temp_no_inactive += 1[m
[31m-                        else:[m
[31m-                            # Max_ACL_Inactive_Age not expired => Report it[m
[31m-                            #temp_inactive_below.append(['%s' %(t_Days), '%s' %(t_line)])[m
[31m-                            temp_inactive_below.append([t_Days, t_line])[m
[31m-                            N_temp_inactive_below += 1[m
                     else:[m
[31m-                        # check if to make inactive[m
[31m-                        if row.Action.lower() == 'deny':[m
[31m-                            continue[m
[31m-                        elif t_Days >= Max_ACL_HitCnt0_Age:[m
[31m-                            # Max_ACL_HitCnt0_Age expired => turn it to inactive[m
[31m-                            #temp_yo_inactive.append(['%s' %(t_Days), '%s (hitcnt=%s)' %(t_line.replace(' inactive',''), t_ACL_GROSS_db.Hitcnt.item())])[m
[31m-                            temp_yo_inactive.append([t_Days, '%s' %(t_line)])[m
[31m-                            Fix_FList_DeltaHit0.append(t_line_clean)[m
[31m-                            N_temp_yo_inactive += 1[m
[31m-                        else:[m
[31m-                            # Max_ACL_HitCnt0_Age not expired => Report it[m
[31m-                            t_line = t_line.replace(' inactive', '')[m
[31m-                            #temp_yo_inactive_below.append(['%s' %(t_Days), '%s' %(t_line)])[m
[31m-                            temp_yo_inactive_below.append([t_Days, t_line])[m
[31m-                            N_temp_yo_inactive_below += 1[m
[31m-[m
[31m-                    Delta = 0[m
[31m-                    Updated_Vals = {[m
[31m-                                    'Line'        : row.Line,[m
[31m-                                    'Inactive'    : row.Inactive,[m
[31m-                                    'Delta_HitCnt': Delta,[m
[31m-                                    'Rest'        : row.Rest[m
[31m-                                    }[m
[31m-                    query = db.update(ACL_GROSS).where(db.and_( ACL_GROSS.c.HostName==hostname___,[m
[31m-                                                                ACL_GROSS.c.Name==row.Name,[m
[31m-                                                                ACL_GROSS.c.Action==row.Action,[m
[31m-                                                                ACL_GROSS.c.Service==row.Service,[m
[31m-                                                                ACL_GROSS.c.Source==row.Source,[m
[31m-                                                                ACL_GROSS.c.Dest==row.Dest,[m
[31m-                                                                ACL_GROSS.c.D_Port==row.D_Port,[m
[31m-                                                                ACL_GROSS.c.Hash==row.Hash)).values(**Updated_Vals)[m
[31m-                    with engine.begin() as connection:[m
[31m-                        results = connection.execute(query)[m
[31m-                else:[m
[31m-                    # resetted counters, update db[m
[31m-                    N_of_ACL_Resetted += 1[m
[31m-                    t_line = ['access-list',row.Name,row.Line,row.Type,row.Action,row.Service,row.Source,row.S_Port,row.Dest,row.D_Port,row.Rest,row.Inactive,row.Hitcnt,row.Hash][m
[31m-                    t_line = ' '.join(t_line)[m
[31m-                    t_line = re_space.sub(' ',t_line)[m
[31m-                    Config_Change.append(t_line)[m
[31m-                    Config_Change.append('Hitcount resetted for ACL, updating DB...')[m
[31m-                    # update date[m
[31m-                    Updated_Vals = dict([m
[31m-                                        First_Seen  = today,[m
[31m-                                        Line        = row.Line,[m
[31m-                                        Hitcnt      = row.Hitcnt,[m
[31m-                                        Delta_HitCnt= 0,[m
[31m-                                        Inactive    = row.Inactive,[m
[31m-                                        Rest        = row.Rest[m
[31m-                                        )[m
[31m-                    query = db.update(ACL_GROSS).where(db.and_( ACL_GROSS.c.HostName==hostname___,[m
[31m-                                                                ACL_GROSS.c.Name==row.Name,[m
[31m-                                                                ACL_GROSS.c.Action==row.Action,[m
[31m-                                                                ACL_GROSS.c.Service==row.Service,[m
[31m-                                                                ACL_GROSS.c.Source==row.Source,[m
[31m-                                                                ACL_GROSS.c.Dest==row.Dest,[m
[31m-                                                                ACL_GROSS.c.D_Port==row.D_Port,[m
[31m-                                                                ACL_GROSS.c.Hash==row.Hash)).values(**Updated_Vals)[m
[31m-                    with engine.begin() as connection:[m
[32m+[m[32m                        # resetted counters, update db[m
[32m+[m[32m                        N_of_ACL_Resetted += 1[m
[32m+[m[32m                        t_line = ['access-list',row.Name,row.Line,row.Type,row.Action,row.Service,row.Source,row.S_Port,row.Dest,row.D_Port,row.Rest,row.Inactive,row.Hitcnt,row.Hash][m
[32m+[m[32m                        t_line = ' '.join(t_line)[m
[32m+[m[32m                        t_line = re_space.sub(' ',t_line)[m
[32m+[m[32m                        Config_Change.append(t_line)[m
[32m+[m[32m                        Config_Change.append('Hitcount resetted for ACL, updating DB...')[m
[32m+[m[32m                        # update date[m
[32m+[m[32m                        Updated_Vals = dict([m
[32m+[m[32m                                            First_Seen  = today,[m
[32m+[m[32m                                            Line        = row.Line,[m
[32m+[m[32m                                            Hitcnt      = row.Hitcnt,[m
[32m+[m[32m                                            Delta_HitCnt= 0,[m
[32m+[m[32m                                            Inactive    = row.Inactive,[m
[32m+[m[32m                                            Rest        = row.Rest[m
[32m+[m[32m                                            )[m
[32m+[m[32m                        query = db.update(ACL_GROSS).where(db.and_( ACL_GROSS.c.HostName==hostname___,[m
[32m+[m[32m                                                                    ACL_GROSS.c.Name==row.Name,[m
[32m+[m[32m                                                                    ACL_GROSS.c.Action==row.Action,[m
[32m+[m[32m                                                                    ACL_GROSS.c.Service==row.Service,[m
[32m+[m[32m                                                                    ACL_GROSS.c.Source==row.Source,[m
[32m+[m[32m                                                                    ACL_GROSS.c.Dest==row.Dest,[m
[32m+[m[32m                                                                    ACL_GROSS.c.D_Port==row.D_Port,[m
[32m+[m[32m                                                                    ACL_GROSS.c.Hash==row.Hash)).values(**Updated_Vals)[m
                         results = connection.execute(query)[m
 [m
[31m-        N_ACL_Inactive = N_temp_no_inactive + N_temp_inactive_below[m
[31m-        N_active_ACL_Lines = N_ACL_Lines - N_ACL_Inactive[m
[31m-        Watch_FList = [][m
[31m-        Watch_FName   = hostname___ + '-Inactive_ACL-Watch.html'[m
[31m-        Watch_FName_2 = hostname___ + '-Inactive_ACL-Watch_2.html'[m
[31m-        Fix_FName   = FW_log_folder + '/' + hostname___ + '-Inactive_ACL-Fix.html'[m
[31m-[m
[31m-        percent = round(len(temp_no_inactive)/N_ACL_Lines*100,2) if N_ACL_Lines else 0[m
[31m-        t_line = ('--- %s ACL over %s can be removed (%s%%) ---' %(N_temp_no_inactive, N_ACL_Lines, percent))[m
[31m-        temp_no_inactive_DF = pd.DataFrame(temp_no_inactive, columns = ['Days', 'Line'])[m
[31m-        Watch_FList.append(tabulate(temp_no_inactive_DF,temp_no_inactive_DF,tablefmt='psql',showindex=False))[m
[31m-[m
         if not os.path.exists(html_folder):[m
             try:[m
                 os.mkdir(html_folder)[m
[36m@@ -4021,14 +4035,23 @@[m [mdef DB_For_ACL(t_device, Config_Change, log_folder):[m
                 Config_Change.append("Can't create destination directory (%s)!" % (html_folder))[m
                 raise OSError("Can't create destination directory (%s)!" % (html_folder))[m
 [m
[32m+[m[32m        # writing f"{html_folder}/{hostname___}-Inactive_ACL-Watch.html" ---------------------------------[m
[32m+[m[32m        temp_no_inactive_DF = pd.DataFrame(temp_no_inactive, columns = ['#', 'Days', 'Line'])[m
[32m+[m
         t_html_file = [][m
         t_html_file.append('<div class="card-body">\n')[m
[31m-        t_html_file.append('<table class="table-bordered table-condensed table-striped" id="dataTable" width="100%" cellspacing="0" data-page-length="50" >\n')[m
[31m-        my_index = 0[m
[32m+[m[32m        t_html_file.append("""[m
[32m+[m[32m                    <table class="table-bordered table-condensed table-striped"[m
[32m+[m[32m                           id="dataTable1"[m
[32m+[m[32m                           width="100%"[m
[32m+[m[32m                           cellspacing="0"[m
[32m+[m[32m                           data-page-length="100"[m
[32m+[m[32m                           data-order='[[ 0, "asc" ]]'>[m
[32m+[m[32m                    """)[m
         N_Cols = temp_no_inactive_DF.shape[1][m
         t_html_file.append('       <thead><tr>\n')[m
         for t_col_index in range(0,N_Cols):[m
[31m-            t_html_file.append('           <th>%s</th>\n' %temp_no_inactive_DF.columns[t_col_index])[m
[32m+[m[32m            t_html_file.append('           <th class="px-2 text-nowrap">%s</th>\n' %temp_no_inactive_DF.columns[t_col_index])[m
         t_html_file.append('       </tr></thead>\n')[m
         t_html_file.append('       <tbody>\n')[m
         for row in temp_no_inactive_DF.itertuples():[m
[36m@@ -4037,9 +4060,9 @@[m [mdef DB_For_ACL(t_device, Config_Change, log_folder):[m
                 t_line = temp_no_inactive_DF.iloc[row.Index][t_col_index][m
                 if t_col_index == N_Cols-1:[m
                     t_line = utils_v2.Color_Line(t_line)[m
[31m-                    t_html_file.append('           <td>%s</td>\n' %t_line)[m
[32m+[m[32m                    t_html_file.append('           <td class="px-2 text-nowrap">%s</td>\n' %t_line)[m
                 else:[m
[31m-                    t_html_file.append('           <td>%s</td>\n' %t_col_index)[m
[32m+[m[32m                    t_html_file.append('           <td class="px-2 text-nowrap">%s</td>\n' %t_line)[m
             t_html_file.append('       </tr>\n')[m
         t_html_file.append('       </tbody>\n')[m
         t_html_file.append('   </table>\n')[m
[36m@@ -4049,22 +4072,26 @@[m [mdef DB_For_ACL(t_device, Config_Change, log_folder):[m
         log_msg = File_Save_Try2(Watch_FName, t_html_file, t_ErrFileFullName, Config_Change)[m
         if log_msg:[m
             with engine.begin() as connection: connection.execute(WTF_Log.insert().values(**log_msg))[m
[32m+[m[32m        # ----------------------------------------------------------------------------------------------[m
 [m
[31m-        Write_Think_File(Fix_FName, Fix_FList_Inactive)[m
 [m
[31m-        #if len(temp_inactive_below) > 0:[m
[31m-        percent = round(len(temp_inactive_below)/N_ACL_Lines*100,2) if N_ACL_Lines else 0[m
[31m-        t_line = ('--- %s ACL over %s Still aging (%s%%) ---' %(len(temp_inactive_below), N_ACL_Lines, percent))[m
[31m-        temp_inactive_below_DF = pd.DataFrame(temp_inactive_below, columns = ['Days', 'Line'])[m
[32m+[m[32m        # writing f"{html_folder}/{hostname___}-Inactive_ACL-Watch_2.html" ---------------------------------[m
[32m+[m[32m        temp_inactive_below_DF = pd.DataFrame(temp_inactive_below, columns = ['#', 'Days', 'Line'])[m
 [m
         t_html_file = [][m
         t_html_file.append('<div class="card-body">\n')[m
[31m-        t_html_file.append('<table class="table-bordered table-condensed table-striped" id="dataTable" width="100%" cellspacing="0" data-page-length="50" >\n')[m
[31m-        my_index = 0[m
[32m+[m[32m        t_html_file.append("""[m
[32m+[m[32m                    <table class="table-bordered table-condensed table-striped"[m
[32m+[m[32m                           id="dataTable2"[m
[32m+[m[32m                           width="100%"[m
[32m+[m[32m                           cellspacing="0"[m
[32m+[m[32m                           data-page-length="100"[m
[32m+[m[32m                           data-order='[[ 0, "asc" ]]'>[m
[32m+[m[32m                    """)[m
         N_Cols = temp_inactive_below_DF.shape[1][m
         t_html_file.append('       <thead><tr>\n')[m
         for t_col_index in range(0,N_Cols):[m
[31m-            t_html_file.append('           <th>%s</th>\n' %temp_inactive_below_DF.columns[t_col_index])[m
[32m+[m[32m            t_html_file.append('           <th class="px-2 text-nowrap">%s</th>\n' %temp_inactive_below_DF.columns[t_col_index])[m
         t_html_file.append('       </tr></thead>\n')[m
         t_html_file.append('       <tbody>\n')[m
         for row in temp_inactive_below_DF.itertuples():[m
[36m@@ -4073,29 +4100,59 @@[m [mdef DB_For_ACL(t_device, Config_Change, log_folder):[m
                 t_line = temp_inactive_below_DF.iloc[row.Index][t_col_index][m
                 if t_col_index == N_Cols-1:[m
                     t_line = utils_v2.Color_Line(t_line)[m
[31m-                    t_html_file.append('           <td>%s</td>\n' %t_line)[m
[32m+[m[32m                    t_html_file.append('           <td class="px-2 text-nowrap">%s</td>\n' %t_line)[m
                 else:[m
[31m-                    t_html_file.append('           <td>%s</td>\n' %t_line)[m
[32m+[m[32m                    t_html_file.append('           <td class="px-2 text-nowrap">%s</td>\n' %t_line)[m
             t_html_file.append('       </tr>\n')[m
         t_html_file.append('       </tbody>\n')[m
         t_html_file.append('   </table>\n')[m
         t_html_file.append('</div>\n')[m
 [m
[31m-[m
         Watch_FName_2 = f"{html_folder}/{hostname___}-Inactive_ACL-Watch_2.html"[m
         log_msg = File_Save_Try2(Watch_FName_2, t_html_file, t_ErrFileFullName, Config_Change)[m
         if log_msg:[m
             with engine.begin() as connection: connection.execute(WTF_Log.insert().values(**log_msg))[m
[32m+[m[32m        # ----------------------------------------------------------------------------------------------[m
 [m
[31m-        Watch_FList = [][m
[31m-        Watch_FName   = hostname___ + '-Deltahitcnt0_ACL-Watch.html'[m
[31m-        Watch_FName_2 = hostname___ + '-Deltahitcnt0_ACL-Watch_2.html'[m
[31m-        Fix_FName   = FW_log_folder + '/' + hostname___ + '-Deltahitcnt0_ACL-Fix.html'[m
 [m
[31m-        #if len(temp_yo_inactive) > 0:[m
[31m-        percent = round(len(temp_yo_inactive)/N_active_ACL_Lines*100,2) if N_active_ACL_Lines else 0[m
[31m-        temp_yo_inactive_DF = pd.DataFrame(temp_yo_inactive, columns = ['Days', 'Line'])[m
[31m-        Watch_FList.append(tabulate(temp_yo_inactive_DF,temp_yo_inactive_DF,tablefmt='psql',showindex=False))[m
[32m+[m[32m        # writing f"{html_folder}/{hostname___}-Inactive_ACL-Fix.html" ---------------------------------[m
[32m+[m[32m        Fix_FList_Inactive_DF = pd.DataFrame(Fix_FList_Inactive, columns = ['#', 'Days', 'Line'])[m
[32m+[m
[32m+[m[32m        t_html_file = [][m
[32m+[m[32m        t_html_file.append('<div class="card-body">\n')[m
[32m+[m[32m        t_html_file.append("""[m
[32m+[m[32m                    <table class="table-bordered table-condensed table-striped"[m
[32m+[m[32m                           id="dataTable3"[m
[32m+[m[32m                           width="100%"[m
[32m+[m[32m                           cellspacing="0"[m
[32m+[m[32m                           data-page-length="100"[m
[32m+[m[32m                           data-order='[[ 0, "asc" ]]'>[m
[32m+[m[32m                    """)[m
[32m+[m[32m        N_Cols = Fix_FList_Inactive_DF.shape[1][m
[32m+[m[32m        t_html_file.append('       <thead><tr>\n')[m
[32m+[m[32m        for t_col_index in range(0,N_Cols):[m
[32m+[m[32m            t_html_file.append('           <th class="px-2 text-nowrap">%s</th>\n' %Fix_FList_Inactive_DF.columns[t_col_index])[m
[32m+[m[32m        t_html_file.append('       </tr></thead>\n')[m
[32m+[m[32m        t_html_file.append('       <tbody>\n')[m
[32m+[m[32m        for row in Fix_FList_Inactive_DF.itertuples():[m
[32m+[m[32m            t_html_file.append('       <tr>\n')[m
[32m+[m[32m            for t_col_index in range(0,N_Cols):[m
[32m+[m[32m                t_line = Fix_FList_Inactive_DF.iloc[row.Index][t_col_index][m
[32m+[m[32m                if t_col_index == N_Cols-1:[m
[32m+[m[32m                    t_line = utils_v2.Color_Line(t_line)[m
[32m+[m[32m                    t_html_file.append('           <td class="px-2 text-nowrap">%s</td>\n' %t_line)[m
[32m+[m[32m                else:[m
[32m+[m[32m                    t_html_file.append('           <td class="px-2 text-nowrap">%s</td>\n' %t_line)[m
[32m+[m[32m            t_html_file.append('       </tr>\n')[m
[32m+[m[32m        t_html_file.append('       </tbody>\n')[m
[32m+[m[32m        t_html_file.append('   </table>\n')[m
[32m+[m[32m        t_html_file.append('</div>\n')[m
[32m+[m
[32m+[m[32m        Watch_FName_2 = f"{html_folder}/{hostname___}-Inactive_ACL-Fix.html"[m
[32m+[m[32m        log_msg = File_Save_Try2(Watch_FName_2, t_html_file, t_ErrFileFullName, Config_Change)[m
[32m+[m[32m        if log_msg:[m
[32m+[m[32m            with engine.begin() as connection: connection.execute(WTF_Log.insert().values(**log_msg))[m
[32m+[m[32m        # ----------------------------------------------------------------------------------------------[m
 [m
         if not os.path.exists(html_folder):[m
             try:[m
[36m@@ -4104,14 +4161,23 @@[m [mdef DB_For_ACL(t_device, Config_Change, log_folder):[m
                 Config_Change.append("Can't create destination directory (%s)!" % (html_folder))[m
                 raise OSError("Can't create destination directory (%s)!" % (html_folder))[m
 [m
[32m+[m[32m        # writing f"{html_folder}/{hostname___}-Deltahitcnt0_ACL-Watch.html" ---------------------------------[m
[32m+[m[32m        temp_yo_inactive_DF = pd.DataFrame(temp_yo_inactive, columns = ['#', 'Days', 'Line'])[m
[32m+[m
         t_html_file = [][m
         t_html_file.append('<div class="card-body">\n')[m
[31m-        t_html_file.append('<table class="table-bordered table-condensed table-striped" id="dataTable" width="100%" cellspacing="0" data-page-length="50" >\n')[m
[31m-        my_index = 0[m
[32m+[m[32m        t_html_file.append("""[m
[32m+[m[32m                            <table class="table-bordered table-condensed table-striped"[m
[32m+[m[32m                                   id="dataTable1"[m
[32m+[m[32m                                   width="100%"[m
[32m+[m[32m                                   cellspacing="0"[m
[32m+[m[32m                                   data-page-length="100"[m
[32m+[m[32m                                   data-order='[[ 0, "asc" ]]'>[m
[32m+[m[32m                            """)[m
         N_Cols = temp_yo_inactive_DF.shape[1][m
         t_html_file.append('       <thead><tr>\n')[m
         for t_col_index in range(0,N_Cols):[m
[31m-            t_html_file.append('           <th>%s</th>\n' %temp_yo_inactive_DF.columns[t_col_index])[m
[32m+[m[32m            t_html_file.append('           <th class="px-2 text-nowrap">%s</th>\n' %temp_yo_inactive_DF.columns[t_col_index])[m
         t_html_file.append('       </tr></thead>\n')[m
         t_html_file.append('       <tbody>\n')[m
         for row in temp_yo_inactive_DF.itertuples():[m
[36m@@ -4120,9 +4186,9 @@[m [mdef DB_For_ACL(t_device, Config_Change, log_folder):[m
                 t_line = temp_yo_inactive_DF.iloc[row.Index][t_col_index][m
                 if t_col_index == N_Cols-1:[m
                     t_line = utils_v2.Color_Line(t_line)[m
[31m-                    t_html_file.append('           <td>%s</td>\n' %t_line)[m
[32m+[m[32m                    t_html_file.append('           <td class="px-2 text-nowrap">%s</td>\n' %t_line)[m
                 else:[m
[31m-                    t_html_file.append('           <td>%s</td>\n' %t_line)[m
[32m+[m[32m                    t_html_file.append('           <td class="px-2 text-nowrap">%s</td>\n' %t_line)[m
             t_html_file.append('       </tr>\n')[m
         t_html_file.append('       </tbody>\n')[m
         t_html_file.append('   </table>\n')[m
[36m@@ -4132,21 +4198,26 @@[m [mdef DB_For_ACL(t_device, Config_Change, log_folder):[m
         log_msg = File_Save_Try2(Watch_FName, t_html_file, t_ErrFileFullName, Config_Change)[m
         if log_msg:[m
             with engine.begin() as connection: connection.execute(WTF_Log.insert().values(**log_msg))[m
[31m-        Write_Think_File(Fix_FName, Fix_FList_DeltaHit0)[m
[32m+[m[32m        # ----------------------------------------------------------------------------------------------[m
 [m
[31m-        #if len(temp_yo_inactive_below) > 0:[m
[31m-        percent = round(len(temp_yo_inactive_below)/N_active_ACL_Lines*100,2) if N_active_ACL_Lines else 0[m
[31m-        temp_yo_inactive_below_DF = pd.DataFrame(temp_yo_inactive_below, columns = ['Days', 'Line'])[m
 [m
[32m+[m[32m        # writing f"{html_folder}/{hostname___}-Deltahitcnt0_ACL-Watch_2.html" ---------------------------------[m
[32m+[m[32m        temp_yo_inactive_below_DF = pd.DataFrame(temp_yo_inactive_below, columns = ['#', 'Days', 'Line'])[m
 [m
         t_html_file = [][m
         t_html_file.append('<div class="card-body">\n')[m
[31m-        t_html_file.append('<table class="table-bordered table-condensed table-striped" id="dataTable" width="100%" cellspacing="0" data-page-length="50" >\n')[m
[31m-        my_index = 0[m
[32m+[m[32m        t_html_file.append("""[m
[32m+[m[32m                            <table class="table-bordered table-condensed table-striped"[m
[32m+[m[32m                                   id="dataTable2"[m
[32m+[m[32m                                   width="100%"[m
[32m+[m[32m                                   cellspacing="0"[m
[32m+[m[32m                                   data-page-length="100"[m
[32m+[m[32m                                   data-order='[[ 0, "asc" ]]'>[m
[32m+[m[32m                            """)[m
         N_Cols = temp_yo_inactive_below_DF.shape[1][m
         t_html_file.append('       <thead><tr>\n')[m
         for t_col_index in range(0,N_Cols):[m
[31m-            t_html_file.append('           <th>%s</th>\n' %temp_yo_inactive_below_DF.columns[t_col_index])[m
[32m+[m[32m            t_html_file.append('           <th class="px-2 text-nowrap">%s</th>\n' %temp_yo_inactive_below_DF.columns[t_col_index])[m
         t_html_file.append('       </tr></thead>\n')[m
         t_html_file.append('       <tbody>\n')[m
         for row in temp_yo_inactive_below_DF.itertuples():[m
[36m@@ -4155,9 +4226,9 @@[m [mdef DB_For_ACL(t_device, Config_Change, log_folder):[m
                 t_line = temp_yo_inactive_below_DF.iloc[row.Index][t_col_index][m
                 if t_col_index == N_Cols-1:[m
                     t_line = utils_v2.Color_Line(t_line)[m
[31m-                    t_html_file.append('           <td>%s</td>\n' %t_line)[m
[32m+[m[32m                    t_html_file.append('           <td class="px-2 text-nowrap">%s</td>\n' %t_line)[m
                 else:[m
[31m-                    t_html_file.append('           <td>%s</td>\n' %t_line)[m
[32m+[m[32m                    t_html_file.append('           <td class="px-2 text-nowrap">%s</td>\n' %t_line)[m
             t_html_file.append('       </tr>\n')[m
         t_html_file.append('       </tbody>\n')[m
         t_html_file.append('   </table>\n')[m
[36m@@ -4167,6 +4238,47 @@[m [mdef DB_For_ACL(t_device, Config_Change, log_folder):[m
         log_msg = File_Save_Try2(Watch_FName_2, t_html_file, t_ErrFileFullName, Config_Change)[m
         if log_msg:[m
             with engine.begin() as connection: connection.execute(WTF_Log.insert().values(**log_msg))[m
[32m+[m[32m        # ----------------------------------------------------------------------------------------------[m
[32m+[m
[32m+[m
[32m+[m[32m        # writing f"{html_folder}/{hostname___}-Deltahitcnt0_ACL-Fix.html" ---------------------------------[m
[32m+[m[32m        Fix_FList_DeltaHit0_DF = pd.DataFrame(Fix_FList_DeltaHit0, columns = ['#', 'Days', 'Line'])[m
[32m+[m
[32m+[m[32m        t_html_file = [][m
[32m+[m[32m        t_html_file.append('<div class="card-body">\n')[m
[32m+[m[32m        t_html_file.append("""[m
[32m+[m[32m                            <table class="table-bordered table-condensed table-striped"[m
[32m+[m[32m                                   id="dataTable3"[m
[32m+[m[32m                                   width="100%"[m
[32m+[m[32m                                   cellspacing="0"[m
[32m+[m[32m                                   data-page-length="100"[m
[32m+[m[32m                                   data-order='[[ 0, "asc" ]]'>[m
[32m+[m[32m                            """)[m
[32m+[m[32m        N_Cols = Fix_FList_DeltaHit0_DF.shape[1][m
[32m+[m[32m        t_html_file.append('       <thead><tr>\n')[m
[32m+[m[32m        for t_col_index in range(0,N_Cols):[m
[32m+[m[32m            t_html_file.append('           <th class="px-2 text-nowrap">%s</th>\n' %Fix_FList_DeltaHit0_DF.columns[t_col_index])[m
[32m+[m[32m        t_html_file.append('       </tr></thead>\n')[m
[32m+[m[32m        t_html_file.append('       <tbody>\n')[m
[32m+[m[32m        for row in Fix_FList_DeltaHit0_DF.itertuples():[m
[32m+[m[32m            t_html_file.append('       <tr>\n')[m
[32m+[m[32m            for t_col_index in range(0,N_Cols):[m
[32m+[m[32m                t_line = Fix_FList_DeltaHit0_DF.iloc[row.Index][t_col_index][m
[32m+[m[32m                if t_col_index == N_Cols-1:[m
[32m+[m[32m                    t_line = utils_v2.Color_Line(t_line)[m
[32m+[m[32m                    t_html_file.append('           <td class="px-2 text-nowrap">%s</td>\n' %t_line)[m
[32m+[m[32m                else:[m
[32m+[m[32m                    t_html_file.append('           <td class="px-2 text-nowrap">%s</td>\n' %t_line)[m
[32m+[m[32m            t_html_file.append('       </tr>\n')[m
[32m+[m[32m        t_html_file.append('       </tbody>\n')[m
[32m+[m[32m        t_html_file.append('   </table>\n')[m
[32m+[m[32m        t_html_file.append('</div>\n')[m
[32m+[m
[32m+[m[32m        Watch_FName = f"{html_folder}/{hostname___}-Deltahitcnt0_ACL-Fix.html"[m
[32m+[m[32m        log_msg = File_Save_Try2(Watch_FName, t_html_file, t_ErrFileFullName, Config_Change)[m
[32m+[m[32m        if log_msg:[m
[32m+[m[32m            with engine.begin() as connection: connection.execute(WTF_Log.insert().values(**log_msg))[m
[32m+[m[32m        # ----------------------------------------------------------------------------------------------[m
 [m
         if len(temp_few_hitcnt) > 0:[m
             Config_Change.append('\n\n!--- Too Few Hitcount for the following ACL (threshold at %s) ---' %Min_Hitcnt_Threshold)[m
[36m@@ -4175,30 +4287,30 @@[m [mdef DB_For_ACL(t_device, Config_Change, log_folder):[m
 [m
         # remove deleted ines from DB -------------------------------[m
         Header_Printed = False[m
[31m-        for row in ACL_GROSS_db.itertuples():[m
[31m-            t_hash = row.Hash[m
[31m-            Bool_check = (('Name=="%s" & Action=="%s" & Service=="%s"& Source=="%s" & Dest=="%s" & D_Port=="%s" & Hash=="%s"') %(row.Name, row.Action, row.Service, row.Source, row.Dest, row.D_Port, row.Hash))[m
[31m-            t_ACL_Lines_DF = ACL_Lines_DF.query(Bool_check)[m
[31m-            if len(t_ACL_Lines_DF) == 0: # ACL LINE is no longer in config[m
[31m-                N_of_ACL_Deleted += 1[m
[31m-                if Header_Printed == False:[m
[31m-                    Config_Change.append('\n!--- ACL removed from DB ---')[m
[31m-                    print('\n!--- ACL removed from DB ---')[m
[31m-                    Header_Printed = True[m
[31m-                #delete_stmt = db.delete(ACL_GROSS).where(db.and_(ACL_GROSS.c.HostName==hostname___, ACL_GROSS.c.Hash==row.Hash))[m
[31m-                delete_stmt = db.delete(ACL_GROSS).where(db.and_(ACL_GROSS.c.HostName==hostname___,[m
[31m-                                                                 ACL_GROSS.c.Name==row.Name,[m
[31m-                                                                 ACL_GROSS.c.Action==row.Action,[m
[31m-                                                                 ACL_GROSS.c.Service==row.Service,[m
[31m-                                                                 ACL_GROSS.c.Source==row.Source,[m
[31m-                                                                 ACL_GROSS.c.Dest==row.Dest,[m
[31m-                                                                 ACL_GROSS.c.D_Port==row.D_Port,[m
[31m-                                                                 ACL_GROSS.c.Hash==row.Hash))[m
[31m-                with engine.begin() as connection:[m
[32m+[m[32m        with engine.begin() as connection:[m
[32m+[m[32m            for row in ACL_GROSS_db.itertuples():[m
[32m+[m[32m                t_hash = row.Hash[m
[32m+[m[32m                Bool_check = (('Name=="%s" & Action=="%s" & Service=="%s"& Source=="%s" & Dest=="%s" & D_Port=="%s" & Hash=="%s"') %(row.Name, row.Action, row.Service, row.Source, row.Dest, row.D_Port, row.Hash))[m
[32m+[m[32m                t_ACL_Lines_DF = ACL_Lines_DF.query(Bool_check)[m
[32m+[m[32m                if len(t_ACL_Lines_DF) == 0: # ACL LINE is no longer in config[m
[32m+[m[32m                    N_of_ACL_Deleted += 1[m
[32m+[m[32m                    if Header_Printed == False:[m
[32m+[m[32m                        Config_Change.append('\n!--- ACL removed from DB ---')[m
[32m+[m[32m                        print('\n!--- ACL removed from DB ---')[m
[32m+[m[32m                        Header_Printed = True[m
[32m+[m[32m                    delete_stmt = db.delete(ACL_GROSS).where(db.and_(ACL_GROSS.c.HostName==hostname___,[m
[32m+[m[32m                                                                     ACL_GROSS.c.Name==row.Name,[m
[32m+[m[32m                                                                     ACL_GROSS.c.Action==row.Action,[m
[32m+[m[32m                                                                     ACL_GROSS.c.Service==row.Service,[m
[32m+[m[32m                                                                     ACL_GROSS.c.Source==row.Source,[m
[32m+[m[32m                                                                     ACL_GROSS.c.Dest==row.Dest,[m
[32m+[m[32m                                                                     ACL_GROSS.c.D_Port==row.D_Port,[m
[32m+[m[32m                                                                     ACL_GROSS.c.Hash==row.Hash))[m
[32m+[m
                     result = connection.execute(delete_stmt)[m
[31m-                print(f"{result.rowcount} row(s) deleted.")[m
[31m-                t_line = ['access-list',row.Name,row.Line,row.Type,row.Action,row.Service,row.Source,row.S_Port,row.Dest,row.D_Port,row.Rest,row.Inactive,row.Hitcnt,row.Hash][m
[31m-                ACL_Deleted_List.append(' '.join(t_line))[m
[32m+[m[32m                    print(f"{result.rowcount} row(s) deleted.")[m
[32m+[m[32m                    t_line = ['access-list',row.Name,row.Line,row.Type,row.Action,row.Service,row.Source,row.S_Port,row.Dest,row.D_Port,row.Rest,row.Inactive,row.Hitcnt,row.Hash][m
[32m+[m[32m                    ACL_Deleted_List.append(' '.join(t_line))[m
 [m
     # check unmatched entry in db[m
     # salva valore del numero di linee nel db con Delta_HitCnt=0 (solo per le ACL associate a interfaces)[m
[36m@@ -4337,7 +4449,7 @@[m [mdef DB_For_ACL(t_device, Config_Change, log_folder):[m
     t_html_file = ['\n'][m
     if ACL_GROSS_db.shape[0] > 0:[m
         t_all_zero = [][m
[31m-        for t_key in Most_Hitted_ACL.keys():[m
[32m+[m[32m        for t_key in Most_Hitted_ACL:[m
             if len(Most_Hitted_ACL[t_key]) > 0:[m
                 t_html_file.append('''\n[m
                 <div class="card shadow mb-4">\n[m
[36m@@ -4378,8 +4490,8 @@[m [mdef DB_For_ACL(t_device, Config_Change, log_folder):[m
                 t_all_zero.append(1)[m
 [m
     if ACL_GROSS_db.shape[0] > 0:[m
[31m-        if sum(t_all_zero) == len(Most_Hitted_ACL.keys()):[m
[31m-                t_html_file.append('\n This is based on the Delta HitCnt from the previous run.<br> It needs a second run to be populated.<br>')[m
[32m+[m[32m        if sum(t_all_zero) == len(Most_Hitted_ACL):[m
[32m+[m[32m            t_html_file.append('\n This is based on the Delta HitCnt from the previous run.<br> It needs a second run to be populated.<br>')[m
 [m
     Watch_FName = f"{html_folder}/{hostname___}-Most_Hitted_ACL-Watch.html"[m
     log_msg = File_Save_Try2(Watch_FName, t_html_file, t_ErrFileFullName, Config_Change)[m
[36m@@ -4389,7 +4501,7 @@[m [mdef DB_For_ACL(t_device, Config_Change, log_folder):[m
     # OUTPUT HTML FILE for Most_Hitted_ACL-Think[m
     t_html_file = ['\n'][m
     if ACL_GROSS_db.shape[0] > 0:[m
[31m-        for t_key in Most_Hitted_ACL.keys():[m
[32m+[m[32m        for t_key in Most_Hitted_ACL:[m
             if len(Most_Hitted_ACL[t_key]) > 0:[m
                 t_html_file.append('<div class="card shadow mb-4">\n')[m
                 t_html_file.append('<div class="card-header py-3">\n')[m
[36m@@ -4555,10 +4667,7 @@[m [mdef DB_For_ACL(t_device, Config_Change, log_folder):[m
 # if the ACL is partially shadowed stop the processing after "MAX_Partially_Shadowed_Lines" lines found[m
 [m
 def Check_Dec_Shadowing(t_device, ACL_Line, log_folder, Max_ACL_Expand_Ratio):[m
[31m-    from Network_Calc import Proto_Map[m
[31m-    import shelve[m
[31m-    import pandas as pd[m
[31m-    from Network_Calc import Is_Dec_Overlapping, PRTOTOCOLS[m
[32m+[m
     MAX_Partially_Shadowed_Lines = 15[m
 [m
     ACL_Line_DF = utils_v2.ASA_ACL_to_DF([ACL_Line])[m
[36m@@ -4570,11 +4679,22 @@[m [mdef Check_Dec_Shadowing(t_device, ACL_Line, log_folder, Max_ACL_Expand_Ratio):[m
     Temp_Config_Change = [][m
     Temp_Overlapped = {}[m
 [m
[32m+[m[32m    def restore_json(x):[m
[32m+[m[32m        if pd.isna(x) or x in ('', 'None', None):[m
[32m+[m[32m            return None[m
[32m+[m[32m        try:[m
[32m+[m[32m            return json.loads(x)[m
[32m+[m[32m        except (json.JSONDecodeError, TypeError):[m
[32m+[m[32m            return x[m
[32m+[m
     tf_name = f"{log_folder}/VAR_{hostname___}___ACL_Expanded_DF"[m
[31m-    ACL_Expanded_DF = utils_v2.Shelve_Read_Try(tf_name,'')[m
[32m+[m[32m    ACL_Expanded_DF2 = pd.read_feather(f"{tf_name}.feather")[m
[32m+[m[32m    for c in ["S_Port", "D_Port", "Source", "Dest"]:[m
[32m+[m[32m        if c in ACL_Expanded_DF2.columns:[m
[32m+[m[32m            ACL_Expanded_DF2[c] = ACL_Expanded_DF2[c].apply(restore_json)[m
 [m
     Bool_check = ('Name == "%s" & Line == "%s"') %(t_ACL_Name, t_ACL_Line)[m
[31m-    ACL_Line_Expanded_DF = ACL_Expanded_DF.query(Bool_check)[m
[32m+[m[32m    ACL_Line_Expanded_DF = ACL_Expanded_DF2.query(Bool_check)[m
     t_ACL_ndex = ACL_Line_Expanded_DF.index[0][m
     ACL_Line_Expanded_DF.reset_index(inplace=True, drop=True)[m
     ACL_Line_Expanded_DF_Print = pd.DataFrame(ACL_Line_Expanded_DF.Print)[m
[36m@@ -4588,7 +4708,7 @@[m [mdef Check_Dec_Shadowing(t_device, ACL_Line, log_folder, Max_ACL_Expand_Ratio):[m
         return([-1, ('--- access-list %s %s' %(t_ACL_Name,t_ACL_Line))])[m
 [m
     Bool_check = ('Name == "%s"') %(t_ACL_Name)[m
[31m-    ACL_Slice_Expanded_DF = ACL_Expanded_DF.query(Bool_check)[m
[32m+[m[32m    ACL_Slice_Expanded_DF = ACL_Expanded_DF2.query(Bool_check)[m
     ACL_Slice_Expanded_DF = ACL_Slice_Expanded_DF[ACL_Slice_Expanded_DF.index < t_ACL_ndex][m
     ACL_Slice_Expanded_DF.reset_index(inplace=True, drop=True)[m
 [m
[36m@@ -4596,16 +4716,13 @@[m [mdef Check_Dec_Shadowing(t_device, ACL_Line, log_folder, Max_ACL_Expand_Ratio):[m
     for index_1 in range(len(ACL_Line_Expanded_DF)-1,-1,-1):[m
         Header_Printed = False[m
         row1 = ACL_Line_Expanded_DF.loc[index_1][m
[31m-        item1_Action = row1.Action[m
         item1_Servic = row1.Service[m
         item1_Source = row1.Source[m
[31m-        item1_S_Port = row1.S_Port[m
         item1_Destin = row1.Dest[m
         item1_D_Port = row1.D_Port[m
         Temp_Overlapped[row1.Print] = [][m
 [m
         if (item1_Source == [[0,0]] and item1_Destin == [[0,0]]):[m
[31m-            #Temp_Config_Change.append('Line can not be moved...')[m
             Last_Hitted_Line.append(int(row1.Line.split()[1])-1)[m
             continue[m
 [m
[36m@@ -4615,10 +4732,8 @@[m [mdef Check_Dec_Shadowing(t_device, ACL_Line, log_folder, Max_ACL_Expand_Ratio):[m
             if Break_Flag == True:[m
                 break[m
             row2 = ACL_Slice_Expanded_DF.loc[index_2][m
[31m-            item2_Action = row2.Action[m
             item2_Servic = row2.Service[m
             item2_Source = row2.Source[m
[31m-            item2_S_Port = row2.S_Port[m
             item2_Destin = row2.Dest[m
             item2_D_Port = row2.D_Port[m
             if item2_Servic not in PRTOTOCOLS:[m
[36m@@ -4685,7 +4800,7 @@[m [mdef Check_Dec_Shadowing(t_device, ACL_Line, log_folder, Max_ACL_Expand_Ratio):[m
                                     Flag_Ship[2] = 2[m
                                 elif Proto_Check in [4,16]:         # check port to understand better[m
                                     Flag_Ship[2] = 1[m
[31m-                                    Port_Found_List = [0][m
[32m+[m[32m                                    #Port_Found_List = [0][m
 [m
                                     if len(item1_D_Port) == 1:[m
                                         if item1_D_Port[0] == '':[m
[36m@@ -4774,12 +4889,6 @@[m [mdef Check_Dec_Shadowing(t_device, ACL_Line, log_folder, Max_ACL_Expand_Ratio):[m
 [m
 def Check_NAT(t_device, Config_Change, log_folder):[m
 [m
[31m-    import shelve[m
[31m-    import sqlalchemy as db[m
[31m-    import pandas as pd[m
[31m-    from tabulate import tabulate[m
[31m-    import ipaddress[m
[31m-[m
     List_of_NAT_to_Remove = [][m
     List_of_NAT_aging_to_Remove = [][m
     List_of_NAT_to_Inactive = [][m
[36m@@ -5418,10 +5527,16 @@[m [mdef Check_NAT(t_device, Config_Change, log_folder):[m
         try:[m
             ROUTE_IP_DF.at[row_index, 'Network'] = ipaddress.IPv4Network(row.Network)[m
         except:[m
[31m-            Moved_NAT_Think.append('ERROR 5184 while converting %s to ipaddress\n' %row.Network)[m
[31m-            print('ERROR 5184 while converting %s to ipaddress\n' %row.Network)[m
[31m-            ROUTE_IP_DF = ROUTE_IP_DF.drop(row_index)[m
[31m-            continue[m
[32m+[m[32m            try:[m
[32m+[m[32m                t_ip_name = row.Network.split('/')[0][m
[32m+[m[32m                t_ip = Name_dic[t_ip_name][m
[32m+[m[32m                t_sm = row.Network.split('/')[1][m
[32m+[m[32m                ROUTE_IP_DF.at[row_index, 'Network'] = ipaddress.IPv4Network(t_ip + '/' + t_sm, strict=False)[m
[32m+[m[32m            except:[m
[32m+[m[32m                Moved_NAT_Think.append('ERROR 5433 while converting %s to ipaddress\n' %row.Network)[m
[32m+[m[32m                print('ERROR 5433 while converting %s to ipaddress\n' %row.Network)[m
[32m+[m[32m                ROUTE_IP_DF = ROUTE_IP_DF.drop(row_index)[m
[32m+[m[32m                continue[m
 [m
     Show_Crypto_RemoteNet_IP_List = [][m
     for n in Show_Crypto_RemoteNet_List:[m
[36m@@ -5436,8 +5551,14 @@[m [mdef Check_NAT(t_device, Config_Change, log_folder):[m
             try:[m
                 t_SRC_Origin_IP = ipaddress.IPv4Network(t_SRC_Origin, strict=False)[m
             except:[m
[31m-                print('can not translate to IP this "%s" @ "%s"' %(t_SRC_Origin, row.Nat_Line))[m
[31m-                continue[m
[32m+[m[32m                try:[m
[32m+[m[32m                    t_ip_name = t_SRC_Origin.split('/')[0][m
[32m+[m[32m                    t_ip = Name_dic[t_ip_name][m
[32m+[m[32m                    t_sm = t_SRC_Origin.split('/')[1][m
[32m+[m[32m                    t_SRC_Origin_IP = ipaddress.IPv4Network(t_ip + '/' + t_sm, strict=False)[m
[32m+[m[32m                except:[m
[32m+[m[32m                    print('can not translate to IP this "%s" @ "%s"' %(t_SRC_Origin, row.Nat_Line))[m
[32m+[m[32m                    continue[m
 [m
             Bool_check = ('Interface == "%s"') %(t_IF_IN)[m
             BEST_ROUTE = ''[m
[36m@@ -5724,14 +5845,7 @@[m [mdef Check_NAT(t_device, Config_Change, log_folder):[m
 [m
 def Check_Range(t_device, Config_Change, log_folder):[m
 [m
[31m-    import shelve[m
[31m-    import sqlalchemy as db[m
[31m-    import pandas as pd[m
[31m-    from tabulate import tabulate[m
[31m-    import ipaddress[m
[31m-    from Network_Calc import IPv4_to_DecList, Port_Converter[m
[31m-[m
[31m-    html_file_list = [][m
[32m+[m[32m    #html_file_list = [][m
     t_html_file = [][m
     t_Config_Change = [][m
 [m
[36m@@ -5741,7 +5855,7 @@[m [mdef Check_Range(t_device, Config_Change, log_folder):[m
     html_folder = FW_log_folder[m
 [m
     hostname = t_device[m
[31m-    config_range_html = hostname___ + '-Config_Range.html'[m
[32m+[m[32m    #config_range_html = hostname___ + '-Config_Range.html'[m
 [m
     text = ('Check_Range @ %s' %hostname___)[m
     utils_v2.Text_in_Frame (text, Config_Change, Print_also=1)[m
[36m@@ -5787,7 +5901,7 @@[m [mdef Check_Range(t_device, Config_Change, log_folder):[m
     OBJ_GRP_SVC_Dic = utils_v2.Shelve_Read_Try(tf_name,'')[m
 [m
     OBJ_GRP_SVC_Dic_2 = OBJ_GRP_SVC_Dic.copy()[m
[31m-    for t_OBJ_GRP_SVC_Dic_key in OBJ_GRP_SVC_Dic.keys():[m
[32m+[m[32m    for t_OBJ_GRP_SVC_Dic_key in OBJ_GRP_SVC_Dic:[m
         if len(t_OBJ_GRP_SVC_Dic_key.split()) == 2:[m
             OBJ_GRP_SVC_Dic_2[t_OBJ_GRP_SVC_Dic_key.split()[0]] = [t_OBJ_GRP_SVC_Dic_key.split()[1], OBJ_GRP_SVC_Dic_2.pop(t_OBJ_GRP_SVC_Dic_key)][m
         else:[m
[36m@@ -5796,12 +5910,12 @@[m [mdef Check_Range(t_device, Config_Change, log_folder):[m
     tf_name = f"{FW_log_folder}/VAR_{hostname___}___Show_ACL_Lines"[m
     Show_ACL_Lines = utils_v2.Shelve_Read_Try(tf_name,'')[m
 [m
[31m-    remove_tags = re.compile('<.*?>')[m
[32m+[m[32m    #remove_tags = re.compile('<.*?>')[m
 [m
     N_Range_IP_Obj = 0[m
     N_Max_Range_IP = 0[m
     IP_Ranges_for_DB = {}[m
[31m-    for t_obj_key in Obj_Net_Dic.keys():[m
[32m+[m[32m    for t_obj_key in Obj_Net_Dic:[m
         t_value = Obj_Net_Dic[t_obj_key][m
         if t_value.startswith('range '):[m
             IP_1_dec = IPv4_to_DecList(t_value.split()[1], '0.0.0.0')[m
[36m@@ -5810,7 +5924,7 @@[m [mdef Check_Range(t_device, Config_Change, log_folder):[m
             if N_of_IPs > Max_IPv4_Range:[m
                 N_Range_IP_Obj += 1[m
                 if (N_of_IPs > N_Max_Range_IP): N_Max_Range_IP = N_of_IPs[m
[31m-                text_line = 'object network %s\n  %s\n' %(t_obj_key,t_value)[m
[32m+[m[32m                #text_line = 'object network %s\n  %s\n' %(t_obj_key,t_value)[m
                 t_html_file.append('<tr><td class="text-nowrap"><ul>\n')[m
                 t_html_file.append('<_L1_TEXT_> '+'<br><li>IPs Range: %s</li>\n' %(N_of_IPs))[m
                 t_html_file.append('<_CODE_> '+'object network %s<br>\n &nbsp;&nbsp; %s<br><br>\n' %(t_obj_key,t_value))[m
[36m@@ -5824,7 +5938,7 @@[m [mdef Check_Range(t_device, Config_Change, log_folder):[m
 [m
     N_Range_Port_Obj = 0[m
     N_Max_Range_Port = 0[m
[31m-    for t_obj_key in OBJ_SVC_Dic.keys():[m
[32m+[m[32m    for t_obj_key in OBJ_SVC_Dic:[m
         t_value = OBJ_SVC_Dic[t_obj_key][m
         if ' range 'in t_value:[m
             Port1 = t_value.split('range')[1].split()[0][m
[36m@@ -5847,7 +5961,7 @@[m [mdef Check_Range(t_device, Config_Change, log_folder):[m
             if N_of_Ports > Max_Port_Range:[m
                 N_Range_Port_Obj += 1[m
                 if (N_of_Ports > N_Max_Range_Port): N_Max_Range_Port = N_of_Ports[m
[31m-                text_line = 'object service %s\n %s\n' %(t_obj_key,t_value)[m
[32m+[m[32m                #text_line = 'object service %s\n %s\n' %(t_obj_key,t_value)[m
                 t_html_file.append('<tr><td class="text-nowrap"><ul>\n')[m
                 t_html_file.append('<_L1_TEXT_> '+'<br><li>Port Range: %s</li>\n' %(N_of_Ports))[m
                 t_html_file.append('<_CODE_> '+'object service %s<br>\n &nbsp;&nbsp; %s<br><br>\n' %(t_obj_key,t_value))[m
[36m@@ -5858,7 +5972,7 @@[m [mdef Check_Range(t_device, Config_Change, log_folder):[m
                         t_html_file.append(line+'<br>')[m
                 t_html_file.append('</ul></td></tr>\n')[m
 [m
[31m-    for t_obj_key in OBJ_GRP_SVC_Dic_2.keys():[m
[32m+[m[32m    for t_obj_key in OBJ_GRP_SVC_Dic_2:[m
         t_value = OBJ_GRP_SVC_Dic_2[t_obj_key][1][m
         t_proto = OBJ_GRP_SVC_Dic_2[t_obj_key][0][m
         for tt_item in t_value:[m
[36m@@ -5884,7 +5998,7 @@[m [mdef Check_Range(t_device, Config_Change, log_folder):[m
                 if N_of_Ports > Max_Port_Range:[m
                     N_Range_Port_Obj += 1[m
                     if (N_of_Ports > N_Max_Range_Port): N_Max_Range_Port = N_of_Ports[m
[31m-                    text_line = 'object-group service %s %s\n %s\n' %(t_obj_key,t_proto,tt_item)[m
[32m+[m[32m                    #text_line = 'object-group service %s %s\n %s\n' %(t_obj_key,t_proto,tt_item)[m
                     t_html_file.append('<tr><td class="text-nowrap"><ul>\n')[m
                     t_html_file.append('<_L1_TEXT_> '+'<br><li>Port Range: %s</li>\n' %(N_of_Ports))[m
                     t_html_file.append('<_CODE_> '+'object-group service %s %s<br>\n &nbsp;&nbsp; %s<br><br>\n' %(t_obj_key,t_proto,tt_item))[m
[36m@@ -5917,7 +6031,7 @@[m [mdef Check_Range(t_device, Config_Change, log_folder):[m
             if N_of_Ports > Max_Port_Range:[m
                 N_Range_Port_Obj += 1[m
                 if (N_of_Ports > N_Max_Range_Port): N_Max_Range_Port = N_of_Ports[m
[31m-                text_line = '\n\n==> spans %s Ports\n%s\n' %(N_of_Ports,t_item)[m
[32m+[m[32m                #text_line = '\n\n==> spans %s Ports\n%s\n' %(N_of_Ports,t_item)[m
                 t_html_file.append('<tr><td class="text-nowrap"><ul>\n')[m
                 t_html_file.append('<_L1_TEXT_> '+'<br><li>Port Range: %s</li><br>\n' %(N_of_Ports))[m
                 t_html_file.append('<_CODE_> '+'%s\n' %(t_item))[m
[36m@@ -5945,7 +6059,7 @@[m [mdef Check_Range(t_device, Config_Change, log_folder):[m
             result = connection.execute(delete_stmt)[m
 [m
         # IP_Ranges_for_DB[t_obj_key] = [t_value, N_of_IPs][m
[31m-        for t_key in IP_Ranges_for_DB.keys():[m
[32m+[m[32m        for t_key in IP_Ranges_for_DB:[m
             Insert_Vals = dict([m
                             HostName = hostname___,[m
                             Obj_Name = t_key,[m
[36m@@ -5975,7 +6089,7 @@[m [mdef Check_Range(t_device, Config_Change, log_folder):[m
         try:[m
             os.mkdir(html_folder)[m
         except:[m
[31m-             raise OSError("Can't create destination directory (%s)!" % (html_folder))[m
[32m+[m[32m            raise OSError("Can't create destination directory (%s)!" % (html_folder))[m
 [m
     Watch_FName = f"{html_folder}/{hostname___}-Config_Range.html"[m
     log_msg = File_Save_Try2(Watch_FName, t_html_file, t_ErrFileFullName, Config_Change)[m
[36m@@ -5998,7 +6112,6 @@[m [mdef Check_Range(t_device, Config_Change, log_folder):[m
 [m
 [m
 def Where_Used(t_device, t_Object_Name, log_folder, Out):[m
[31m-    import shelve[m
 [m
     hostname___ = t_device.replace('/','___')[m
     #log_folder = log_folder + '/' + hostname___[m
[36m@@ -6017,7 +6130,7 @@[m [mdef Where_Used(t_device, t_Object_Name, log_folder, Out):[m
     OBJ_GRP_SVC_Dic = utils_v2.Shelve_Read_Try(tf_name,'')[m
 [m
     OBJ_GRP_SVC_Dic_2 = OBJ_GRP_SVC_Dic.copy()[m
[31m-    for t_OBJ_GRP_SVC_Dic_key in OBJ_GRP_SVC_Dic.keys():[m
[32m+[m[32m    for t_OBJ_GRP_SVC_Dic_key in OBJ_GRP_SVC_Dic:[m
         if len(t_OBJ_GRP_SVC_Dic_key.split()) == 2:[m
             OBJ_GRP_SVC_Dic_2[t_OBJ_GRP_SVC_Dic_key.split()[0]] = OBJ_GRP_SVC_Dic_2.pop(t_OBJ_GRP_SVC_Dic_key)[m
 [m
[36m@@ -6027,10 +6140,10 @@[m [mdef Where_Used(t_device, t_Object_Name, log_folder, Out):[m
     tf_name = f"{log_folder}/VAR_{hostname___}___Show_NAT_DF"[m
     Show_NAT_DF = utils_v2.Shelve_Read_Try(tf_name,'')[m
 [m
[31m-    if  ( (t_Object_Name in Obj_Net_Dic.keys()) or[m
[31m-        (t_Object_Name in OBJ_GRP_NET_Dic.keys()) or[m
[31m-        (t_Object_Name in OBJ_SVC_Dic.keys()) or[m
[31m-        (t_Object_Name in OBJ_GRP_SVC_Dic_2.keys()) ):[m
[32m+[m[32m    if  ( (t_Object_Name in Obj_Net_Dic) or[m
[32m+[m[32m        (t_Object_Name in OBJ_GRP_NET_Dic) or[m
[32m+[m[32m        (t_Object_Name in OBJ_SVC_Dic) or[m
[32m+[m[32m        (t_Object_Name in OBJ_GRP_SVC_Dic_2) ):[m
         # find in access-list[m
         Printed_Lines = [][m
         for t_acl_line in Show_ACL_Lines:[m
[36m@@ -6046,13 +6159,13 @@[m [mdef Where_Used(t_device, t_Object_Name, log_folder, Out):[m
                 Out.append('<_CODE_> '+'%s\n' %row.Nat_Line)[m
                 Printed_Lines.append(t_Object_Name)[m
 [m
[31m-    for t_OBJ_GRP_KEY in OBJ_GRP_NET_Dic.keys():[m
[32m+[m[32m    for t_OBJ_GRP_KEY in OBJ_GRP_NET_Dic:[m
         for t_OBJ_GRP_VALS in OBJ_GRP_NET_Dic[t_OBJ_GRP_KEY]:[m
             if t_Object_Name in t_OBJ_GRP_VALS.strip().split():[m
                 Out.append('<_L2_TEXT_> '+'<b>"%s"</b> nested found as object in <b>"%s"</b>\n' %(t_Object_Name, t_OBJ_GRP_KEY))[m
                 Where_Used(t_device, t_OBJ_GRP_KEY, log_folder, Out)[m
 [m
[31m-    for t_OBJ_GRP_KEY in OBJ_GRP_SVC_Dic_2.keys():[m
[32m+[m[32m    for t_OBJ_GRP_KEY in OBJ_GRP_SVC_Dic_2:[m
         for t_OBJ_GRP_VALS in OBJ_GRP_SVC_Dic_2[t_OBJ_GRP_KEY]:[m
             if t_Object_Name in t_OBJ_GRP_VALS.strip().split():[m
                 Out.append('<_L2_TEXT_> '+'<b>"%s"</b> nested found as object in <b>"%s"</b>\n' %(t_Object_Name, t_OBJ_GRP_KEY))[m
[1mdiff --git a/app/Scripts/ASA_Check_Config_VAR.py b/app/Scripts/ASA_Check_Config_VAR.py[m
[1mindex 460df6a..081d185 100644[m
[1m--- a/app/Scripts/ASA_Check_Config_VAR.py[m
[1m+++ b/app/Scripts/ASA_Check_Config_VAR.py[m
[36m@@ -1,20 +1,29 @@[m
[32m+[m[32m# pylint: disable=C0103[m
[32m+[m
[32m+[m[32mimport os[m
[32m+[m[32mimport sys[m
 import shelve[m
 import re[m
 import ipaddress[m
[31m-import html[m
 import datetime[m
 import utils_v2[m
[32m+[m[32mimport sqlalchemy as db[m
[32m+[m[32mimport pandas as pd[m
[32m+[m[32mimport pyarrow[m
[32m+[m[32mimport json[m
 [m
[31m-from tabulate import tabulate[m
[32m+[m[32m#from tabulate import tabulate[m
 from Network_Calc import *[m
 from ASA_Check_Config_PARAM import *[m
 [m
[32m+[m[32m#from utils_v2 import File_Save_Try[m
[32m+[m
 re_space = re.compile(r'  +')[m
 re_empty = re.compile(r'^\s*$') # empty line[m
[31m-re1 = re.compile(r'(permit|deny) (tcp|icmp|udp|gre|ip|esp|ah|ipsec|ospf)', re.IGNORECASE)[m
[31m-re4 = re.compile(r'^  access-list .* line', re.IGNORECASE)[m
[32m+[m[32m##re1 = re.compile(r'(permit|deny) (tcp|icmp|udp|gre|ip|esp|ah|ipsec|ospf)', re.IGNORECASE)[m
[32m+[m[32m##re4 = re.compile(r'^  access-list .* line', re.IGNORECASE)[m
 re11 = re.compile(r'^access-list .* line \d* extended', re.IGNORECASE)[m
[31m-re9 = re.compile(r'\(hitcnt=.*')[m
[32m+[m[32m##re9 = re.compile(r'\(hitcnt=.*')[m
 re3 = re.compile(r'^access-list .* line', re.IGNORECASE)[m
 re5 = re.compile(r'^\s*$') # empty line[m
 re2 = re.compile(r'access-list .* element', re.IGNORECASE)[m
[36m@@ -35,14 +44,24 @@[m [mdef VAR_Show_Nameif(t_device, Config_Change, log_folder):[m
     log_folder = log_folder + '/' + hostname___[m
     global WTF_Error_FName[m
 [m
[32m+[m[32m    file_path = os.path.join(log_folder, f"{hostname___}___Show_Nameif.log")[m
[32m+[m[32m    err_file = os.path.join(Err_folder, WTF_Error_FName)[m
[32m+[m
     try:[m
[31m-        with open("%s/%s___Show_Nameif.log"%(log_folder,hostname___),'r', encoding='utf-8', errors='ignore') as f:[m
[32m+[m[32m        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:[m
             l = f.readlines()[m
[31m-    except:[m
[31m-        print('file %s/%s___Show_Nameif.log not found! @ VAR_Show_Nameif' %(log_folder,hostname___))[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[31m-            f.write('file %s/%s___Show_Nameif.log not found! @ VAR_Show_Nameif\n' %(log_folder,hostname___))[m
[31m-        exit(0)[m
[32m+[m[32m    except FileNotFoundError:[m
[32m+[m[32m        msg = f'File not found: {file_path} @ VAR_Show_Nameif'[m
[32m+[m[32m        print(msg)[m
[32m+[m[32m        with open(err_file, 'a+', encoding='utf-8') as f:[m
[32m+[m[32m            f.write(msg + '\n')[m
[32m+[m[32m        sys.exit(msg)[m
[32m+[m[32m    except OSError as e:[m
[32m+[m[32m        msg = f'Error reading {file_path} @ VAR_Show_Nameif: {e}'[m
[32m+[m[32m        print(msg)[m
[32m+[m[32m        with open(err_file, 'a+', encoding='utf-8') as f:[m
[32m+[m[32m            f.write(msg + '\n')[m
[32m+[m[32m        sys.exit(msg)[m
 [m
     Nameif_List = [][m
     for n in range(1,len(l)):[m
[36m@@ -51,11 +70,11 @@[m [mdef VAR_Show_Nameif(t_device, Config_Change, log_folder):[m
             if (temp_l[0] != 'Interface') and (temp_l[1] != 'Name') and (temp_l[2] != 'Security'):[m
                 Nameif_List.append(temp_l[1])[m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'Nameif_List')[m
[32m+[m[32m    tf_name = os.path.join(log_folder, f"VAR_{hostname___}___Nameif_List")[m
     retries = utils_v2.Shelve_Write_Try(tf_name,Nameif_List)[m
     if retries == 3:[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[31m-            f.write('Cannot write file %s/VAR_%s___%s! @ VAR_Show_Nameif\n' %(log_folder,hostname___,'Nameif_List'))[m
[32m+[m[32m        with open(os.path.join(Err_folder, WTF_Error_FName), "a+", encoding="utf-8") as f:[m
[32m+[m[32m            f.write(f"Cannot write file {os.path.join(log_folder, f'VAR_{hostname___}___Nameif_List')}! @ VAR_Show_Nameif\n")[m
 [m
 #=============================================================================================================================[m
 #  _  ___  ___    _  _  __    ____                 ___  _   _  _____  _    _       ____  __  __  _  _         __    ___  ___  ____  ___  ___        ___  ____  _____  __  __  ____    ___  ___  _[m
[36m@@ -70,14 +89,24 @@[m [mdef VAR_Show_Run_ACGR(t_device, Config_Change, log_folder):[m
     log_folder = log_folder + '/' + hostname___[m
     global WTF_Error_FName[m
 [m
[32m+[m[32m    file_path = os.path.join(log_folder, f"{hostname___}___Show_Run_Access-Group.log")[m
[32m+[m[32m    err_path = os.path.join(Err_folder, WTF_Error_FName)[m
[32m+[m
     try:[m
[31m-        with open("%s/%s___Show_Run_Access-Group.log"%(log_folder,hostname___),'r', encoding='utf-8', errors='ignore') as f:[m
[32m+[m[32m        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:[m
             l = f.readlines()[m
[31m-    except:[m
[31m-        print('file %s/%s___Show_Run_Access-Group.log not found! @ VAR_Show_Run_ACGR' %(log_folder,hostname___))[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[31m-            f.write('file %s/%s___Show_Run_Access-Group.log not found! @ VAR_Show_Run_ACGR\n' %(log_folder,hostname___))[m
[31m-        exit(0)[m
[32m+[m[32m    except FileNotFoundError:[m
[32m+[m[32m        msg = f"File not found: {file_path} @ VAR_Show_Run_ACGR"[m
[32m+[m[32m        print(msg)[m
[32m+[m[32m        with open(err_path, 'a+', encoding='utf-8') as err_file:[m
[32m+[m[32m            err_file.write(msg + '\n')[m
[32m+[m[32m        sys.exit(msg)[m
[32m+[m[32m    except OSError as e:[m
[32m+[m[32m        msg = f"Error reading {file_path} @ VAR_Show_Run_ACGR: {e}"[m
[32m+[m[32m        print(msg)[m
[32m+[m[32m        with open(err_path, 'a+', encoding='utf-8') as err_file:[m
[32m+[m[32m            err_file.write(msg + '\n')[m
[32m+[m[32m        sys.exit(msg)[m
 [m
     Accessgroup_Dic_by_if = {}[m
     Accessgroup_Dic_by_ACL = {}[m
[36m@@ -90,23 +119,26 @@[m [mdef VAR_Show_Run_ACGR(t_device, Config_Change, log_folder):[m
             else:[m
                 Global_ACL_Dic['global'] = l[n].split()[1][m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'Accessgroup_Dic_by_if')[m
[31m-    retries = utils_v2.Shelve_Write_Try(tf_name,Accessgroup_Dic_by_if)[m
[32m+[m[32m    tf_name = os.path.join(log_folder, f"VAR_{hostname___}___Accessgroup_Dic_by_if")[m
[32m+[m[32m    retries = utils_v2.Shelve_Write_Try(tf_name, Accessgroup_Dic_by_if)[m
     if retries == 3:[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[31m-            f.write('Cannot write file %s/VAR_%s___%s! @ VAR_Show_Run_ACGR\n' %(log_folder,hostname___,'Accessgroup_Dic_by_if'))[m
[32m+[m[32m        msg = f"Cannot write file {tf_name}! @ VAR_Show_Run_ACGR\n"[m
[32m+[m[32m        with open(err_file, "a+", encoding="utf-8") as f:[m
[32m+[m[32m            f.write(msg)[m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'Accessgroup_Dic_by_ACL')[m
[32m+[m[32m    tf_name = os.path.join(log_folder, f"VAR_{hostname___}___Accessgroup_Dic_by_ACL")[m
     retries = utils_v2.Shelve_Write_Try(tf_name,Accessgroup_Dic_by_ACL)[m
     if retries == 3:[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[31m-            f.write('Cannot write file %s/VAR_%s___%s! @ VAR_Show_Run_ACGR\n' %(log_folder,hostname___,'Accessgroup_Dic_by_ACL'))[m
[32m+[m[32m        msg = f"Cannot write file {tf_name}! @ VAR_Show_Run_ACGR\n"[m
[32m+[m[32m        with open(err_file, "a+", encoding="utf-8") as f:[m
[32m+[m[32m            f.write(msg)[m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'Global_ACL_Dic')[m
[32m+[m[32m    tf_name = os.path.join(log_folder, f"VAR_{hostname___}___Global_ACL_Dic")[m
     retries = utils_v2.Shelve_Write_Try(tf_name,Global_ACL_Dic)[m
     if retries == 3:[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[31m-            f.write('Cannot write file %s/VAR_%s___%s! @ VAR_Show_Run_ACGR\n' %(log_folder,hostname___,'Global_ACL_Dic'))[m
[32m+[m[32m        msg = f"Cannot write file {tf_name}! @ VAR_Show_Run_ACGR\n"[m
[32m+[m[32m        with open(err_file, "a+", encoding="utf-8") as f:[m
[32m+[m[32m            f.write(msg)[m
 [m
 [m
 #=============================================================================================================================[m
[36m@@ -118,22 +150,29 @@[m [mdef VAR_Show_Run_ACGR(t_device, Config_Change, log_folder):[m
 #=============================================================================================================================[m
 [m
 def VAR_Show_Run(t_device, Config_Change, log_folder):[m
[31m-    from utils_v2 import File_Save_Try[m
[32m+[m
     hostname___ = t_device.replace('/','___')[m
     Err_folder = log_folder[m
     log_folder = log_folder + '/' + hostname___[m
     global WTF_Error_FName[m
[31m-    Not_ascii_L = [][m
 [m
[31m-    text = ('VAR_Show_Run @ %s' %hostname___)[m
[32m+[m[32m    text = f'VAR_Show_Run @ {hostname___}'[m
     utils_v2.Text_in_Frame (text, Config_Change, Print_also=1)[m
 [m
[32m+[m[32m    file_path = os.path.join(log_folder, f"{hostname___}___Show_Running-Config.log")[m
[32m+[m[32m    err_file = os.path.join(Err_folder, WTF_Error_FName)[m
[32m+[m
     try:[m
[31m-        with open("%s/%s___Show_Running-Config.log"%(log_folder,hostname___),'r', encoding='utf-8', errors='ignore') as f:[m
[32m+[m[32m        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:[m
             t_file = f.readlines()[m
[31m-    except:[m
[31m-        print('file %s/%s___Show_Running-Config.log not found! @ CREATE VARIABLES' %(log_folder,hostname___))[m
[31m-        exit(0)[m
[32m+[m[32m    except FileNotFoundError:[m
[32m+[m[32m        msg = f"File not found: {file_path} @ CREATE VARIABLES"[m
[32m+[m[32m        print(msg)[m
[32m+[m[32m        sys.exit(msg)[m
[32m+[m[32m    except OSError as e:[m
[32m+[m[32m        msg = f"Error reading {file_path} @ CREATE VARIABLES: {e}"[m
[32m+[m[32m        print(msg)[m
[32m+[m[32m        sys.exit(msg)[m
 [m
     Declared_Object_List = [][m
     Declared_OBJ_NET = [][m
[36m@@ -181,12 +220,12 @@[m [mdef VAR_Show_Run(t_device, Config_Change, log_folder):[m
         elif t_file[n].startswith('policy-map '):[m
             temp = [][m
             if l.split()[1] == 'type':[m
[31m-                print ('\nWARNING from "VAR_Show_Run" for %s' %hostname___)[m
[31m-                print ('        ... line "%s" not processed' % l)[m
[32m+[m[32m                print (f'\nWARNING from "VAR_Show_Run" for {hostname___}')[m
[32m+[m[32m                print (f'        ... line "{l}" not processed')[m
             else:[m
                 this_pm = l.split()[1][m
                 nn = n+1[m
[31m-                while (t_file[nn].startswith(' ')):[m
[32m+[m[32m                while t_file[nn].startswith(' '):[m
                     if t_file[nn].startswith(' class '):[m
                         temp.append(t_file[nn].split()[1])[m
                     nn = nn+1[m
[36m@@ -209,11 +248,11 @@[m [mdef VAR_Show_Run(t_device, Config_Change, log_folder):[m
             this_OBJ_SVC = l.split(' service ')[1][m
             if this_OBJ_SVC not in Declared_Object_service:[m
                 Declared_Object_service.append(this_OBJ_SVC)[m
[31m-            if this_OBJ_SVC not in OBJ_SVC_Dic.keys():[m
[32m+[m[32m            if this_OBJ_SVC not in OBJ_SVC_Dic:[m
                 OBJ_SVC_Dic[this_OBJ_SVC] = t_file[n+1].strip()[m
             else:[m
                 print('WARNING!!!!')[m
[31m-                print('%s already in OBJ_SVC_Dic.keys()' %this_OBJ_SVC)[m
[32m+[m[32m                print(f'{this_OBJ_SVC} already in OBJ_SVC_Dic')[m
 [m
         elif t_file[n].startswith('object-group service '):[m
             temp = [][m
[36m@@ -244,12 +283,12 @@[m [mdef VAR_Show_Run(t_device, Config_Change, log_folder):[m
             elif t_file[n+1].startswith(' nat ('):[m
                 pass[m
             else:[m
[31m-                print('Object "%s" already declared! check it out' %l.split(' network ')[1])[m
[32m+[m[32m                print(f'Object "{l.split(" network ")[1]}" already declared! check it out')[m
 [m
         # collect "object-group network"[m
         elif t_file[n].startswith('object-group network '):[m
             temp = [][m
[31m-            t_key = (l.split(' network ')[1])[m
[32m+[m[32m            t_key = l.split(' network ')[1][m
             nn = n+1[m
             while not (t_file[nn].startswith('object-group ') or t_file[nn].startswith('access-list ')):[m
                 if t_file[nn].startswith(' group-object ') or t_file[nn].startswith(' network-object ') :[m
[36m@@ -261,7 +300,7 @@[m [mdef VAR_Show_Run(t_device, Config_Change, log_folder):[m
                 Declared_Object_List.append((l.split(' network ')[1]))[m
                 Declared_OBJ_GRP_NET.append((l.split(' network ')[1]))[m
             else:[m
[31m-                print('Object "%s" already declared! check it out' %l.split(' network ')[1])[m
[32m+[m[32m                print(f'Object "{l.split(" network ")[1]}" already declared! check it out')[m
 [m
         # collect Used_Object_List[m
         elif t_file[n].startswith(' network-object object '):[m
[36m@@ -296,14 +335,14 @@[m [mdef VAR_Show_Run(t_device, Config_Change, log_folder):[m
             t_object = this_line.split()[m
             for m in t_object:[m
                 if m.strip() not in Used_Object_List:[m
[31m-                     Used_Object_List.append(m.strip())[m
[32m+[m[32m                    Used_Object_List.append(m.strip())[m
 [m
         elif t_file[n].startswith(' nat ('):[m
             this_line = re_nat.sub('', t_file[n])[m
             t_object = this_line.split()[m
             for m in t_object:[m
                 if m.strip() not in Used_Object_List:[m
[31m-                     Used_Object_List.append(m.strip())[m
[32m+[m[32m                    Used_Object_List.append(m.strip())[m
 [m
         # collect undeclared network-object used in "object-group network"[m
         elif t_file[n].startswith(' network-object host '):[m
[36m@@ -317,14 +356,14 @@[m [mdef VAR_Show_Run(t_device, Config_Change, log_folder):[m
         # collect Obejct_by_value_Dict[m
         elif t_file[n].startswith(' host '):[m
             t_key = (t_file[n].split(' host ')[1]).strip()[m
[31m-            if t_key not in Obejct_by_value_Dict.keys():[m
[32m+[m[32m            if t_key not in Obejct_by_value_Dict:[m
                 Obejct_by_value_Dict[t_key] = [(t_file[n-1].split(' network ')[1]).strip()][m
             else:[m
                 Obejct_by_value_Dict[t_key].append(t_file[n-1].split(' network ')[1].strip())[m
         elif t_file[n].startswith(' range '):[m
             t_key = (t_file[n].split(' range ')[1]).strip()[m
             t_val = (t_file[n-1].split(' network ')[1]).strip()[m
[31m-            if t_key not in Obejct_by_value_Dict.keys():[m
[32m+[m[32m            if t_key not in Obejct_by_value_Dict:[m
                 Obejct_by_value_Dict[t_key] = [t_val][m
             else:[m
                 Obejct_by_value_Dict[t_key].append(t_val)[m
[36m@@ -332,13 +371,13 @@[m [mdef VAR_Show_Run(t_device, Config_Change, log_folder):[m
             if ' network ' in t_file[n-1]:[m
                 t_key = (t_file[n].split(' fqdn ')[1]).strip()[m
                 t_val = (t_file[n-1].split(' network ')[1]).strip()[m
[31m-                if t_key not in Obejct_by_value_Dict.keys():[m
[32m+[m[32m                if t_key not in Obejct_by_value_Dict:[m
                     Obejct_by_value_Dict[t_key] = [t_val][m
                 else:[m
                     Obejct_by_value_Dict[t_key].append(t_val)[m
         elif t_file[n].startswith(' subnet '):[m
             t_key = (t_file[n].split(' subnet ')[1]).strip()[m
[31m-            if t_key not in Obejct_by_value_Dict.keys():[m
[32m+[m[32m            if t_key not in Obejct_by_value_Dict:[m
                 t_key = (t_file[n].split(' subnet ')[1]).strip()[m
                 Obejct_by_value_Dict[t_key] = [(t_file[n-1].split(' network ')[1]).strip()][m
             else:[m
[36m@@ -347,290 +386,242 @@[m [mdef VAR_Show_Run(t_device, Config_Change, log_folder):[m
         elif re.match(r'^crypto map .* match address', t_file[n]):[m
             Crypto_MAP_ACL_List.append(t_file[n].strip().split()[-1])[m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'Declared_Object_List')[m
[31m-    err_line = f'Can Not Write File {tf_name} @ VAR_Show_Run\n'[m
[32m+[m[32m    tf_name = os.path.join(log_folder, f"VAR_{hostname___}___Declared_Object_List")[m
[32m+[m[32m    err_line = f"Can Not Write File {tf_name} @ VAR_Show_Run\n"[m
     retries = utils_v2.Shelve_Write_Try(tf_name,Declared_Object_List)[m
     if retries == 3:[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[32m+[m[32m        with open(err_file, "a+", encoding="utf-8") as f:[m
             f.write(err_line)[m
         print(err_line)[m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'Crypto_MAP_ACL_List')[m
[31m-    err_line = f'Can Not Write File {tf_name} @ VAR_Show_Run\n'[m
[32m+[m[32m    tf_name = os.path.join(log_folder, f"VAR_{hostname___}___Crypto_MAP_ACL_List")[m
[32m+[m[32m    err_line = f"Can Not Write File {tf_name} @ VAR_Show_Run\n"[m
     retries = utils_v2.Shelve_Write_Try(tf_name,Crypto_MAP_ACL_List)[m
     if retries == 3:[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[32m+[m[32m        with open(err_file, "a+", encoding="utf-8") as f:[m
             f.write(err_line)[m
         print(err_line)[m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'Declared_OBJ_NET')[m
[32m+[m[32m    tf_name = os.path.join(log_folder, f"VAR_{hostname___}___Declared_OBJ_NET")[m
     err_line = f'Can Not Write File {tf_name} @ VAR_Show_Run\n'[m
     retries = utils_v2.Shelve_Write_Try(tf_name,Declared_OBJ_NET)[m
     if retries == 3:[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[32m+[m[32m        with open(err_file, "a+", encoding="utf-8") as f:[m
             f.write(err_line)[m
         print(err_line)[m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'Declared_OBJ_GRP_NET')[m
[32m+[m[32m    tf_name = os.path.join(log_folder, f"VAR_{hostname___}___Declared_OBJ_GRP_NET")[m
     err_line = f'Can Not Write File {tf_name} @ VAR_Show_Run\n'[m
     retries = utils_v2.Shelve_Write_Try(tf_name,Declared_OBJ_GRP_NET)[m
     if retries == 3:[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[32m+[m[32m        with open(err_file, "a+", encoding="utf-8") as f:[m
             f.write(err_line)[m
         print(err_line)[m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'Used_Object_List')[m
[32m+[m[32m    tf_name = os.path.join(log_folder, f"VAR_{hostname___}___Used_Object_List")[m
     err_line = f'Can Not Write File {tf_name} @ VAR_Show_Run\n'[m
     retries = utils_v2.Shelve_Write_Try(tf_name,Used_Object_List)[m
     if retries == 3:[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[32m+[m[32m        with open(err_file, "a+", encoding="utf-8") as f:[m
             f.write(err_line)[m
         print(err_line)[m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'Obejct_by_value_Dict')[m
[32m+[m[32m    tf_name = os.path.join(log_folder, f"VAR_{hostname___}___Obejct_by_value_Dict")[m
     err_line = f'Can Not Write File {tf_name} @ VAR_Show_Run\n'[m
     retries = utils_v2.Shelve_Write_Try(tf_name,Obejct_by_value_Dict)[m
     if retries == 3:[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[32m+[m[32m        with open(err_file, "a+", encoding="utf-8") as f:[m
             f.write(err_line)[m
         print(err_line)[m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'Undeclared_NetObj_List')[m
[32m+[m[32m    tf_name = os.path.join(log_folder, f"VAR_{hostname___}___Undeclared_NetObj_List")[m
     err_line = f'Can Not Write File {tf_name} @ VAR_Show_Run\n'[m
     retries = utils_v2.Shelve_Write_Try(tf_name,Undeclared_NetObj_List)[m
     if retries == 3:[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[32m+[m[32m        with open(err_file, "a+", encoding="utf-8") as f:[m
             f.write(err_line)[m
         print(err_line)[m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'Declared_Object_service')[m
[32m+[m[32m    tf_name = os.path.join(log_folder, f"VAR_{hostname___}___Declared_Object_service")[m
     err_line = f'Can Not Write File {tf_name} @ VAR_Show_Run\n'[m
     retries = utils_v2.Shelve_Write_Try(tf_name,Declared_Object_service)[m
     if retries == 3:[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[32m+[m[32m        with open(err_file, "a+", encoding="utf-8") as f:[m
             f.write(err_line)[m
         print(err_line)[m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'Obj_Net_Dic')[m
[32m+[m[32m    tf_name = os.path.join(log_folder, f"VAR_{hostname___}___Obj_Net_Dic")[m
     err_line = f'Can Not Write File {tf_name} @ VAR_Show_Run\n'[m
     retries = utils_v2.Shelve_Write_Try(tf_name,Obj_Net_Dic)[m
     if retries == 3:[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[32m+[m[32m        with open(err_file, "a+", encoding="utf-8") as f:[m
             f.write(err_line)[m
         print(err_line)[m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'ACL_SplitTunnel_List')[m
[32m+[m[32m    tf_name = os.path.join(log_folder, f"VAR_{hostname___}___ACL_SplitTunnel_List")[m
     err_line = f'Can Not Write File {tf_name} @ VAR_Show_Run\n'[m
     retries = utils_v2.Shelve_Write_Try(tf_name,ACL_SplitTunnel_List)[m
     if retries == 3:[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[32m+[m[32m        with open(err_file, "a+", encoding="utf-8") as f:[m
             f.write(err_line)[m
         print(err_line)[m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'logging_monitor_line')[m
[32m+[m[32m    tf_name = os.path.join(log_folder, f"VAR_{hostname___}___logging_monitor_line")[m
     err_line = f'Can Not Write File {tf_name} @ VAR_Show_Run\n'[m
     retries = utils_v2.Shelve_Write_Try(tf_name,logging_monitor_line)[m
     if retries == 3:[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[32m+[m[32m        with open(err_file, "a+", encoding="utf-8") as f:[m
             f.write(err_line)[m
         print(err_line)[m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'ServicePolicy_Lst')[m
[32m+[m[32m    tf_name = os.path.join(log_folder, f"VAR_{hostname___}___ServicePolicy_Lst")[m
     err_line = f'Can Not Write File {tf_name} @ VAR_Show_Run\n'[m
     retries = utils_v2.Shelve_Write_Try(tf_name,ServicePolicy_Lst)[m
     if retries == 3:[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[32m+[m[32m        with open(err_file, "a+", encoding="utf-8") as f:[m
             f.write(err_line)[m
         print(err_line)[m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'PolicyMap_Dct')[m
[32m+[m[32m    tf_name = os.path.join(log_folder, f"VAR_{hostname___}___PolicyMap_Dct")[m
     err_line = f'Can Not Write File {tf_name} @ VAR_Show_Run\n'[m
     retries = utils_v2.Shelve_Write_Try(tf_name,PolicyMap_Dct)[m
     if retries == 3:[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[32m+[m[32m        with open(err_file, "a+", encoding="utf-8") as f:[m
             f.write(err_line)[m
         print(err_line)[m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'ClassMap_Dct')[m
[32m+[m[32m    tf_name = os.path.join(log_folder, f"VAR_{hostname___}___ClassMap_Dct")[m
     err_line = f'Can Not Write File {tf_name} @ VAR_Show_Run\n'[m
     retries = utils_v2.Shelve_Write_Try(tf_name,ClassMap_Dct)[m
     if retries == 3:[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[32m+[m[32m        with open(err_file, "a+", encoding="utf-8") as f:[m
             f.write(err_line)[m
         print(err_line)[m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'OBJ_GRP_NET_Dic')[m
[32m+[m[32m    tf_name = os.path.join(log_folder, f"VAR_{hostname___}___OBJ_GRP_NET_Dic")[m
     err_line = f'Can Not Write File {tf_name} @ VAR_Show_Run\n'[m
     retries = utils_v2.Shelve_Write_Try(tf_name,OBJ_GRP_NET_Dic)[m
     if retries == 3:[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[32m+[m[32m        with open(err_file, "a+", encoding="utf-8") as f:[m
             f.write(err_line)[m
         print(err_line)[m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'OBJ_GRP_SVC_Dic')[m
[32m+[m[32m    tf_name = os.path.join(log_folder, f"VAR_{hostname___}___OBJ_GRP_SVC_Dic")[m
     err_line = f'Can Not Write File {tf_name} @ VAR_Show_Run\n'[m
     retries = utils_v2.Shelve_Write_Try(tf_name,OBJ_GRP_SVC_Dic)[m
     if retries == 3:[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[32m+[m[32m        with open(err_file, "a+", encoding="utf-8") as f:[m
             f.write(err_line)[m
         print(err_line)[m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'OBJ_GRP_PRT_Dic')[m
[32m+[m[32m    tf_name = os.path.join(log_folder, f"VAR_{hostname___}___OBJ_GRP_PRT_Dic")[m
     err_line = f'Can Not Write File {tf_name} @ VAR_Show_Run\n'[m
     retries = utils_v2.Shelve_Write_Try(tf_name,OBJ_GRP_PRT_Dic)[m
     if retries == 3:[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[32m+[m[32m        with open(err_file, "a+", encoding="utf-8") as f:[m
             f.write(err_line)[m
         print(err_line)[m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'Name_dic')[m
[32m+[m[32m    tf_name = os.path.join(log_folder, f"VAR_{hostname___}___Name_dic")[m
     err_line = f'Can Not Write File {tf_name} @ VAR_Show_Run\n'[m
     retries = utils_v2.Shelve_Write_Try(tf_name,Name_dic)[m
     if retries == 3:[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[32m+[m[32m        with open(err_file, "a+", encoding="utf-8") as f:[m
             f.write(err_line)[m
         print(err_line)[m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'OBJ_SVC_Dic')[m
[32m+[m[32m    tf_name = os.path.join(log_folder, f"VAR_{hostname___}___OBJ_SVC_Dic")[m
     err_line = f'Can Not Write File {tf_name} @ VAR_Show_Run\n'[m
     retries = utils_v2.Shelve_Write_Try(tf_name,OBJ_SVC_Dic)[m
     if retries == 3:[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[32m+[m[32m        with open(err_file, "a+", encoding="utf-8") as f:[m
             f.write(err_line)[m
         print(err_line)[m
 [m
[31m-    DB_Available = True[m
[31m-    import sqlalchemy as db[m
     return Config_Change[m
 [m
 [m
[31m-#=======================================================================================================================================================[m
[31m-#  _  ___  ___    _  _  __    ____                 ___  _   _  _____  _    _      __    ___  ___  ____  ___  ___      __    ____  ___  ____    ___  ___  _[m
[31m-# / )(___)(___)  ( \/ )/__\  (  _ \               / __)( )_( )(  _  )( \/\/ )    /__\  / __)/ __)( ___)/ __)/ __) ___(  )  (_  _)/ __)(_  _)  (___)(___)( \[m
[31m-#( (  ___  ___    \  //(__)\  )   / ___  ___  ___ \__ \ ) _ (  )(_)(  )    (    /(__)\( (__( (__  )__) \__ \\__ \(___))(__  _)(_ \__ \  )(     ___  ___  ) )[m
[31m-# \_)(___)(___)    \/(__)(__)(_)\_)(___)(___)(___)(___/(_) (_)(_____)(__/\__)  (__)(__)\___)\___)(____)(___/(___/    (____)(____)(___/ (__)   (___)(___)(_/[m
[31m-#=======================================================================================================================================================[m
[31m-[m
[31m-[m
[32m+[m[32m###=======================================================================================================================================================[m
[32m+[m[32m###  _  ___  ___    _  _  __    ____                 ___  _   _  _____  _    _      __    ___  ___  ____  ___  ___      __    ____  ___  ____    ___  ___  _[m
[32m+[m[32m### / )(___)(___)  ( \/ )/__\  (  _ \               / __)( )_( )(  _  )( \/\/ )    /__\  / __)/ __)( ___)/ __)/ __) ___(  )  (_  _)/ __)(_  _)  (___)(___)( \[m
[32m+[m[32m###( (  ___  ___    \  //(__)\  )   / ___  ___  ___ \__ \ ) _ (  )(_)(  )    (    /(__)\( (__( (__  )__) \__ \\__ \(___))(__  _)(_ \__ \  )(     ___  ___  ) )[m
[32m+[m[32m### \_)(___)(___)    \/(__)(__)(_)\_)(___)(___)(___)(___/(_) (_)(_____)(__/\__)  (__)(__)\___)\___)(____)(___/(___/    (____)(____)(___/ (__)   (___)(___)(_/[m
[32m+[m[32m###=======================================================================================================================================================[m
[32m+[m[32m##[m
[32m+[m[32m##[m
 def VAR_Show_Access_List(t_device, Config_Change, log_folder):[m
[31m-    re_space = re.compile(r'  +') # two or more spaces[m
[31m-    import pandas as pd[m
[31m-    import os[m
     hostname___ = t_device.replace('/','___')[m
[31m-    log_folder = log_folder + '/' + hostname___[m
[32m+[m[32m    log_folder = f"{log_folder}/{hostname___}"[m
     html_folder = log_folder[m
[31m-    text = ('VAR_Show_Access_List @ %s' %hostname___)[m
[32m+[m
[32m+[m[32m    text = f'VAR_Show_Access_List @ {hostname___}'[m
     utils_v2.Text_in_Frame (text, Config_Change, Print_also=1)[m
[32m+[m[32m    start = datetime.datetime.now()[m
[32m+[m[32m    print(f'start time is {start}')[m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'Accessgroup_Dic_by_ACL')[m
[32m+[m[32m    tf_name = f"{log_folder}/VAR_{hostname___}___Accessgroup_Dic_by_ACL"[m
     with shelve.open(tf_name) as shelve_obj: Accessgroup_Dic_by_ACL = shelve_obj['0'][m
 [m
[31m-[m
[31m-    try:[m
[31m-        with open("%s/%s___Show_Access-List.log"%(log_folder,hostname___),'r', encoding='utf-8', errors='ignore') as f:[m
[31m-            t_file = f.readlines()[m
[31m-    except:[m
[31m-        print('file %s/%s___Show_Access-List.log not found! @ CREATE VARIABLES' %(log_folder,hostname___))[m
[31m-        exit(0)[m
[31m-[m
[31m-    Source_ACL_Obj_List = {}    # locale[m
[31m-    Show_run_ACL_NoLog_Lst = [] #locale[m
     Show_ACL_Lines = [][m
     ACL_List_Dict = {}[m
     ACL_List = [][m
     ACL_remark_Lines = [][m
 [m
[31m-    for n in range(1,len(t_file)):[m
[31m-        this_host = ''[m
[31m-        l = t_file[n].rstrip()[m
[31m-        if not l.isascii():[m
[31m-            continue[m
[32m+[m[32m    try:[m
[32m+[m[32m        with open(f"{log_folder}/{hostname___}___Show_Access-List.log", 'r', encoding='utf-8', errors='ignore') as f:[m
[32m+[m[32m            pass[m
[32m+[m[32m    except FileNotFoundError:[m
[32m+[m[32m        print(f'File not found: {log_folder}/{hostname___}___Show_Access-List.log @ CREATE VARIABLES')[m
[32m+[m[32m        sys.exit(f'File not found: {log_folder}/{hostname___}___Show_Access-List.log @ CREATE VARIABLES')[m
[32m+[m[32m    except Exception as e:[m
[32m+[m[32m        print(f'Unexpected error reading ACL file: {e}')[m
[32m+[m[32m        sys.exit(f'Unexpected error reading ACL file: {e}')[m
[32m+[m
[32m+[m[32m    with open(f"{log_folder}/{hostname___}___Show_Access-List.log", 'r', encoding='utf-8', errors='ignore') as f:[m
[32m+[m[32m        for line in f:[m
[32m+[m[32m            l = line.rstrip()[m
[32m+[m[32m            l_parts = l.split()[m
[32m+[m[32m            if not l.isascii():[m
[32m+[m[32m                continue[m
 [m
[31m-        ##re4 = re.compile('^  access-list .* line', re.IGNORECASE)[m
[31m-        if re4.match(l):[m
[31m-            this_ACL = l.split('  access-list ')[1].split()[0][m
[31m-            if this_ACL not in Source_ACL_Obj_List.keys():[m
[31m-                Source_ACL_Obj_List[this_ACL] = [][m
[31m-[m
[31m-            ##re1 = re.compile('(permit|deny) (tcp|icmp|udp|gre|ip|esp|ipsec|ospf)', re.IGNORECASE)[m
[31m-            this_line = re1.sub('', l)[m
[31m-[m
[31m-            if this_line.split(' extended ')[1].split()[0] == 'host':[m
[31m-                this_host = '%s 255.255.255.255' %this_line.split(' host ')[1].split()[0][m
[31m-                if this_host not in Source_ACL_Obj_List[this_ACL]:[m
[31m-                    Source_ACL_Obj_List[this_ACL].append(this_host)[m
[31m-            elif this_line.split(' extended ')[1].split()[0] == 'any':[m
[31m-                this_host = '0.0.0.0 0.0.0.0'[m
[31m-                if this_host not in Source_ACL_Obj_List[this_ACL]:[m
[31m-                    Source_ACL_Obj_List[this_ACL].append(this_host)[m
[31m-            elif (this_line.split(' extended ')[1].split()[0]).count('.') == 3:[m
[31m-                this_host = ('%s %s') %(this_line.split(' extended ')[1].split()[0],this_line.split(' extended ')[1].split()[1])[m
[31m-                if this_host not in Source_ACL_Obj_List[this_ACL]:[m
[31m-                    Source_ACL_Obj_List[this_ACL].append(this_host)[m
[31m-            elif this_line.split(' extended ')[1].split()[0] == 'range':[m
[31m-                first_host = ipaddress.IPv4Address(this_line.split(' extended ')[1].split()[1])[m
[31m-                last_host  = ipaddress.IPv4Address(this_line.split(' extended ')[1].split()[2])[m
[31m-                temp = first_host[m
[31m-                while temp <= last_host:[m
[31m-                    if (str(temp)+' 255.255.255.255') not in Source_ACL_Obj_List[this_ACL]:[m
[31m-                        Source_ACL_Obj_List[this_ACL].append(str(temp)+' 255.255.255.255')[m
[31m-                    temp = temp + 1[m
[31m-            elif this_line.split(' extended ')[1].split()[0] == 'any4':[m
[31m-                this_host = '0.0.0.0 0.0.0.0'[m
[31m-                if this_host not in Source_ACL_Obj_List[this_ACL]:[m
[31m-                    Source_ACL_Obj_List[this_ACL].append(this_host)[m
[31m-            else:[m
[31m-                print ('2. Unhandled exception @ %s' %this_line)[m
[31m-                Config_Change.append(f'Unhandled Exception: {this_line}')[m
[31m-[m
[31m-        ##re11 = re.compile('^access-list .* line \d* extended', re.IGNORECASE)   # seleziona acl extended only[m
[31m-        elif re11.match(l):[m
[31m-            if l.split()[1] not in ACL_List:[m
[31m-                ACL_List.append(l.split()[1])[m
[31m-                Source_ACL_Obj_List[l.split()[1]] = [][m
[31m-            ##re9 = re.compile('\(hitcnt=.*')[m
[31m-            if l.split()[1] in Accessgroup_Dic_by_ACL.keys():[m
[31m-                if 'remark' not in l:[m
[31m-                    Show_ACL_Lines.append(l)[m
[31m-                    if ' inactive' not in l:[m
[31m-                        if (' log ' not in l):[m
[31m-                            Show_run_ACL_NoLog_Lst.append(re9.sub('log',l))[m
[31m-                        elif (' log disable' in l):[m
[31m-                            Show_run_ACL_NoLog_Lst.append('!The following line was having log disabled')[m
[31m-                            temp = (re9.sub('',l)).replace(' log disable ', ' log')[m
[31m-                            Show_run_ACL_NoLog_Lst.append(temp)[m
[31m-[m
[31m-        ##re3 = re.compile('^access-list .* line', re.IGNORECASE) # a questo punto dovrebbero rimanere solo le std acl[m
[31m-        elif re3.match(l):[m
[31m-            if l.split()[1] not in ACL_List:[m
[31m-                ACL_List.append(l.split()[1])[m
[31m-                Source_ACL_Obj_List[l.split()[1]] = [][m
[31m-            if 'remark' in l:[m
[31m-                ACL_remark_Lines.append(l)[m
[31m-[m
[31m-        ##re5 = re.compile(r'^\s*$') # empty line[m
[31m-        elif re5.match(l):[m
[31m-            continue[m
[32m+[m[32m            #re11 = re.compile('^access-list .* line \d* extended', re.IGNORECASE)   # seleziona acl extended only[m
[32m+[m[32m            if re11.match(l):[m
[32m+[m[32m                if l_parts[1] not in ACL_List:[m
[32m+[m[32m                    ACL_List.append(l_parts[1])[m
[32m+[m[32m                if l_parts[1] in Accessgroup_Dic_by_ACL:[m
[32m+[m[32m                    if 'remark' not in l:[m
[32m+[m[32m                        Show_ACL_Lines.append(l)[m
[32m+[m[32m            #re3 = re.compile('^access-list .* line', re.IGNORECASE) # a questo punto dovrebbero rimanere solo le std acl e remark[m
[32m+[m[32m            elif re3.match(l):[m
[32m+[m[32m                if l_parts[1] not in ACL_List:[m
[32m+[m[32m                    ACL_List.append(l_parts[1])[m
[32m+[m[32m                if 'remark' in l:[m
[32m+[m[32m                    ACL_remark_Lines.append(l)[m
[32m+[m
[32m+[m[32m            #re5 = re.compile(r'^\s*$') # empty line[m
[32m+[m[32m            elif re5.match(l):[m
[32m+[m[32m                continue[m
 [m
[31m-        ##re2 = re.compile('access-list .* element', re.IGNORECASE)[m
[31m-        elif re2.match(l):[m
[31m-            continue[m
[32m+[m[32m            #re2 = re.compile('access-list .* element', re.IGNORECASE)[m
[32m+[m[32m            elif re2.match(l):[m
[32m+[m[32m                continue[m
 [m
[31m-        if l.split()[1] in Accessgroup_Dic_by_ACL.keys():[m
[31m-            ##re12 = re.compile('.*access-list .* line \d* extended')[m
[31m-            # remove remark[m
[31m-            if re12.match(l):[m
[31m-                if l.startswith('access-list '):[m
[31m-                    if l not in ACL_List_Dict.keys():[m
[31m-                        if 'object' not in l:[m
[31m-                            ACL_List_Dict[l] = [l][m
[31m-                        else:[m
[31m-                            ACL_List_Dict[l] = [][m
[31m-                        t_Key = l[m
[31m-                        t_ACL_Line = l.split()[3][m
[31m-                elif l.startswith('  access-list'):[m
[31m-                    if l.split()[3] == t_ACL_Line:[m
[31m-                        ACL_List_Dict[t_Key].append(l)[m
[32m+[m[32m            if l_parts[1] in Accessgroup_Dic_by_ACL:[m
[32m+[m[32m                # re12 = re.compile('.*access-list .* line \d* extended')[m
[32m+[m[32m                # remove remark[m
[32m+[m[32m                if re12.match(l):[m
[32m+[m[32m                    if '(inactive)' not in l:[m
[32m+[m[32m                        if l.startswith('access-list '):[m
[32m+[m[32m                            if l not in ACL_List_Dict:[m
[32m+[m[32m                                if 'object' not in l:[m
[32m+[m[32m                                    ACL_List_Dict[l] = [l][m
[32m+[m[32m                                else:[m
[32m+[m[32m                                    ACL_List_Dict[l] = [][m
[32m+[m[32m                                t_Key = l[m
[32m+[m[32m                                t_ACL_Line = l_parts[3][m
[32m+[m[32m                        elif l.startswith('  access-list'):[m
[32m+[m[32m                            if l_parts[3] == t_ACL_Line:[m
[32m+[m[32m                                ACL_List_Dict[t_Key].append(l)[m
 [m
     Show_ACL_Lines_DF = utils_v2.ASA_ACL_to_DF(Show_ACL_Lines)[m
 [m
[36m@@ -640,74 +631,59 @@[m [mdef VAR_Show_Access_List(t_device, Config_Change, log_folder):[m
     Expanded_ACL_List = [] # Expanded_ACL_List = [['X_Lines', 'ACL']][m
     Expanded_ACL_List_bis = [] # Expanded_ACL_List = [['X_Lines', 'Name', 'Line#', 'ACL']][m
     ACL_Expanded_DF =  pd.DataFrame()[m
[31m-    for t_key in ACL_List_Dict.keys():[m
[32m+[m[32m    cols = ['ACL','Name','Line','Type','Action','Service','Source','S_Port','Dest','D_Port','Rest','Inactive','Hitcnt','Hash'][m
[32m+[m[32m    df_list = [][m
[32m+[m[32m    #for t_key in ACL_List_Dict:[m
[32m+[m
[32m+[m[32m    def parse_port(val):[m
[32m+[m[32m        if isinstance(val, str):[m
[32m+[m[32m            parts = val.split()[m
[32m+[m[32m            if val.startswith('range '):[m
[32m+[m[32m                start = parts[1] if parts[1].isdigit() else Port_Converter.get(parts[1], parts[1])[m
[32m+[m[32m                end   = parts[2] if parts[2].isdigit() else Port_Converter.get(parts[2], parts[2])[m
[32m+[m[32m                return [int(start), int(end)][m
[32m+[m[32m            if val.startswith('eq '):[m
[32m+[m[32m                num = parts[1] if parts[1].isdigit() else Port_Converter.get(parts[1], parts[1])[m
[32m+[m[32m                return [int(num)][m
[32m+[m[32m##            else:[m
[32m+[m[32m##                #print('ERROR in VAR line 665 -------------------------- ')[m
[32m+[m[32m##        else:[m
[32m+[m[32m##            #print('ERROR in VAR line 667 --------------------------')[m
[32m+[m[32m        return [val][m
[32m+[m
[32m+[m[32m    for t_key, acl_lines in ACL_List_Dict.items():[m
         if '(inactive)' not in t_key:[m
[31m-            t_N_ACL_Lines_Expanded += len(ACL_List_Dict[t_key])[m
[32m+[m[32m            t_N_ACL_Lines_Expanded += len(acl_lines)[m
 [m
             # Expanded_ACL_List --- start[m
[31m-            if len(ACL_List_Dict[t_key]) >= Max_ACL_Expand_Ratio:[m
[31m-                Expanded_ACL_List.append([len(ACL_List_Dict[t_key]), t_key])[m
[32m+[m[32m            if len(acl_lines) >= Max_ACL_Expand_Ratio:[m
[32m+[m[32m                Expanded_ACL_List.append([len(acl_lines), t_key])[m
                 temp = utils_v2.ASA_ACL_to_DF([t_key])[m
                 t_line_N = int(temp.Line[0].split()[1])[m
[31m-                Expanded_ACL_List_bis.append([len(ACL_List_Dict[t_key]), temp.Name[0], t_line_N, t_key])[m
[31m-                t_N_ACL_Oversize_Expanded = t_N_ACL_Oversize_Expanded + len(ACL_List_Dict[t_key])[m
[32m+[m[32m                Expanded_ACL_List_bis.append([len(acl_lines), temp.Name[0], t_line_N, t_key])[m
[32m+[m[32m                t_N_ACL_Oversize_Expanded += len(acl_lines)[m
             # Expanded_ACL_List --- end[m
 [m
[31m-        t_ACL_Expanded_DF = utils_v2.ASA_ACL_to_DF(ACL_List_Dict[t_key])[m
[31m-        t_ACL_Expanded_DF['Print'] = ''[m
[31m-        t_ACL_Expanded_DF['Root_Key'] = ''[m
[31m-        # convert ip and ports of "t_ACL_Expanded_DF"[m
[31m-        for row1 in t_ACL_Expanded_DF.itertuples():[m
[31m-[m
[31m-            t1 = [row1.ACL, row1.Name, row1.Line, row1.Type, row1.Action, row1.Service, row1.Source, row1.S_Port, row1.Dest, row1.D_Port, row1.Rest, row1.Inactive, row1.Hitcnt, row1.Hash][m
[31m-[m
[31m-            t_ACL_Expanded_DF.at[row1.Index, 'Print'] = re_space.sub(' ',' '.join(t1))[m
[31m-            t_ACL_Expanded_DF.at[row1.Index, 'Root_Key'] = t_key[m
[31m-[m
[31m-            t_ACL_Expanded_DF.at[row1.Index, 'Source'] = utils_v2.ASA_ACL_Obj_to_DecIP(row1.Source)[m
[31m-            t_ACL_Expanded_DF.at[row1.Index, 'Dest'] = utils_v2.ASA_ACL_Obj_to_DecIP(row1.Dest)[m
[31m-            if 'range ' in row1.S_Port:[m
[31m-                if (row1.S_Port.split()[1]).isdigit() == True:[m
[31m-                    Port_Range_Start = row1.S_Port.split()[1][m
[31m-                else:[m
[31m-                    Port_Range_Start = Port_Converter[row1.S_Port.split()[1]][m
[31m-                if (row1.S_Port.split()[2]).isdigit() == True:[m
[31m-                    Port_Range_End = row1.S_Port.split()[2][m
[31m-                else:[m
[31m-                    Port_Range_End = Port_Converter[row1.S_Port.split()[2]][m
[31m-                t_ACL_Expanded_DF.at[row1.Index, 'S_Port'] = [int(Port_Range_Start), int(Port_Range_End)][m
[31m-            elif 'eq ' in row1.S_Port:[m
[31m-                if (row1.S_Port.split()[1]).isdigit() == True:[m
[31m-                    t_ACL_Expanded_DF.at[row1.Index, 'S_Port'] = [int(row1.S_Port.split()[1])][m
[31m-                else:[m
[31m-                    t_ACL_Expanded_DF.at[row1.Index, 'S_Port'] = [int(Port_Converter[row1.S_Port.split()[1]])][m
[31m-            else:[m
[31m-                t_ACL_Expanded_DF.at[row1.Index, 'S_Port'] = [row1.S_Port][m
[31m-[m
[31m-            if 'range ' in row1.D_Port:[m
[31m-                if (row1.D_Port.split()[1]).isdigit() == True:[m
[31m-                    Port_Range_Start = row1.D_Port.split()[1][m
[31m-                else:[m
[31m-                    Port_Range_Start = Port_Converter[row1.D_Port.split()[1]][m
[31m-                if (row1.D_Port.split()[2]).isdigit() == True:[m
[31m-                    Port_Range_End = row1.D_Port.split()[2][m
[31m-                else:[m
[31m-                    Port_Range_End = Port_Converter[row1.D_Port.split()[2]][m
[31m-                t_ACL_Expanded_DF.at[row1.Index, 'D_Port'] = [int(Port_Range_Start), int(Port_Range_End)][m
[31m-            elif 'eq ' in row1.D_Port:[m
[31m-                if (row1.D_Port.split()[1]).isdigit() == True:[m
[31m-                    t_ACL_Expanded_DF.at[row1.Index, 'D_Port'] = [int(row1.D_Port.split()[1])][m
[31m-                else:[m
[31m-                    t_ACL_Expanded_DF.at[row1.Index, 'D_Port'] = [int(Port_Converter[row1.D_Port.split()[1]])][m
[31m-            else:[m
[31m-                t_ACL_Expanded_DF.at[row1.Index, 'D_Port'] = [row1.D_Port][m
[32m+[m[32m        t_ACL_Expanded_DF = utils_v2.ASA_ACL_to_DF(acl_lines)[m
[32m+[m[32m        t_ACL_Expanded_DF['Root_Key'] = t_key[m
[32m+[m[32m        if t_ACL_Expanded_DF.empty:[m
[32m+[m[32m            print("WARNING!!! Some Object in ACL is empty")[m
[32m+[m[32m            print(f'----- {t_key}')[m
[32m+[m[32m            continue[m
 [m
[31m-        ACL_Expanded_DF = pd.concat([ACL_Expanded_DF, t_ACL_Expanded_DF], ignore_index=True)[m
[32m+[m[32m        t_ACL_Expanded_DF['Print'] = (t_ACL_Expanded_DF[cols].astype(str).agg(' '.join, axis=1).str.replace(r'  +', ' ', regex=True))[m
[32m+[m[32m        t_ACL_Expanded_DF['Source'] = t_ACL_Expanded_DF['Source'].apply(utils_v2.ASA_ACL_Obj_to_DecIP)[m
[32m+[m[32m        t_ACL_Expanded_DF['Dest']   = t_ACL_Expanded_DF['Dest'].apply(utils_v2.ASA_ACL_Obj_to_DecIP)[m
[32m+[m[32m        t_ACL_Expanded_DF['S_Port'] = t_ACL_Expanded_DF['S_Port'].apply(parse_port)[m
[32m+[m[32m        t_ACL_Expanded_DF['D_Port'] = t_ACL_Expanded_DF['D_Port'].apply(parse_port)[m
[32m+[m[32m        df_list.append(t_ACL_Expanded_DF)[m
[32m+[m[32m        #ACL_Expanded_DF = pd.concat(df_list, ignore_index=True)[m
[32m+[m[32m    ACL_Expanded_DF = pd.concat(df_list, ignore_index=True)[m
 [m
     t_N_ACL_Oversize =  len(Expanded_ACL_List)[m
     # Expanded_ACL_List --- start[m
     Expanded_ACL_df = pd.DataFrame(Expanded_ACL_List, columns = ['X_Lines' , 'ACL'])[m
[31m-    Expanded_ACL_df = Expanded_ACL_df.sort_values('X_Lines', ascending = (False))[m
[32m+[m[32m    Expanded_ACL_df = Expanded_ACL_df.sort_values('X_Lines', ascending = False)[m
 [m
     # try to split expanded lines......[m
     # MUST be sorted by descending line number[m
[36m@@ -728,10 +704,9 @@[m [mdef VAR_Show_Access_List(t_device, Config_Change, log_folder):[m
     # Expanded_ACL_List --- end[m
 [m
     # Save values in DB @ MY_Devices[m
[31m-    import sqlalchemy as db[m
     DB_Available = True[m
     try:[m
[31m-        engine = db.create_engine("postgresql://%s:%s@%s:%s/%s" % (PostgreSQL_User, PostgreSQL_PW, PostgreSQL_Host, PostgreSQL_Port, db_Name))[m
[32m+[m[32m        engine = db.create_engine(f"postgresql://{PostgreSQL_User}:{PostgreSQL_PW}@{PostgreSQL_Host}:{PostgreSQL_Port}/{db_Name}")[m
         with engine.connect() as connection:[m
             My_Devices = db.Table('My_Devices', db.MetaData(), autoload_with=engine)[m
             ACL_Most_Expanded = db.Table('ACL_Most_Expanded', db.MetaData(), autoload_with=engine)[m
[36m@@ -744,74 +719,76 @@[m [mdef VAR_Show_Access_List(t_device, Config_Change, log_folder):[m
         DB_Available = False[m
 [m
     if DB_Available:[m
[31m-        Updated_Vals = dict([m
[31m-                            N_ACL_Oversize = t_N_ACL_Oversize,[m
[31m-                            N_ACL_Oversize_Expanded = t_N_ACL_Oversize_Expanded,[m
[31m-                            N_ACL_Lines_Expanded = t_N_ACL_Lines_Expanded[m
[31m-                            )[m
[32m+[m[32m        Updated_Vals = {[m
[32m+[m[32m                        "N_ACL_Oversize"            : t_N_ACL_Oversize,[m
[32m+[m[32m                        "N_ACL_Oversize_Expanded"   : t_N_ACL_Oversize_Expanded,[m
[32m+[m[32m                        "N_ACL_Lines_Expanded"      : t_N_ACL_Lines_Expanded[m
[32m+[m[32m                        }[m
         query = db.update(My_Devices).where(My_Devices.c.HostName==hostname___).values(**Updated_Vals)[m
         with engine.begin() as connection:[m
[31m-            results = connection.execute(query)[m
[32m+[m[32m            connection.execute(query)[m
 [m
         delete_stmt = db.delete(ACL_Most_Expanded).where(ACL_Most_Expanded.c.HostName == hostname___)[m
         with engine.begin() as connection:[m
[31m-            result = connection.execute(delete_stmt)[m
[32m+[m[32m            connection.execute(delete_stmt)[m
 [m
         for t_row in Expanded_ACL_df.itertuples():[m
[31m-            Insert_Vals = dict([m
[31m-                            HostName = hostname___,[m
[31m-                            ACL_Line = t_row.ACL,[m
[31m-                            ACL_ELength = t_row.X_Lines[m
[31m-                            )[m
[32m+[m[32m            Insert_Vals = {[m
[32m+[m[32m                            "HostName"      : hostname___,[m
[32m+[m[32m                            "ACL_Line"      : t_row.ACL,[m
[32m+[m[32m                            "ACL_ELength"   : t_row.X_Lines[m
[32m+[m[32m                            }[m
             insert_stmt = ACL_Most_Expanded.insert().values(**Insert_Vals)[m
             with engine.begin() as connection:[m
[31m-                results = connection.execute(insert_stmt)[m
[32m+[m[32m                connection.execute(insert_stmt)[m
 [m
         engine.dispose()[m
 [m
     # OUTPUT HTML FILE[m
[32m+[m
[32m+[m[32m    html_list = [][m
[32m+[m[32m    html_list.append('<div class="card-body">\n')[m
[32m+[m[32m    html_list.append('''[m
[32m+[m[32m       <div style="max-width: 100%; overflow-x: auto;">[m
[32m+[m[32m       <table class="table-bordered table-condensed table-striped w-auto" id="dataTable" cellspacing="0" data-page-length="50" data-order='[[ 0, "desc" ]]' style="table-layout: auto;">[m
[32m+[m[32m       ''')[m
[32m+[m[32m    N_Cols = Expanded_ACL_df.shape[1][m
[32m+[m[32m    html_list.append('       <thead><tr>\n')[m
[32m+[m[32m    for t_col_index in range(0,N_Cols):[m
[32m+[m[32m        html_list.append(f'           <th class="px-2 text-nowrap">{Expanded_ACL_df.columns[t_col_index]}</th>\n')[m
[32m+[m[32m    html_list.append('       </tr></thead>\n')[m
[32m+[m[32m    html_list.append('       <tbody>\n')[m
[32m+[m[32m    for row in Expanded_ACL_df.itertuples():[m
[32m+[m[32m        html_list.append('       <tr>\n')[m
[32m+[m[32m        for t_col_index in range(0,N_Cols):[m
[32m+[m[32m            if t_col_index == N_Cols-1:[m
[32m+[m[32m                t_line = Expanded_ACL_df.iloc[row.Index][t_col_index][m
[32m+[m[32m                t_line = utils_v2.Color_Line(t_line)[m
[32m+[m[32m                html_list.append(f'           <td class="px-2 text-nowrap">{t_line}</td>\n')[m
[32m+[m[32m            else:[m
[32m+[m[32m                html_list.append(f'           <td class="px-2 text-nowrap">{Expanded_ACL_df.iloc[row.Index][t_col_index]}</td>\n')[m
[32m+[m[32m        html_list.append('       </tr>\n')[m
[32m+[m[32m    html_list.append('       </tbody>\n')[m
[32m+[m[32m    html_list.append('   </table>\n')[m
[32m+[m[32m    html_list.append('</div>\n')[m
[32m+[m[32m    html_list.append('</div>\n')[m
[32m+[m
     Watch_FName = hostname___ + '-X_Expanded_ACL-Watch.html'[m
     if not os.path.exists(html_folder):[m
         try:[m
             os.mkdir(html_folder)[m
[31m-        except:[m
[31m-             raise OSError("Can't create destination directory (%s)!" % (html_folder))[m
[32m+[m[32m        except OSError as e:[m
[32m+[m[32m            raise OSError(f"Can't create destination directory ({html_folder})! {e}") from e[m
     try:[m
[31m-        with open("%s/%s"%(html_folder,Watch_FName),mode="w") as html_file:[m
[31m-            html_file.write('<div class="card-body">\n')[m
[31m-            html_file.write('''[m
[31m-               <div style="max-width: 100%; overflow-x: auto;">[m
[31m-               <table class="table-bordered table-condensed table-striped w-auto" id="dataTable" cellspacing="0" data-page-length="50" data-order='[[ 0, "desc" ]]' style="table-layout: auto;">[m
[31m-               ''')[m
[31m-            my_index = 0[m
[31m-            N_Cols = Expanded_ACL_df.shape[1][m
[31m-            html_file.write('       <thead><tr>\n')[m
[31m-            for t_col_index in range(0,N_Cols):[m
[31m-                html_file.write('           <th class="px-2 text-nowrap">%s</th>\n' %Expanded_ACL_df.columns[t_col_index])[m
[31m-            html_file.write('       </tr></thead>\n')[m
[31m-            html_file.write('       <tbody>\n')[m
[31m-            for row in Expanded_ACL_df.itertuples():[m
[31m-                html_file.write('       <tr>\n')[m
[31m-                for t_col_index in range(0,N_Cols):[m
[31m-                    if t_col_index == N_Cols-1:[m
[31m-                        t_line = Expanded_ACL_df.iloc[row.Index][t_col_index][m
[31m-                        t_line = utils_v2.Color_Line(t_line)[m
[31m-                        html_file.write('           <td class="px-2 text-nowrap">%s</td>\n' %t_line)[m
[31m-                    else:[m
[31m-                        html_file.write('           <td class="px-2 text-nowrap">%s</td>\n' %Expanded_ACL_df.iloc[row.Index][t_col_index])[m
[31m-                html_file.write('       </tr>\n')[m
[31m-            html_file.write('       </tbody>\n')[m
[31m-            html_file.write('   </table>\n')[m
[31m-            html_file.write('</div>\n')[m
[31m-            html_file.write('</div>\n')[m
[31m-        print('... saved file "%s/%s" '%(html_folder,Watch_FName))[m
[31m-    except:[m
[31m-        raise OSError("Can't write to destination file (%s/%s)!" % (html_folder,Watch_FName))[m
[32m+[m[32m        with open(f"{html_folder}/{Watch_FName}",mode="w", encoding="utf-8") as html_file:[m
[32m+[m[32m            html_file.write(''.join(html_list))[m
[32m+[m[32m        print(f'... saved file "{html_folder}/{Watch_FName}" ')[m
[32m+[m[32m    except OSError as e:[m
[32m+[m[32m        raise OSError(f"Can't write to destination file ({html_folder}/{Watch_FName})! {e}") from e[m
 [m
     t_html_file = [][m
     t_html_file.append('<div class="card-body">\n')[m
     t_html_file.append('<table class="table-bordered table-condensed table-striped" id="dataTable" width="100%" cellspacing="0" data-page-length="50" >\n')[m
[31m-    my_index = 0[m
     t_html_file.append('''[m
     <style>[m
     p.small {[m
[36m@@ -829,10 +806,10 @@[m [mdef VAR_Show_Access_List(t_device, Config_Change, log_folder):[m
         if row.startswith('<_NO_CODE_>'):[m
             new_line = row.replace('<_NO_CODE_>','')[m
             new_line = new_line.replace(' ','&nbsp;')[m
[31m-            t_html_file.append('              <code class="text-secondary" style="line-height:1.0; font-size: 1rem">%s</code><br>\n' %new_line)[m
[32m+[m[32m            t_html_file.append(f'              <code class="text-secondary" style="line-height:1.0; font-size: 1rem">{new_line}</code><br>\n')[m
         elif row.startswith('<_BTN_>'):[m
             new_line = row.replace('<_BTN_>','')[m
[31m-            t_html_file.append('              %s\n' %new_line)[m
[32m+[m[32m            t_html_file.append(f'              {new_line}\n')[m
         elif '___NEW_LINE_STARTS_HERE__' in row:[m
             t_html_file.append('           <br></td>\n')[m
             t_html_file.append('       </tr>\n')[m
[36m@@ -841,7 +818,7 @@[m [mdef VAR_Show_Access_List(t_device, Config_Change, log_folder):[m
         else:[m
             t_line = row[m
             t_line = utils_v2.Color_Line(t_line)[m
[31m-            t_html_file.append('              %s<br>\n' %t_line)[m
[32m+[m[32m            t_html_file.append(f'              {t_line}<br>\n')[m
     t_html_file.append('           <br></td>\n')[m
     t_html_file.append('       </tr>\n')[m
     t_html_file.append('       </tbody>\n')[m
[36m@@ -850,65 +827,64 @@[m [mdef VAR_Show_Access_List(t_device, Config_Change, log_folder):[m
 [m
     Fix_FName = hostname___ + '-X_Expanded_ACL-Fix.html'[m
     try:[m
[31m-        with open("%s/%s"%(html_folder,Fix_FName), mode="w", encoding="utf-8") as html_file:[m
[32m+[m[32m        with open(f"{html_folder}/{Fix_FName}", mode="w", encoding="utf-8") as html_file:[m
             for t in t_html_file:[m
                 html_file.write(t)[m
[31m-        print('... saved file "%s/%s" '%(html_folder,Fix_FName))[m
[32m+[m[32m        print(f'... saved file "{html_folder}/{Fix_FName}" ')[m
     except:[m
[31m-        raise OSError("Can't write to destination file (%s/%s)!" % (html_folder,Fix_FName))[m
[31m-[m
[32m+[m[32m        raise OSError(f"Can't write to destination file ({html_folder}/{Fix_FName})!")[m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'Show_ACL_Lines')[m
[32m+[m[32m    tf_name = f'{log_folder}/VAR_{hostname___}___Show_ACL_Lines'[m
     err_line = f'Can Not Write File {tf_name} @ VAR_Show_Access_List\n'[m
     retries = utils_v2.Shelve_Write_Try(tf_name,Show_ACL_Lines)[m
     if retries == 3:[m
         print(err_line)[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[32m+[m[32m        with open(f'{Err_folder}/{WTF_Error_FName}',"a+") as f:[m
             f.write(err_line)[m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'Show_ACL_Lines_DF')[m
[32m+[m[32m    tf_name = f'{log_folder}/VAR_{hostname___}___Show_ACL_Lines_DF'[m
     err_line = f'Can Not Write File {tf_name} @ VAR_Show_Access_List\n'[m
     retries = utils_v2.Shelve_Write_Try(tf_name,Show_ACL_Lines_DF)[m
     if retries == 3:[m
         print(err_line)[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[32m+[m[32m        with open(f'{Err_folder}/{WTF_Error_FName}',"a+") as f:[m
             f.write(err_line)[m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'ACL_List_Dict')[m
[32m+[m[32m    tf_name = f'{log_folder}/VAR_{hostname___}___ACL_List_Dict'[m
     err_line = f'Can Not Write File {tf_name} @ VAR_Show_Access_List\n'[m
     retries = utils_v2.Shelve_Write_Try(tf_name,ACL_List_Dict)[m
     if retries == 3:[m
         print(err_line)[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[32m+[m[32m        with open(f'{Err_folder}/{WTF_Error_FName}',"a+") as f:[m
             f.write(err_line)[m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'ACL_List')[m
[32m+[m[32m    tf_name = f'{log_folder}/VAR_{hostname___}___ACL_List'[m
     err_line = f'Can Not Write File {tf_name} @ VAR_Show_Access_List\n'[m
     retries = utils_v2.Shelve_Write_Try(tf_name,ACL_List)[m
     if retries == 3:[m
         print(err_line)[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[32m+[m[32m        with open(f'{Err_folder}/{WTF_Error_FName}',"a+") as f:[m
             f.write(err_line)[m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'ACL_remark_Lines')[m
[32m+[m[32m    tf_name = f'{log_folder}/VAR_{hostname___}___ACL_remark_Lines'[m
     err_line = f'Can Not Write File {tf_name} @ VAR_Show_Access_List\n'[m
     retries = utils_v2.Shelve_Write_Try(tf_name,ACL_remark_Lines)[m
     if retries == 3:[m
         print(err_line)[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[32m+[m[32m        with open(f'{Err_folder}/{WTF_Error_FName}',"a+") as f:[m
             f.write(err_line)[m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'ACL_Expanded_DF')[m
[32m+[m[32m    tf_name = f'{log_folder}/VAR_{hostname___}___ACL_Expanded_DF'[m
     err_line = f'Can Not Write File {tf_name} @ VAR_Show_Access_List\n'[m
[31m-    retries = utils_v2.Shelve_Write_Try(tf_name,ACL_Expanded_DF)[m
[31m-    if retries == 3:[m
[31m-        print(err_line)[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[31m-            f.write(err_line)[m
[32m+[m[32m    for c in ["S_Port", "D_Port", "Source", "Dest"]:[m
[32m+[m[32m        if c in ACL_Expanded_DF.columns:[m
[32m+[m[32m            ACL_Expanded_DF[c] = ACL_Expanded_DF[c].apply(lambda x: json.dumps(x) if isinstance(x, (list, tuple)) else x)[m
[32m+[m[32m    ACL_Expanded_DF.to_feather(f"{tf_name}.feather", compression="zstd")[m
 [m
[32m+[m[32m    end = datetime.datetime.now()[m
[32m+[m[32m    print(f'VAR Show_Access_List elapsed time is: {str(end-start)}')[m
     return Config_Change[m
 [m
[31m-[m
 #===============================================================================================================================[m
 #  _  ___  ___    _  _  __    ____                 ___  _   _  _____  _    _    ____  _____  __  __  ____  ____    ___  ___  _[m
 # / )(___)(___)  ( \/ )/__\  (  _ \               / __)( )_( )(  _  )( \/\/ )  (  _ \(  _  )(  )(  )(_  _)( ___)  (___)(___)( \[m
[36m@@ -917,35 +893,58 @@[m [mdef VAR_Show_Access_List(t_device, Config_Change, log_folder):[m
 #===============================================================================================================================[m
 [m
 def VAR_Show_Route(t_device, Config_Change, log_folder):[m
[31m-    from tabulate import tabulate[m
[31m-    import pandas as pd[m
[31m-    hostname___ = t_device.replace('/','___')[m
[31m-    log_folder = log_folder + '/' + hostname___[m
 [m
[31m-    re_space = re.compile(r'  +') # two or more spaces[m
[31m-    #print('----- VAR Show Route -----')[m
[32m+[m[32m    def safe_ipv4network(net):[m
[32m+[m[32m        try:[m
[32m+[m[32m            return ipaddress.IPv4Network(net)[m
[32m+[m[32m        except:[m
[32m+[m[32m            try:[m
[32m+[m[32m                t_ip_name, t_sm = net.split('/')[m
[32m+[m[32m                t_ip = Name_dic.get(t_ip_name)[m
[32m+[m[32m                if t_ip:[m
[32m+[m[32m                    return ipaddress.IPv4Network(f"{t_ip}/{t_sm}", strict=False)[m
[32m+[m[32m            except:[m
[32m+[m[32m                return None[m
[32m+[m
[32m+[m[32m    hostname___ = t_device.replace('/', '___')[m
[32m+[m[32m    log_folder = f"{log_folder}/{hostname___}"[m
[32m+[m[32m    file_path = f"{log_folder}/{hostname___}___Show_Route.log"[m
[32m+[m
[32m+[m[32m    tf_name = f"{log_folder}/VAR_{hostname___}___Name_dic"[m
[32m+[m[32m    Name_dic = utils_v2.Shelve_Read_Try(tf_name,'')[m
[32m+[m
[32m+[m[32m    text = f'VAR_Show_Route @ {hostname___}'[m
[32m+[m[32m    utils_v2.Text_in_Frame (text, Config_Change, Print_also=1)[m
 [m
     try:[m
[31m-        with open("%s/%s___Show_Route.log"%(log_folder,hostname___),'r', encoding='utf-8', errors='ignore') as f:[m
[32m+[m[32m        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:[m
             t_file = f.readlines()[m
[31m-    except:[m
[31m-        print('file %s/%s___Show_Route.log not found! @ CREATE VARIABLES' %(log_folder,hostname___))[m
[31m-        exit(0)[m
[32m+[m[32m    except FileNotFoundError:[m
[32m+[m[32m        msg = f"File not found: {file_path} @ CREATE VARIABLES"[m
[32m+[m[32m        print(msg)[m
[32m+[m[32m        sys.exit(msg)[m
[32m+[m[32m    except OSError as e:[m
[32m+[m[32m        msg = f"Error opening file {file_path} @ CREATE VARIABLES: {e}"[m
[32m+[m[32m        print(msg)[m
[32m+[m[32m        sys.exit(msg)[m
 [m
     ROUTE = []      # this will be the routing table (local)[m
     t_ROUTE = []    # local[m
[31m-    Prefix1 = ['S   ','R   ','M   ','B   ','D   ','EX   ','O   ','IA   ','N1   ','N2   ','E1   ','E2   ','V   ','i   ','su   ','L1   ','L2   ','ia   ','U   ','o   ','P   '][m
[31m-    Prefix2 = ['S*  ','R*  ','M*  ','B*  ','D*  ','EX*  ','O*  ','IA*  ','N1*  ','N2*  ','E1*  ','E2*  ','V*  ','i*  ','su*  ','L1*  ','L2*  ','ia*  ','U*  ','o*  ','P*  '][m
[31m-    for n in range(1,len(t_file)):[m
[31m-        if ((t_file[n][0:4] in Prefix1) or (t_file[n][0:4] in Prefix2)):[m
[31m-            temp_line = t_file[n][m
[32m+[m[32m    #Prefix1 = ['S   ','R   ','M   ','B   ','D   ','EX   ','O   ','IA   ','N1   ','N2   ','E1   ','E2   ','V   ','i   ','su   ','L1   ','L2   ','ia   ','U   ','o   ','P   '][m
[32m+[m[32m    #Prefix2 = ['S*  ','R*  ','M*  ','B*  ','D*  ','EX*  ','O*  ','IA*  ','N1*  ','N2*  ','E1*  ','E2*  ','V*  ','i*  ','su*  ','L1*  ','L2*  ','ia*  ','U*  ','o*  ','P*  '][m
[32m+[m[32m    Prefix1 = {'S   ','R   ','M   ','B   ','D   ','EX   ','O   ','IA   ','N1   ','N2   ','E1   ','E2   ','V   ','i   ','su   ','L1   ','L2   ','ia   ','U   ','o   ','P   '}[m
[32m+[m[32m    Prefix2 = {p.replace('   ', '*  ') for p in Prefix1}  # auto-build * set[m
[32m+[m
[32m+[m[32m    for n in range(1, len(t_file)):[m
[32m+[m[32m        temp_line = t_file[n].strip()[m
[32m+[m[32m        #temp_line = re_space.sub(' ', temp_line)[m
[32m+[m[32m        prefix = temp_line[0:4][m
[32m+[m[32m        if prefix in Prefix1 or prefix in Prefix2:[m
             if ' connected by VPN ' in t_file[n]:[m
[31m-                temp_line = re_space.sub(' ', temp_line)[m
[31m-                temp_line = temp_line.strip().replace(' connected by VPN (advertised), ', ' ') + ' -'[m
[32m+[m[32m                temp_line = temp_line.replace(' connected by VPN (advertised), ', ' ') + ' -'[m
                 t_ROUTE.append(temp_line)[m
                 continue[m
             elif ' is directly connected, ' in t_file[n]:[m
[31m-                temp_line = re_space.sub(' ', temp_line)[m
                 temp_line = temp_line.replace(' is directly connected, ', ' ') + ' -'[m
                 t_ROUTE.append(temp_line)[m
                 #print(temp_line)[m
[36m@@ -953,63 +952,93 @@[m [mdef VAR_Show_Route(t_device, Config_Change, log_folder):[m
             elif ' via ' in t_file[n]:[m
                 pass[m
             elif ' connected by VPN ' in t_file[n+1]:[m
[31m-                temp_line = re_space.sub(' ', temp_line)[m
[31m-                temp_line = temp_line.strip() + ' ' +t_file[n+1].strip().split()[-1] + ' -'[m
[32m+[m[32m                temp_line = temp_line + ' ' + t_file[n+1].strip().split()[-1] + ' -'[m
                 t_ROUTE.append(temp_line)[m
                 continue[m
             elif ' via ' in t_file[n+1]:[m
[31m-                temp_line = t_file[n].strip() + ' ' + t_file[n+1].strip()[m
[32m+[m[32m                temp_line = temp_line + ' ' + t_file[n+1].strip()[m
             else:[m
[31m-                print ('   =====> Line split to be handled @ line %s' %n)[m
[31m-                exit(2)[m
[32m+[m[32m                print(f'   =====> Line split to be handled @ line {n}')[m
[32m+[m[32m                sys.exit(f'   =====> Line split to be handled @ line {n}')[m
             temp_line = re_space.sub(' ', temp_line)[m
[31m-            temp_line = temp_line.replace(' [1/0] ', ' ')[m
[32m+[m[32m            temp_line = re.sub(r"\s*\[\d+/0\]\s*", " ", temp_line)[m
[32m+[m[32m            #temp_line = temp_line.replace(' [1/0] ', ' ')[m
             temp_line = temp_line.replace(',', '')[m
[31m-            t1 = temp_line[m
[31m-            t1 = t1.split('via')[0][m
[31m-            t2 = temp_line[m
[31m-            t2 = t2.split('via')[1].split()[1][m
[31m-            t3 = temp_line[m
[31m-            t3 = t3.split('via')[1].split()[0][m
[32m+[m[32m            #t1 = temp_line[m
[32m+[m[32m            t1 = temp_line.split('via')[0][m
[32m+[m[32m            #t2 = temp_line[m
[32m+[m[32m            t2 = temp_line.split('via')[1].split()[1][m
[32m+[m[32m            #t3 = temp_line[m
[32m+[m[32m            t3 = temp_line.split('via')[1].split()[0][m
             temp_line = t1 + t2 + ' ' + t3[m
             #print(temp_line)[m
             t_ROUTE.append(temp_line)[m
         elif t_file[n].startswith('C       '):[m
[31m-            temp_line = t_file[n][m
             if ' is directly connected, ' in t_file[n]:[m
[31m-                temp_line = temp_line.strip() + ' -'[m
[32m+[m[32m                temp_line = temp_line + ' -'[m
             elif ' is directly connected, ' in t_file[n+1]:[m
[31m-                temp_line = t_file[n].strip() + ' ' + t_file[n+1].strip() + ' -'[m
[32m+[m[32m                temp_line = temp_line + ' ' + t_file[n+1].strip() + ' -'[m
             else:[m
[31m-                print ('   =====> Line split to be handled @ line %s' %n)[m
[31m-                exit(20)[m
[32m+[m[32m                print(f'   =====> Line split to be handled @ line {n}')[m
[32m+[m[32m                sys.exit(f'   =====> Line split to be handled @ line {n}')[m
             #temp_line = temp_line.replace('        ', ' ')[m
             temp_line = re_space.sub(' ', temp_line)[m
             temp_line = temp_line.replace(' is directly connected, ', ' ')[m
             t_ROUTE.append(temp_line)[m
 [m
[32m+[m[32m    ROUTE = [[m
[32m+[m[32m        [t_device, t0, t1 + Sub_Mask_2[t2], t3, t4][m
[32m+[m[32m        for t0, t1, t2, t3, t4 in (line.split() for line in t_ROUTE)[m
[32m+[m[32m    ][m
[32m+[m[32m    ROUTE_DF = pd.DataFrame(ROUTE, columns=['HostName', 'Type', 'Network', 'Interface', 'NextHop'])[m
[32m+[m[32m    # Vectorized conversion[m
[32m+[m[32m    ROUTE_DF["Network"] = ROUTE_DF["Network"].apply(safe_ipv4network)[m
 [m
[31m-    for n in range(0,len(t_ROUTE)):[m
[31m-        t_line = t_ROUTE[n].split()[m
[31m-        t_SM = Sub_Mask_2[t_line[2]][m
[31m-        t_line[2] = t_line[1]+t_SM[m
[31m-        t_line[1] = t_line[0][m
[31m-        t_line[0] = t_device[m
[31m-        t_ROUTE[n] = t_line[m
[32m+[m[32m    # Handle failed conversions in bulk[m
[32m+[m
[32m+[m[32m    # Save values in DB @ MY_Devices[m
[32m+[m[32m    DB_Available = True[m
[32m+[m[32m    try:[m
[32m+[m[32m        engine = db.create_engine(f"postgresql://{PostgreSQL_User}:{PostgreSQL_PW}@{PostgreSQL_Host}:{PostgreSQL_Port}/{db_Name}")[m
[32m+[m[32m        with engine.connect() as connection:[m
[32m+[m[32m            WTF_Log    = db.Table('WTF_Log',    db.MetaData(), autoload_with=engine)[m
[32m+[m[32m    except Exception as e:[m
[32m+[m[32m        print(f"error is: {e}")[m
[32m+[m[32m        print('=================[ Warning ]==================')[m
[32m+[m[32m        print('DB not connected, some feature is unavailable\n')[m
[32m+[m[32m        Config_Change.append('=================[ Warning ]==================')[m
[32m+[m[32m        Config_Change.append('DB not connected, some feature is unavailable\n')[m
[32m+[m[32m        DB_Available = False[m
[32m+[m
[32m+[m[32m    bad_rows = ROUTE_DF[ROUTE_DF["Network"].isna()][m
[32m+[m[32m    if not bad_rows.empty:[m
[32m+[m[32m        for _, row in bad_rows.iterrows():[m
[32m+[m[32m            msg = f'ERROR 2193 while converting {row.Network} to ipaddress in {t_device}\n'[m
[32m+[m[32m            Config_Change.append(msg)[m
[32m+[m[32m            print(msg)[m
[32m+[m
[32m+[m[32m            log_entry = {[m
[32m+[m[32m                'TimeStamp': datetime.datetime.now().astimezone(),[m
[32m+[m[32m                'Level': 'WARNING',[m
[32m+[m[32m                'Message': msg[m
[32m+[m[32m            }[m
[32m+[m[32m            with engine.begin() as connection:[m
[32m+[m[32m                connection.execute(WTF_Log.insert().values(**log_entry))[m
 [m
[31m-    for n in range(0,len(t_ROUTE)):[m
[31m-        ROUTE.append(t_ROUTE[n])[m
[32m+[m[32m        ROUTE_DF = ROUTE_DF.drop(bad_rows.index)[m
 [m
[31m-    ROUTE_DF = pd.DataFrame(ROUTE, columns = ['HostName' , 'Type', 'Network', 'Interface','NextHop'])[m
[32m+[m[32m    # Vectorized prefix length extraction[m
[32m+[m[32m    ROUTE_DF["PrefixLength"] = ROUTE_DF["Network"].map(lambda net: net.prefixlen)[m
[32m+[m[32m    ROUTE_DF = ROUTE_DF.sort_values(by=['PrefixLength'], ascending=[False]).reset_index(drop=True)[m
 [m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'ROUTE_DF')[m
[32m+[m[32m    tf_name = f"{log_folder}/VAR_{hostname___}___ROUTE_DF"[m
     retries = utils_v2.Shelve_Write_Try(tf_name,ROUTE_DF)[m
     if retries == 3:[m
[31m-        with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[31m-            f.write('Cannot write file %s/VAR_%s___%s! @ VAR_Show_Route\n' %(log_folder,hostname___,'ROUTE_DF'))[m
[31m-            print  ('Cannot write file %s/VAR_%s___%s! @ VAR_Show_Route\n' %(log_folder,hostname___,'ROUTE_DF'))[m
[31m-[m
[32m+[m[32m        with open(f"{Err_folder}/{WTF_Error_FName}", "a+") as f:[m
[32m+[m[32m            msg = f'Cannot write file {tf_name}! @ VAR_Show_Route\n'[m
[32m+[m[32m            f.write(msg)[m
[32m+[m[32m            print(msg)[m
 [m
 #===============================================================================================================================[m
 #  _  ___  ___    _  _  __    ____                 ___  _   _  _____  _    _    _  _    __   ____    ___  ___  _[m
[36m@@ -1019,17 +1048,18 @@[m [mdef VAR_Show_Route(t_device, Config_Change, log_folder):[m
 #===============================================================================================================================[m
 [m
 def VAR_Show_Nat(t_device, Config_Change, log_folder):[m
[31m-    import pandas as pd[m
[31m-    from tabulate import tabulate[m
[32m+[m
     hostname___ = t_device.replace('/','___')[m
[31m-    log_folder = log_folder + '/' + hostname___[m
[32m+[m[32m    log_folder = os.path.join(log_folder, hostname___)[m
 [m
[32m+[m[32m    file_path = os.path.join(log_folder, f"{hostname___}___Show_Nat_Detail.log")[m
     try:[m
[31m-        with open("%s/%s___Show_Nat_Detail.log"%(log_folder,hostname___),'r', encoding='utf-8', errors='ignore') as f:[m
[32m+[m[32m        with open(file_path, "r", encoding="utf-8", errors="ignore") as f:[m
             t_file = f.readlines()[m
[31m-    except:[m
[31m-        print('file %s/%s___Show_Nat_Detail.log not found! @ CREATE VARIABLES' %(log_folder,hostname___))[m
[31m-        exit(0)[m
[32m+[m[32m    except FileNotFoundError:[m
[32m+[m[32m        msg = f"File not found: {file_path} @ CREATE VARIABLES"[m
[32m+[m[32m        print(msg)[m
[32m+[m[32m        sys.exit(msg)[m
 [m
     Show_NAT = [][m
     col_names = ['Section','Line_N','IF_IN','IF_OUT','StaDin','SRC_IP','SNAT_IP','DST_IP','DNAT_IP','service','SRVC','DSRVC','inactive','Direction','DESC','Tr_Hit','Un_Hit','Nat_Line','SRC_Origin','SRC_Natted','DST_Origin','DST_Natted'][m
[36m@@ -1037,11 +1067,6 @@[m [mdef VAR_Show_Nat(t_device, Config_Change, log_folder):[m
     nat_line0 = re.compile(r'^\d* \((.*?)\) to \((.*?)\) source (static|dynamic) ')[m
     nat_line1 = re.compile(r'^ *translate_hits = \d+, untranslate_hits = \d+')[m
 [m
[31m-    SRC_Origin_re = re.compile('Source - Origin: (.*?) Translated')[m
[31m-    SRC_Natted_re = re.compile('Translated: (.*?) Destination - Origin')[m
[31m-    DST_Origin_re = re.compile('Destination - Origin: (.*?) Translated')[m
[31m-    DST_Natted_re = re.compile('Translated: (.*?) Destination - Origin')[m
[31m-[m
     t_Section  = ''[m
     for n in range(1,len(t_file)):[m
         t_Line_N   = ''[m
[36m@@ -1109,7 +1134,7 @@[m [mdef VAR_Show_Nat(t_device, Config_Change, log_folder):[m
                 t_DNAT_IP = line0.split('destination static')[1].split()[1][m
             if ' service ' in line0:[m
                 temp = line0.split(' service ')[1].split()[0][m
[31m-                if temp in Proto_Map.keys():[m
[32m+[m[32m                if temp in Proto_Map:[m
                     t_service = temp[m
                     t_SRVC = line0.split(' service ')[1].split()[1][m
                     t_DSRVC = line0.split(' service ')[1].split()[2][m
[36m@@ -1127,18 +1152,18 @@[m [mdef VAR_Show_Nat(t_device, Config_Change, log_folder):[m
                 t_Tr_Hit = line1.replace(',','').split()[2][m
                 t_Un_Hit = line1.replace(',','').split()[5][m
             else:[m
[31m-                print('nat line counters expected: %s' %line1)[m
[31m-                exit(222)[m
[32m+[m[32m                print(f'nat line counters expected: {line1}')[m
[32m+[m[32m                sys.exit(f'nat line counters expected: {line1}')[m
 [m
             nn=n+2[m
             t_line = ''[m
             line_nn = t_file[nn].strip() # this_line[m
             line_nn = re.sub(' +', ' ',line_nn) # remove more than one space[m
 [m
[31m-            while not(nat_line0.match(line_nn)):[m
[32m+[m[32m            while not nat_line0.match(line_nn):[m
                 if nn == (len(t_file)-1):[m
                     break[m
[31m-                elif('Section' in line_nn):[m
[32m+[m[32m                elif 'Section' in line_nn:[m
                     break[m
                 t_line = t_line.strip() + ', ' + line_nn[m
                 nn+=1[m
[36m@@ -1146,7 +1171,7 @@[m [mdef VAR_Show_Nat(t_device, Config_Change, log_folder):[m
                 line_nn = re.sub(' +', ' ',line_nn) # remove more than one space[m
             t_line = re.sub(' \\(PAT\\)', '',t_line)[m
 [m
[31m-            if ('Destination - Origin:' in t_line):[m
[32m+[m[32m            if 'Destination - Origin:' in t_line:[m
                 try:[m
                     Part1 = t_line.split('Source - Origin:')[1].split('Destination - Origin:')[0][m
                     Part1 = Part1.replace(',',' ').strip()[m
[36m@@ -1162,7 +1187,7 @@[m [mdef VAR_Show_Nat(t_device, Config_Change, log_folder):[m
                             First_IP = First_IP + 1[m
                 except:[m
                     pass[m
[31m-                if ('Service - Origin:' in t_line):[m
[32m+[m[32m                if 'Service - Origin:' in t_line:[m
                     try:[m
                         Part2 = t_line.split('Destination - Origin:')[1].split('Service - Origin:')[0][m
                         Part2 = Part2.replace(',',' ').strip()[m
[36m@@ -1171,7 +1196,7 @@[m [mdef VAR_Show_Nat(t_device, Config_Change, log_folder):[m
                         DST_Natted = Part2.split('Translated:')[1].strip().split()[m
                     except:[m
                         pass[m
[31m-                elif ('Service - Protocol:' in t_line):[m
[32m+[m[32m                elif 'Service - Protocol:' in t_line:[m
                     try:[m
                         Part2 = t_line.split('Destination - Origin:')[1].split('Service - Protocol:')[0][m
                         Part2 = Part2.replace(',',' ').strip()[m
[36m@@ -1181,7 +1206,7 @@[m [mdef VAR_Show_Nat(t_device, Config_Change, log_folder):[m
                     except:[m
                         pass[m
 [m
[31m-            elif ('Service - Protocol:' in t_line):[m
[32m+[m[32m            elif 'Service - Protocol:' in t_line:[m
                 try:[m
                     Part1 = t_line.split('Service - Protocol:')[0][m
                     Part1 = Part1.replace(',',' ').strip()[m
[36m@@ -1197,7 +1222,7 @@[m [mdef VAR_Show_Nat(t_device, Config_Change, log_folder):[m
                             First_IP = First_IP + 1[m
                 except:[m
                     pass[m
[31m-            elif ('Service - Origin:' in t_line):[m
[32m+[m[32m            elif 'Service - Origin:' in t_line:[m
                 try:[m
                     Part1 = t_line.split('Service - Origin:')[0][m
                     Part1 = Part1.replace(',',' ').strip()[m
[36m@@ -1237,13 +1262,12 @@[m [mdef VAR_Show_Nat(t_device, Config_Change, log_folder):[m
     Show_NAT_DF = pd.DataFrame(Show_NAT, columns = col_names)[m
     # delete all nat in Section0[m
     Show_NAT_DF = Show_NAT_DF.query("Section != 0")[m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'Show_NAT_DF')[m
[32m+[m[32m    tf_name = f"{log_folder}/VAR_{hostname___}___Show_NAT_DF"[m
     with shelve.open(tf_name, "c") as shelve_obj: shelve_obj['0'] = Show_NAT_DF[m
 [m
     DB_Available = True[m
[31m-    import sqlalchemy as db[m
     try:[m
[31m-        engine = db.create_engine("postgresql://%s:%s@%s:%s/%s" % (PostgreSQL_User, PostgreSQL_PW, PostgreSQL_Host, PostgreSQL_Port, db_Name))[m
[32m+[m[32m        engine = db.create_engine(f"postgresql://{PostgreSQL_User}:{PostgreSQL_PW}@{PostgreSQL_Host}:{PostgreSQL_Port}/{db_Name}")[m
         with engine.connect() as connection:[m
             My_Devices = db.Table('My_Devices', db.MetaData(), autoload_with=engine)[m
     except Exception as e:[m
[36m@@ -1258,7 +1282,7 @@[m [mdef VAR_Show_Nat(t_device, Config_Change, log_folder):[m
         query = db.update(My_Devices).values(Declared_NAT=len(Show_NAT_DF))[m
         query = query.where(My_Devices.columns.HostName==hostname___)[m
         with engine.begin() as connection:[m
[31m-            results = connection.execute(query)[m
[32m+[m[32m            connection.execute(query)[m
         engine.dispose()[m
 [m
     return Config_Change[m
[36m@@ -1271,18 +1295,18 @@[m [mdef VAR_Show_Nat(t_device, Config_Change, log_folder):[m
 # \_)(___)(___)    \/(__)(__)(_)\_)(___)(___)(___)(___/(_) (_)(_____)(__/\__)(___)\___)(_)\_) (__) (__)   (__) (_____)  (___)(___)(_/[m
 #=====================================================================================================================================[m
 def VAR_Show_Crypto(t_device, Config_Change, log_folder):[m
[31m-    import pandas as pd[m
[31m-    from tabulate import tabulate[m
 [m
     hostname___ = t_device.replace('/','___')[m
[31m-    log_folder = log_folder + '/' + hostname___[m
[32m+[m[32m    log_folder = os.path.join(log_folder, hostname___)[m
 [m
[32m+[m[32m    file_path = os.path.join(log_folder, f"{hostname___}___Show_Crypto_Ipsec_Sa_Entry.log")[m
     try:[m
[31m-        with open("%s/%s___Show_Crypto_Ipsec_Sa_Entry.log"%(log_folder,hostname___),'r', encoding='utf-8', errors='ignore') as f:[m
[32m+[m[32m        with open(file_path, "r", encoding="utf-8", errors="ignore") as f:[m
             t_file = f.readlines()[m
[31m-    except:[m
[31m-        print('file %s/%s___Show_Crypto_Ipsec_Sa_Entry.log not found! @ CREATE VARIABLES' %(log_folder,hostname___))[m
[31m-        exit(0)[m
[32m+[m[32m    except FileNotFoundError:[m
[32m+[m[32m        msg = f"File not found: {file_path} @ CREATE VARIABLES"[m
[32m+[m[32m        print(msg)[m
[32m+[m[32m        sys.exit(msg)[m
 [m
     Show_Crypto = [][m
     col_names = ['Peer_IP', 'Local_IP', 'Crypto_Map', 'ACL', 'Pkts_Encaps','Pkts_Decaps'][m
[36m@@ -1393,7 +1417,6 @@[m [mdef VAR_Show_Ver(t_device, Config_Change, log_folder):[m
             asa_version = n.split('Software Version')[1].strip()[m
 [m
     DB_Available = True[m
[31m-    import sqlalchemy as db[m
     try:[m
         engine = db.create_engine("postgresql://%s:%s@%s:%s/%s" % (PostgreSQL_User, PostgreSQL_PW, PostgreSQL_Host, PostgreSQL_Port, db_Name))[m
         with engine.connect() as connection:[m
[36m@@ -1431,8 +1454,6 @@[m [mdef Split_Large_ACL(ACL_List_Dict, ACL_Line, Max_ACL_Expand_Ratio, log_folder, t[m
     hostname___ = t_device.replace('/','___')[m
     #log_folder = log_folder + '/' + hostname___[m
 [m
[31m-    tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'Declared_Object_List')[m
[31m-    with shelve.open(tf_name) as shelve_obj: Declared_Object_List = shelve_obj['0'][m
     tf_name = f"{log_folder}/VAR_{hostname___}___Declared_Object_List"[m
     Declared_Object_List = utils_v2.Shelve_Read_Try(tf_name,'')[m
     tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'Obejct_by_value_Dict')[m
[36m@@ -1501,12 +1522,12 @@[m [mdef Split_Large_ACL(ACL_List_Dict, ACL_Line, Max_ACL_Expand_Ratio, log_folder, t[m
                 else:[m
                     n = Triggered_Src[0].split()[1][m
                     if 'host ' in Triggered_Src[0]:[m
[31m-                        if n in Obejct_by_value_Dict.keys():[m
[32m+[m[32m                        if n in Obejct_by_value_Dict:[m
                             OK_SRC_List.append('object %s' %Obejct_by_value_Dict[n][0])[m
                         else:[m
                             OK_SRC_List.append('host %s' %n)[m
                     else:[m
[31m-                        if n in Obejct_by_value_Dict.keys():[m
[32m+[m[32m                        if n in Obejct_by_value_Dict:[m
                             OK_SRC_List.append('object %s' %Obejct_by_value_Dict[n][0])[m
                         else:[m
                             OK_SRC_List.append('%s' %Triggered_Src[0])[m
[36m@@ -1527,12 +1548,12 @@[m [mdef Split_Large_ACL(ACL_List_Dict, ACL_Line, Max_ACL_Expand_Ratio, log_folder, t[m
                     else:[m
                         if 'host ' in n:[m
                             n = n.split()[1][m
[31m-                            if n in Obejct_by_value_Dict.keys():[m
[32m+[m[32m                            if n in Obejct_by_value_Dict:[m
                                 Splitted_ACL.append('  network-object object %s' %Obejct_by_value_Dict[n][0])[m
                             else:[m
                                 Splitted_ACL.append('  network-object host %s' %n)[m
                         else:[m
[31m-                            if n in Obejct_by_value_Dict.keys():[m
[32m+[m[32m                            if n in Obejct_by_value_Dict:[m
                                 Splitted_ACL.append('  network-object object %s' %Obejct_by_value_Dict[n][0])[m
                             else:[m
                                 Splitted_ACL.append('  network-object %s' %n)[m
[36m@@ -1545,12 +1566,12 @@[m [mdef Split_Large_ACL(ACL_List_Dict, ACL_Line, Max_ACL_Expand_Ratio, log_folder, t[m
                 else:[m
                     n = Expanded_Src[0].split()[1][m
                     if 'host ' in Expanded_Src[0]:[m
[31m-                        if n in Obejct_by_value_Dict.keys():[m
[32m+[m[32m                        if n in Obejct_by_value_Dict:[m
                             KO_SRC_List.append('object %s' %Obejct_by_value_Dict[n][0])[m
                         else:[m
                             KO_SRC_List.append('host %s' %n)[m
                     else:[m
[31m-                        if n in Obejct_by_value_Dict.keys():[m
[32m+[m[32m                        if n in Obejct_by_value_Dict:[m
                             KO_SRC_List.append('object %s' %Obejct_by_value_Dict[n][0])[m
                         else:[m
                             KO_SRC_List.append('%s' %Expanded_Src[0])[m
[36m@@ -1571,12 +1592,12 @@[m [mdef Split_Large_ACL(ACL_List_Dict, ACL_Line, Max_ACL_Expand_Ratio, log_folder, t[m
                     else:[m
                         if 'host ' in n:[m
                             n = n.split()[1][m
[31m-                            if n in Obejct_by_value_Dict.keys():[m
[32m+[m[32m                            if n in Obejct_by_value_Dict:[m
                                 Splitted_ACL.append('  network-object object %s' %Obejct_by_value_Dict[n][0])[m
                             else:[m
                                 Splitted_ACL.append('  network-object host %s' %n)[m
                         else:[m
[31m-                            if n in Obejct_by_value_Dict.keys():[m
[32m+[m[32m                            if n in Obejct_by_value_Dict:[m
                                 Splitted_ACL.append('  network-object object %s' %Obejct_by_value_Dict[n][0])[m
                             else:[m
                                 Splitted_ACL.append('  network-object %s' %n)[m
[36m@@ -1589,21 +1610,21 @@[m [mdef Split_Large_ACL(ACL_List_Dict, ACL_Line, Max_ACL_Expand_Ratio, log_folder, t[m
                 else:[m
                     n = Triggered_Dst[0].split()[1][m
                     if 'host ' in Triggered_Dst[0]:[m
[31m-                        if n in Obejct_by_value_Dict.keys():[m
[32m+[m[32m                        if n in Obejct_by_value_Dict:[m
                             OK_DST_List.append('object %s' %Obejct_by_value_Dict[n][0])[m
                         else:[m
                             OK_DST_List.append('host %s' %n)[m
                     else:[m
[31m-                        if n in Obejct_by_value_Dict.keys():[m
[32m+[m[32m                        if n in Obejct_by_value_Dict:[m
                             OK_DST_List.append('object %s' %Obejct_by_value_Dict[n][0])[m
                         else:[m
                             OK_DST_List.append('%s' %Triggered_Dst[0])[m
             else:[m
                 T_index = 1[m
[31m-                T_Dst_Name_1 = 'Split_Dst_Obj_%s' %T_index[m
[32m+[m[32m                T_Dst_Name_1 = f'Split_Dst_Obj_{T_index}'[m
                 while T_Dst_Name_1 in Declared_Object_List:[m
                     T_index += 1[m
[31m-                    T_Dst_Name_1 = 'Split_Dst_Obj_%s' %T_index[m
[32m+[m[32m                    T_Dst_Name_1 = f'Split_Dst_Obj_{T_index}'[m
                 else:[m
                     Declared_Object_List.append(T_Dst_Name_1)[m
                 #print('1st Available dst name is %s' %T_Dst_Name_1)[m
[36m@@ -1611,67 +1632,68 @@[m [mdef Split_Large_ACL(ACL_List_Dict, ACL_Line, Max_ACL_Expand_Ratio, log_folder, t[m
                 Splitted_ACL.append('\nobject-group network %s' %T_Dst_Name_1)[m
                 for n in Triggered_Dst:[m
                     if 'any' in n:[m
[31m-                        Splitted_ACL.append('%s' %n)[m
[32m+[m[32m                        Splitted_ACL.append(n)[m
                     else:[m
                         if 'host ' in n:[m
[31m-                            n = n.split()[1][m
[31m-                            if n in Obejct_by_value_Dict.keys():[m
[31m-                                Splitted_ACL.append('  network-object object %s' %Obejct_by_value_Dict[n][0])[m
[32m+[m[32m                            addr = n.split()[1][m
[32m+[m[32m                            if addr in Obejct_by_value_Dict:[m
[32m+[m[32m                                Splitted_ACL.append(f' network-object object {Obejct_by_value_Dict[addr][0]}')[m
                             else:[m
[31m-                                Splitted_ACL.append('  network-object host %s' %n)[m
[32m+[m[32m                                Splitted_ACL.append(f' network-object host {addr}')[m
                         else:[m
[31m-                            if n in Obejct_by_value_Dict.keys():[m
[31m-                                Splitted_ACL.append('  network-object object %s' %Obejct_by_value_Dict[n][0])[m
[32m+[m[32m                            if n in Obejct_by_value_Dict:[m
[32m+[m[32m                                Splitted_ACL.append(f' network-object object {Obejct_by_value_Dict[n][0]}')[m
                             else:[m
[31m-                                Splitted_ACL.append('  network-object %s' %n)[m
[32m+[m[32m                                Splitted_ACL.append(f' network-object {n}')[m
 [m
         KO_DST_List = [][m
         if len(Expanded_Dst) > 0:[m
[32m+[m[32m            dst = Expanded_Dst[0][m
             if len(Expanded_Dst) == 1:[m
[31m-                if 'any' in Expanded_Dst[0]:[m
[31m-                    KO_DST_List.append('%s' %Expanded_Dst[0])[m
[32m+[m[32m                if 'any' in dst:[m
[32m+[m[32m                    KO_DST_List.append(dst)[m
                 else:[m
[31m-                    n = Expanded_Dst[0].split()[1][m
[31m-                    if 'host ' in Expanded_Dst[0]:[m
[31m-                        if n in Obejct_by_value_Dict.keys():[m
[31m-                            KO_DST_List.append('object %s' %Obejct_by_value_Dict[n][0])[m
[31m-                        else:[m
[31m-                            KO_DST_List.append('host %s' %n)[m
[32m+[m[32m                    n = dst.split()[1][m
[32m+[m[32m                    if n in Obejct_by_value_Dict:[m
[32m+[m[32m                        KO_DST_List.append(f'object {Obejct_by_value_Dict[n][0]}')[m
[32m+[m[32m                    elif 'host ' in dst:[m
[32m+[m[32m                        KO_DST_List.append(f'host {n}')[m
                     else:[m
[31m-                        if n in Obejct_by_value_Dict.keys():[m
[31m-                            KO_DST_List.append('object %s' %Obejct_by_value_Dict[n][0])[m
[31m-                        else:[m
[31m-                            KO_DST_List.append('%s' %Expanded_Dst[0])[m
[32m+[m[32m                        KO_DST_List.append(dst)[m
[32m+[m
             else:[m
                 T_index = 1[m
[31m-                T_Dst_Name_2 = 'Split_Dst_Obj_%s' %T_index[m
[32m+[m[32m                T_Dst_Name_2 = f'Split_Dst_Obj_{T_index}'[m
                 while T_Dst_Name_2 in Declared_Object_List:[m
                     T_index += 1[m
[31m-                    T_Dst_Name_2 = 'Split_Dst_Obj_%s' %T_index[m
[32m+[m[32m                    T_Dst_Name_2 = f'Split_Dst_Obj_{T_index}'[m
                 else:[m
                     Declared_Object_List.append(T_Dst_Name_2)[m
                 #print('2nd Available dst name is %s' %T_Dst_Name_2)[m
[31m-                KO_DST_List.append('object-group %s' %T_Dst_Name_2)[m
[31m-                Splitted_ACL.append('\nobject-group network %s' %T_Dst_Name_2)[m
[32m+[m[32m                KO_DST_List.append(f"object-group {T_Dst_Name_2}")[m
[32m+[m[32m                Splitted_ACL.append(f"\nobject-group network {T_Dst_Name_2}")[m
                 for n in Expanded_Dst:[m
                     if 'any' in n:[m
[31m-                        Splitted_ACL.append('%s' %n)[m
[31m-                    else:[m
[31m-                        if 'host ' in n:[m
[31m-                            n = n.split()[1][m
[31m-                            if n in Obejct_by_value_Dict.keys():[m
[31m-                                Splitted_ACL.append('  network-object object %s' %Obejct_by_value_Dict[n][0])[m
[31m-                            else:[m
[31m-                                Splitted_ACL.append('  network-object host %s' %n)[m
[32m+[m[32m                        Splitted_ACL.append(n)[m
[32m+[m[32m                    elif 'host ' in n:[m
[32m+[m[32m                        addr = n.split()[1][m
[32m+[m[32m                        if addr in Obejct_by_value_Dict:[m
[32m+[m[32m                            Splitted_ACL.append(f' network-object object {Obejct_by_value_Dict[addr][0]}')[m
                         else:[m
[31m-                            if n in Obejct_by_value_Dict.keys():[m
[31m-                                Splitted_ACL.append('  network-object object %s' %Obejct_by_value_Dict[n][0])[m
[31m-                            else:[m
[31m-                                Splitted_ACL.append('  network-object %s' %n)[m
[32m+[m[32m                            Splitted_ACL.append(f' network-object host {addr}')[m
[32m+[m[32m                    elif n in Obejct_by_value_Dict:[m
[32m+[m[32m                        Splitted_ACL.append(f' network-object object {Obejct_by_value_Dict[n][0]}')[m
[32m+[m[32m                    else:[m
[32m+[m[32m                        Splitted_ACL.append(f' network-object {n}')[m
 [m
         #---------------------------------------[m
[31m-[m
[32m+[m[32m        valid_services = {'tcp', 'udp', 'ip', 'icmp'}[m
[32m+[m[32m        name = t_ACL_Line_df.Name[0][m
[32m+[m[32m        line = t_ACL_Line_df.Line[0][m
[32m+[m[32m        service = t_ACL_Line_df.Service[0][m
[32m+[m[32m        d_port = t_ACL_Line_df.D_Port[0][m
         Splitted_ACL.append('!')[m
[32m+[m
         for t_OK_SRC_List in OK_SRC_List:[m
             for t_OK_DST_List in OK_DST_List:[m
                 #good lines here (expand ports)[m
[36m@@ -1685,6 +1707,7 @@[m [mdef Split_Large_ACL(ACL_List_Dict, ACL_Line, Max_ACL_Expand_Ratio, log_folder, t[m
                 else:[m
                     for t_Svc_and_Por in Svc_and_Port_List:[m
                         Splitted_ACL.append('access-list %s %s extended permit %s %s %s %s log' %(t_ACL_Line_df.Name[0], t_ACL_Line_df.Line[0], t_Svc_and_Por[0], t_OK_SRC_List, t_KO_DST_List, t_Svc_and_Por[1]))[m
[32m+[m
         for t_KO_SRC_List in KO_SRC_List:[m
             for t_OK_DST_List in OK_DST_List:[m
                 #second bad block[m
[36m@@ -1702,16 +1725,14 @@[m [mdef Split_Large_ACL(ACL_List_Dict, ACL_Line, Max_ACL_Expand_Ratio, log_folder, t[m
                     for t_Svc_and_Por in Svc_and_Port_List:[m
                         Splitted_ACL.append('access-list %s %s extended permit %s %s %s %s log' %(t_ACL_Line_df.Name[0], t_ACL_Line_df.Line[0], t_Svc_and_Por[0], t_KO_SRC_List, t_KO_DST_List, t_Svc_and_Por[1]))[m
 [m
[31m-[m
[31m-[m
         # WARNING if source port in ACL....[m
[31m-[m
[31m-[m
[31m-        tf_name = "%s/VAR_%s___%s"%(log_folder,hostname___,'Declared_Object_List')[m
[31m-        retries = utils_v2.Shelve_Write_Try(tf_name,Declared_Object_List)[m
[32m+[m[32m        tf_name = os.path.join(log_folder, f"VAR_{hostname___}___Declared_Object_List")[m
[32m+[m[32m        retries = utils_v2.Shelve_Write_Try(tf_name, Declared_Object_List)[m
         if retries == 3:[m
[31m-            with open("%s/%s"%(Err_folder,WTF_Error_FName),"a+") as f:[m
[31m-                f.write('Cannot write file %s/VAR_%s___%s! @ Split_Large_ACL\n' %(log_folder,hostname___,'Declared_Object_List'))[m
[32m+[m[32m            err_file = os.path.join(Err_folder, WTF_Error_FName)[m
[32m+[m[32m            err_msg = f"Cannot write file {tf_name}! @ Split_Large_ACL\n"[m
[32m+[m[32m            with open(err_file, "a+", encoding="utf-8") as f:[m
[32m+[m[32m                f.write(err_msg)[m
 [m
         temp_line = [][m
         temp_line.append(t_ACL_Line_df.ACL[0])[m
[1mdiff --git a/app/Scripts/ASA_Test_Connection.py b/app/Scripts/ASA_Test_Connection.py[m
[1mindex b161a7a..9b43e24 100644[m
[1m--- a/app/Scripts/ASA_Test_Connection.py[m
[1m+++ b/app/Scripts/ASA_Test_Connection.py[m
[36m@@ -89,23 +89,6 @@[m [melse:[m
     print("Password not provided for device %s" %d_IP_Address)[m
     Flag_QUIT = True[m
 [m
[31m-##if not d_dev_type is None:[m
[31m-##    t_dev_type = d_dev_type[m
[31m-##    if t_dev_type == 3:[m
[31m-##        t_dev_type = 'cisco_asa'[m
[31m-##    else:[m
[31m-##        print('...ERROR!')[m
[31m-##        print('Device Type "%s" unmanaged' %t_dev_type)[m
[31m-##        Flag_QUIT = True[m
[31m-[m
[31m-#t_Device.append([t_IP_Address, t_Username, t_Password, t_dev_type, d_HostName])[m
[31m-[m
[31m-#if Flag_QUIT == True:[m
[31m-[m
[31m-[m
[31m-[m
[31m-#log_folder = "Output_Log"[m
[31m-#print('Get_ASA_Commands device = %s' %Device)[m
 if Flag_QUIT == False:[m
 [m
     Device_Info = {[m
[1mdiff --git a/app/Scripts/Network_Calc.py b/app/Scripts/Network_Calc.py[m
[1mindex 7cc8680..69cb96b 100644[m
[1m--- a/app/Scripts/Network_Calc.py[m
[1m+++ b/app/Scripts/Network_Calc.py[m
[36m@@ -1,5 +1,15 @@[m
[32m+[m[32m#def NetworkCalc(IP_ADDRESS,SUBNET_MASK)[m
[32m+[m[32m#def wildcard_mask_test (test_octet, acl_octet, acl_wildcard_octet)[m
[32m+[m[32m#def test_octet (acl_octet, acl_wildcard_octet)[m
[32m+[m[32m#def IPv4_to_intList (IpAddr, SubMsk)[m
[32m+[m[32m#def IPv4_to_DecList (IpAddr, SubMsk)[m
[32m+[m[32m#def Is_Overlapping(ip_a, sm_a, ip_b, sm_b)[m
[32m+[m[32m#def Is_Dec_Overlapping(dec_ip_a, dec_ip_b)[m
[32m+[m[32m#def INTv4_to_IPv4 (ip_int)[m
 [m
 import ipaddress[m
[32m+[m[32mimport sys[m
[32m+[m
 ##re1 = re.compile('(permit|deny) (tcp|icmp|udp|gre|ip|esp|ipsec|ospf)', re.IGNORECASE)[m
 ##re2 = re.compile('access-list .* element', re.IGNORECASE)[m
 ##re3 = re.compile('^access-list .* line', re.IGNORECASE)[m
[36m@@ -344,42 +354,6 @@[m [mdef test_octet (acl_octet, acl_wildcard_octet):[m
                 matches.append(test_octet)[m
         return matches[m
 [m
[31m-#=============================================================================================================================[m
[31m-def list_of_matches_acl (acl_address, acl_mask):[m
[31m-    #Pass in the variables of ACL network and wildcard mask[m
[31m-    #eg 10.200.128.0 0.0.0.255[m
[31m-    potential_matches=[][m
[31m-    #Split the incoming parameters into 4 octets[m
[31m-    acl_address_octets = acl_address.split('.')[m
[31m-    for n in range(0,4):[m
[31m-        acl_address_octets[n] = int(acl_address_octets[n])[m
[31m-[m
[31m-    acl_mask_octets = acl_mask.split('.')[m
[31m-    for n in range(0,4):[m
[31m-        acl_mask_octets[n] = int(acl_mask_octets[n])[m
[31m-[m
[31m-    #Test the 1st octet[m
[31m-    matches_octet_1_ref = test_octet(acl_address_octets[0], acl_mask_octets[0])[m
[31m-    #Test the 2nd octet[m
[31m-    matches_octet_2_ref = test_octet(acl_address_octets[1], acl_mask_octets[1])[m
[31m-    #Test the 3rd octet[m
[31m-    matches_octet_3_ref = test_octet(acl_address_octets[2], acl_mask_octets[2])[m
[31m-    #Test the 4th octet[m
[31m-    matches_octet_4_ref = test_octet(acl_address_octets[3], acl_mask_octets[3])[m
[31m-[m
[31m-    #Assemble the list of possible matches[m
[31m-    #Iterating over all options for each octet[m
[31m-    for n1 in matches_octet_1_ref:[m
[31m-        for n2 in matches_octet_2_ref:[m
[31m-            for n3 in matches_octet_3_ref:[m
[31m-                for n4 in matches_octet_4_ref:[m
[31m-                    potential_matches.append(str(n1)+'.'+str(n2)+'.'+str(n3)+'.'+str(n4))[m
[31m-    ip = [][m
[31m-    for m in potential_matches:[m
[31m-        ip.append(ipaddress.ip_address(unicode(m)))[m
[31m-    out = list(ipaddress.collapse_addresses(ip))[m
[31m-    return out[m
[31m-[m
 #=============================================================================================================================[m
 def IPv4_to_intList (IpAddr, SubMsk):[m
     # import Sub_Mask_2[m
[1mdiff --git a/app/Scripts/utils_v2.py b/app/Scripts/utils_v2.py[m
[1mindex 43c26ce..8f7c003 100644[m
[1m--- a/app/Scripts/utils_v2.py[m
[1m+++ b/app/Scripts/utils_v2.py[m
[36m@@ -1,5 +1,25 @@[m
 #!/usr/bin/env python3 @ asacheck config[m
 [m
[32m+[m
[32m+[m[32m#def Get_Args()[m
[32m+[m[32m#def ASA_ACL_to_DF(Show_ACL_Lines)[m
[32m+[m[32m#def t_ASA_ACL_to_DF(Show_ACL_Lines)[m
[32m+[m[32m#def ASA_ACL_to_DF_light(Show_ACL_Lines)[m
[32m+[m[32m#def t_ASA_ACL_to_DF_light(Show_ACL_Lines)[m
[32m+[m[32m#def Text_in_Frame(some_text,OutBuffer=[],Print_also=0)[m
[32m+[m[32m#def ASA_ACL_Obj_to_Net(IN_ACL_Obj)[m
[32m+[m[32m#def ASA_ACL_Obj_to_IP(IN_ACL_Obj)[m
[32m+[m[32m#def ASA_ACL_Obj_to_DecIP(IN_ACL_Obj)[m
[32m+[m[32m#def ASA_NAT_to_DF(Show_NAT_Lines)[m
[32m+[m[32m#def Shelve_Write_Try(tf_name,Temp_Var)[m
[32m+[m[32m#def Shelve_Read_Try(tf_name,Temp_Var)[m
[32m+[m[32m#def File_Save_Try(tf_name,Temp_Var)[m
[32m+[m[32m#def File_Save_Try2(g_DestFileFullName, g_List, g_ErrFileFullName, Config_Change)[m
[32m+[m[32m#def Color_Line(IN_Line)[m
[32m+[m[32m#def Write_Think_File(Think_File_Name, Think_List)[m
[32m+[m[32m#def timedelta_in_months(start_date, end_date)[m
[32m+[m
[32m+[m
 import argparse[m
 import os[m
 import re[m
[36m@@ -11,6 +31,7 @@[m [mimport ipaddress[m
 import shelve[m
 import time[m
 import datetime[m
[32m+[m[32mimport sys[m
 [m
 #=============================================================================================================================[m
 def Get_Args():[m
[36m@@ -31,6 +52,191 @@[m [mdef Get_Args():[m
 [m
 #=============================================================================================================================[m
 def ASA_ACL_to_DF(Show_ACL_Lines):[m
[32m+[m[32m    """[m
[32m+[m[32m    Converts the output from the "show access-list" command lines (list of strings)[m
[32m+[m[32m    into a DataFrame with columns:[m
[32m+[m[32m    ['ACL','Name','Line','Type','Action','Service','Source','S_Port','Dest','D_Port','Rest','Inactive','Hitcnt','Hash'][m
[32m+[m[32m    """[m
[32m+[m
[32m+[m[32m    re_hitcnt = re.compile(r'hitcnt=(\d+)', re.IGNORECASE)[m
[32m+[m[32m    re_inactive = re.compile(r'\binactive\b', re.IGNORECASE)[m
[32m+[m[32m    re_paren_hitcnt = re.compile(r'\(hitcnt=\d*\)')[m
[32m+[m[32m    re_empty_parens = re.compile(r'\(\)')[m
[32m+[m[32m    PRTOTOCOLS = set(['ah','eigrp','esp','gre','icmp','icmp6','igmp','igrp','ip','ipinip','ipsec','nos','ospf','pcp','pim','pptp','sctp','snp','tcp','udp'])[m
[32m+[m
[32m+[m[32m    col_names = ['ACL', 'Name', 'Line', 'Type', 'Action', 'Service', 'Source', 'S_Port','Dest','D_Port','Rest','Inactive','Hitcnt','Hash'][m
[32m+[m[32m    rows = [][m
[32m+[m[32m    for t_Show_ACL_Line in Show_ACL_Lines:[m
[32m+[m
[32m+[m[32m        if ' fqdn ' in t_Show_ACL_Line:[m
[32m+[m[32m            continue[m
[32m+[m[32m        if ' remark ' in t_Show_ACL_Line:[m
[32m+[m[32m            continue[m
[32m+[m[32m        if ' standard ' in t_Show_ACL_Line:[m
[32m+[m[32m            continue[m
[32m+[m[32m        if ' ethertype ' in t_Show_ACL_Line:[m
[32m+[m[32m            continue[m
[32m+[m
[32m+[m[32m        t_item = t_Show_ACL_Line.strip().split()[m
[32m+[m[32m        if t_item[0] == 'access-list':[m
[32m+[m[32m            t_ACL = 'access-list'[m
[32m+[m[32m            t_Name = t_item[1][m
[32m+[m[32m        else:[m
[32m+[m[32m            print(f'This is not an access-list: {t_Show_ACL_Line.strip()}')[m
[32m+[m[32m            #sys.exit(f'This is not an access-list: {t_Show_ACL_Line.strip()}')[m
[32m+[m[32m            continue[m
[32m+[m
[32m+[m[32m        t_Line = f'line {t_item[3]}' if (t_item[2] == 'line') else ''[m
[32m+[m
[32m+[m[32m        t_Type = 'extended' if (t_item[4] == 'extended') else print(f'This is not an extended ACL: {t_Show_ACL_Line.strip()}')[m
[32m+[m
[32m+[m[32m        t_Action = t_item[5] if t_item[5] in ('permit','deny') else print(f'Wrong Action in ACL: {t_Show_ACL_Line.strip()}')[m
[32m+[m
[32m+[m[32m        # SVCS field[m
[32m+[m[32m        if t_item[6] in ('object','object-group'):  #service-object[m
[32m+[m[32m            t_Service = f'{t_item[6]} { t_item[7]}'[m
[32m+[m[32m            pos = 8[m
[32m+[m[32m        elif t_item[6] in PRTOTOCOLS:[m
[32m+[m[32m            t_Service = t_item[6][m
[32m+[m[32m            pos = 7[m
[32m+[m[32m        elif 'host' in t_item[6]: #standard ACL ------------------ not considered[m
[32m+[m[32m            print(f'standard ACL not considered: {t_Show_ACL_Line.strip()}')[m
[32m+[m[32m            continue[m
[32m+[m[32m            #sys.exit(f'standard ACL not considered: {t_Show_ACL_Line.strip()}')[m
[32m+[m[32m        elif t_item[6].isdigit(): #check if is integer[m
[32m+[m[32m            t_Service = t_item[6][m
[32m+[m[32m            pos = 7[m
[32m+[m[32m        else:[m
[32m+[m[32m            print(f'Unhandled service in ACL: {t_Show_ACL_Line.strip()}')[m
[32m+[m[32m            t_Service = ''[m
[32m+[m[32m            pos = 6[m
[32m+[m[32m            #sys.exit(f'Unhandled service in ACL: {t_Show_ACL_Line.strip()}')[m
[32m+[m
[32m+[m[32m        # SRC_IP field[m
[32m+[m[32m        if t_item[pos].count('.') == 3:[m
[32m+[m[32m            t_Source = f'{t_item[pos]} {t_item[pos+1]}'[m
[32m+[m[32m            pos = pos+2[m
[32m+[m[32m        elif 'host' in t_item[pos]:[m
[32m+[m[32m            t_Source = f'host {t_item[pos+1]}'[m
[32m+[m[32m            pos = pos+2[m
[32m+[m[32m        elif ( (t_item[pos]=='object') or (t_item[pos]=='object-group') ):[m
[32m+[m[32m            t_Source = f'{t_item[pos]} {t_item[pos+1]}'[m
[32m+[m[32m            pos = pos+2[m
[32m+[m[32m        elif 'any' in t_item[pos]:[m
[32m+[m[32m            t_Source = t_item[pos][m
[32m+[m[32m            pos = pos+1[m
[32m+[m[32m        elif t_item[pos] == 'range': # range nel SRC ip[m
[32m+[m[32m            if t_item[pos+1].count('.') == 3:[m
[32m+[m[32m                t_Source = f'range {t_item[pos+1]} {t_item[pos+2]}'[m
[32m+[m[32m                pos = pos+3[m
[32m+[m[32m        elif '::' in t_item[pos]: #IPv6[m
[32m+[m[32m            t_Source = f'{t_item[pos]}'[m
[32m+[m[32m            pos = pos+1[m
[32m+[m[32m        else:[m
[32m+[m[32m            print(f'--- BAD Unhandled SRC {t_item[pos]} in ACL: {t_Show_ACL_Line.strip()}')[m
[32m+[m[32m            t_Source = ''[m
[32m+[m[32m            #exit(f'--- BAD Unhandled SRC {t_item[pos]} in ACL: {t_Show_ACL_Line.strip()}')[m
[32m+[m
[32m+[m[32m        # Check S_Port if used[m
[32m+[m[32m        Skip_Dst_IP = False[m
[32m+[m[32m        if t_item[pos] in ['eq','gt','lt','neq']:[m
[32m+[m[32m            t_S_Port = f'{t_item[pos]} {t_item[pos+1]}'[m
[32m+[m[32m            pos = pos+2[m
[32m+[m[32m        elif t_item[pos] == 'range': # source port range[m
[32m+[m[32m            if t_item[pos+1].count('.') == 3:[m
[32m+[m[32m                t_Dest = f'range {t_item[pos+1]} {t_item[pos+2]}'[m
[32m+[m[32m                t_S_Port = ''[m
[32m+[m[32m                pos = pos+3[m
[32m+[m[32m                Skip_Dst_IP = True[m
[32m+[m[32m            else:[m
[32m+[m[32m                t_S_Port = f'range {t_item[pos+1]} {t_item[pos+2]}'[m
[32m+[m[32m                pos = pos+3[m
[32m+[m[32m        else:[m
[32m+[m[32m            t_S_Port = ''[m
[32m+[m
[32m+[m[32m        # DST_IP field[m
[32m+[m[32m        if Skip_Dst_IP == True:[m
[32m+[m[32m            pass[m
[32m+[m[32m        else:[m
[32m+[m[32m            if t_item[pos].count('.') == 3:[m
[32m+[m[32m                t_Dest = f'{t_item[pos]} {t_item[pos+1]}'[m
[32m+[m[32m                pos = pos+2[m
[32m+[m[32m            elif 'host' in t_item[pos]:[m
[32m+[m[32m                t_Dest = f'host {t_item[pos+1]}'[m
[32m+[m[32m                pos = pos+2[m
[32m+[m[32m            elif ( (t_item[pos]=='object') or (t_item[pos]=='object-group') ):[m
[32m+[m[32m                t_Dest = f'{t_item[pos]} {t_item[pos+1]}'[m
[32m+[m[32m                pos = pos+2[m
[32m+[m[32m            elif 'any' in t_item[pos]:[m
[32m+[m[32m                t_Dest = t_item[pos][m
[32m+[m[32m                pos = pos+1[m
[32m+[m[32m            elif t_item[pos] == 'range': # range nel DST ip[m
[32m+[m[32m                t_Dest = f'range {t_item[pos+1]} {t_item[pos+2]}'[m
[32m+[m[32m                pos = pos+3[m
[32m+[m[32m            elif '::' in t_item[pos]: #IPv6[m
[32m+[m[32m                t_Dest = f'{t_item[pos]}'[m
[32m+[m[32m                pos = pos+1[m
[32m+[m[32m            else:[m
[32m+[m[32m                print(f't_Dest: Unhandled DST {t_item[pos]} in ACL: {t_Show_ACL_Line.strip()}')[m
[32m+[m[32m                t_Dest = ''[m
[32m+[m
[32m+[m[32m        # Check D_Port if used[m
[32m+[m[32m        if t_item[pos] in ['eq','gt','lt','neq']:[m
[32m+[m[32m            t_D_Port = f'{t_item[pos]} {t_item[pos+1]}'[m
[32m+[m[32m            pos = pos+2[m
[32m+[m[32m        elif t_item[pos] == 'range': # dest port range[m
[32m+[m[32m            if t_item[pos].count('.') == 3:[m
[32m+[m[32m                print(f'_____This {t_item[pos]} Should Not Happen: {t_Show_ACL_Line.strip()}')[m
[32m+[m[32m                continue[m
[32m+[m[32m            else:[m
[32m+[m[32m                t_D_Port = f'range {t_item[pos+1]} {t_item[pos+2]}'[m
[32m+[m[32m                pos = pos+3[m
[32m+[m[32m        elif ( (t_item[pos]=='object') or (t_item[pos]=='object-group') ):[m
[32m+[m[32m            t_D_Port = f'{t_item[pos]} {t_item[pos+1]}'[m
[32m+[m[32m            pos = pos+2[m
[32m+[m[32m        else:[m
[32m+[m[32m            t_D_Port = ''[m
[32m+[m
[32m+[m[32m        t_Hash = t_item[-1][m
[32m+[m[32m        t_rest = ' '.join(t_item[pos:-1])[m
[32m+[m[32m        try:[m
[32m+[m[32m            t_Hitcnt = str(re_hitcnt.search(t_rest)[0].split('=')[1])[m
[32m+[m[32m        except:[m
[32m+[m[32m            print(f'_____This {t_rest} Should Not Happen: {t_Show_ACL_Line.strip()}')[m
[32m+[m[32m            continue[m
[32m+[m[32m        try:[m
[32m+[m[32m            t_Inactive = re_inactive.search(t_rest)[0][m
[32m+[m[32m        except:[m
[32m+[m[32m            t_Inactive = ''[m
[32m+[m
[32m+[m[32m        t_rest = re_paren_hitcnt.sub('', t_rest)[m
[32m+[m[32m        t_rest = re_inactive.sub('', t_rest)[m
[32m+[m[32m        t_rest = (re_empty_parens.sub('', t_rest)).strip()[m
[32m+[m[32m        t_Rest = t_rest[m
[32m+[m
[32m+[m[32m        row = [[m
[32m+[m[32m            t_ACL,        # ACL[m
[32m+[m[32m            t_Name,       # Name[m
[32m+[m[32m            t_Line,       # Line[m
[32m+[m[32m            t_Type,       # Type[m
[32m+[m[32m            t_Action,     # Action[m
[32m+[m[32m            t_Service,    # Service[m
[32m+[m[32m            t_Source,     # Source[m
[32m+[m[32m            t_S_Port,     # S_Port[m
[32m+[m[32m            t_Dest,       # Dest[m
[32m+[m[32m            t_D_Port,     # D_Port[m
[32m+[m[32m            t_Rest,       # Rest[m
[32m+[m[32m            t_Inactive,   # Inactive[m
[32m+[m[32m            t_Hitcnt,     # Hitcnt[m
[32m+[m[32m            t_Hash        # Hash[m
[32m+[m[32m        ][m
[32m+[m[32m        rows.append(row)[m
[32m+[m
[32m+[m[32m    a = pd.DataFrame(rows, columns=col_names)[m
[32m+[m[32m    return a[m
[32m+[m
[32m+[m[32m#=============================================================================================================================[m
[32m+[m[32mdef t_ASA_ACL_to_DF(Show_ACL_Lines):[m
     """[m
     Converts the output from the "show access-list" command in a DataFrame[m
     ##re3 = re.compile('^access-list .* line', re.IGNORECASE)[m
[36m@@ -40,7 +246,6 @@[m [mdef ASA_ACL_to_DF(Show_ACL_Lines):[m
     re1 = re.compile(r'hitcnt=\d*', re.IGNORECASE)[m
     re2 = re.compile(r'inactive', re.IGNORECASE)[m
     re10 = re.compile(r'\(hitcnt=\d*\)')[m
[31m-    re11 = re.compile(r'inactive')[m
     re12 = re.compile(r'\(\)')[m
     temp_list = [][m
     for n in Show_ACL_Lines:[m
[36m@@ -168,22 +373,157 @@[m [mdef ASA_ACL_to_DF(Show_ACL_Lines):[m
             t_inactive = ''[m
         t_rest = ' '.join(t_rest.split(' ')[:-1])[m
         t_rest = re10.sub('', t_rest)[m
[31m-        t_rest = re11.sub('', t_rest)[m
[32m+[m[32m        t_rest = re2.sub('', t_rest)[m
         t_rest = (re12.sub('', t_rest)).strip()[m
         temp_list[n][-1] = t_rest[m
         temp_list[n].append(t_inactive)[m
         temp_list[n].append(t_hitcnt)[m
         temp_list[n].append(t_hash)[m
     a = pd.DataFrame(temp_list, columns = col_names)[m
[32m+[m[32m##    print(list(temp_list))[m
 [m
     return a[m
 [m
[31m-[m
 #=============================================================================================================================[m
 def ASA_ACL_to_DF_light(Show_ACL_Lines):[m
     """[m
[31m-    Converts the output from the "show access-list" negletging from the command in a DataFrame[m
[31m-    ##re3 = re.compile('^access-list .* line', re.IGNORECASE)[m
[32m+[m[32m    Converts the output from the "show access-list" command lines (list of strings)[m
[32m+[m[32m    into a DataFrame with columns:[m
[32m+[m[32m    ['ACL','Name','Line','Type','Action','Service','Source','S_Port','Dest','Rest'][m
[32m+[m[32m    """[m
[32m+[m[32m    PRTOTOCOLS = set(['ah','eigrp','esp','gre','icmp','icmp6','igmp','igrp','ip','ipinip','ipsec','nos','ospf','pcp','pim','pptp','sctp','snp','tcp','udp'])[m
[32m+[m[32m    col_names = ['ACL', 'Name', 'Line', 'Type', 'Action', 'Service', 'Source', 'S_Port','Dest','Rest'][m
[32m+[m[32m    rows = [][m
[32m+[m[32m    for t_Show_ACL_Line in Show_ACL_Lines:[m
[32m+[m[32m        if ' fqdn ' in t_Show_ACL_Line:[m
[32m+[m[32m            continue[m
[32m+[m[32m        if ' remark ' in t_Show_ACL_Line:[m
[32m+[m[32m            continue[m
[32m+[m[32m        if ' standard ' in t_Show_ACL_Line:[m
[32m+[m[32m            continue[m
[32m+[m[32m        if ' ethertype ' in t_Show_ACL_Line:[m
[32m+[m[32m            continue[m
[32m+[m
[32m+[m[32m        t_item = t_Show_ACL_Line.strip().split()[m
[32m+[m[32m        if t_item[0] == 'access-list':[m
[32m+[m[32m            t_ACL = 'access-list'[m
[32m+[m[32m            t_Name = t_item[1][m
[32m+[m[32m        else:[m
[32m+[m[32m            print(f'This is not an access-list: {t_Show_ACL_Line.strip()}')[m
[32m+[m[32m            #sys.exit(f'This is not an access-list: {t_Show_ACL_Line.strip()}')[m
[32m+[m[32m            continue[m
[32m+[m
[32m+[m[32m        t_Line = f'line {t_item[3]}' if (t_item[2] == 'line') else ''[m
[32m+[m
[32m+[m[32m        t_Type = 'extended' if (t_item[4] == 'extended') else print(f'This is not an extended ACL: {t_Show_ACL_Line.strip()}')[m
[32m+[m
[32m+[m[32m        t_Action = t_item[5] if t_item[5] in ('permit','deny') else print(f'Wrong Action in ACL: {t_Show_ACL_Line.strip()}')[m
[32m+[m
[32m+[m[32m        # SVCS field[m
[32m+[m[32m        if t_item[6] in ('object','object-group'):  #service-object[m
[32m+[m[32m            t_Service = f'{t_item[6]} { t_item[7]}'[m
[32m+[m[32m            pos = 8[m
[32m+[m[32m        elif t_item[6] in PRTOTOCOLS:[m
[32m+[m[32m            t_Service = t_item[6][m
[32m+[m[32m            pos = 7[m
[32m+[m[32m        elif 'host' in t_item[6]: #standard ACL ------------------ not considered[m
[32m+[m[32m            print(f'standard ACL not considered: {t_Show_ACL_Line.strip()}')[m
[32m+[m[32m            continue[m
[32m+[m[32m            #sys.exit(f'standard ACL not considered: {t_Show_ACL_Line.strip()}')[m
[32m+[m[32m        elif t_item[6].isdigit(): #check if is integer[m
[32m+[m[32m            t_Service = t_item[6][m
[32m+[m[32m            pos = 7[m
[32m+[m[32m        else:[m
[32m+[m[32m            print(f'Unhandled service in ACL: {t_Show_ACL_Line.strip()}')[m
[32m+[m[32m            t_Service = ''[m
[32m+[m[32m            pos = 6[m
[32m+[m[32m            #sys.exit(f'Unhandled service in ACL: {t_Show_ACL_Line.strip()}')[m
[32m+[m
[32m+[m[32m        # SRC_IP field[m
[32m+[m[32m        if t_item[pos].count('.') == 3:[m
[32m+[m[32m            t_Source = f'{t_item[pos]} {t_item[pos+1]}'[m
[32m+[m[32m            pos = pos+2[m
[32m+[m[32m        elif 'host' in t_item[pos]:[m
[32m+[m[32m            t_Source = f'host {t_item[pos+1]}'[m
[32m+[m[32m            pos = pos+2[m
[32m+[m[32m        elif ( (t_item[pos]=='object') or (t_item[pos]=='object-group') ):[m
[32m+[m[32m            t_Source = f'{t_item[pos]} {t_item[pos+1]}'[m
[32m+[m[32m            pos = pos+2[m
[32m+[m[32m        elif 'any' in t_item[pos]:[m
[32m+[m[32m            t_Source = t_item[pos][m
[32m+[m[32m            pos = pos+1[m
[32m+[m[32m        elif t_item[pos] == 'range': # range nel SRC ip[m
[32m+[m[32m            if t_item[pos+1].count('.') == 3:[m
[32m+[m[32m                t_Source = f'range {t_item[pos+1]} {t_item[pos+2]}'[m
[32m+[m[32m                pos = pos+3[m
[32m+[m[32m        else:[m
[32m+[m[32m            print(f'--- BAD Unhandled SRC {t_item[pos]} in ACL: {t_Show_ACL_Line.strip()}')[m
[32m+[m[32m            #t_Source = ''[m
[32m+[m[32m            exit(f'--- BAD Unhandled SRC {t_item[pos]} in ACL: {t_Show_ACL_Line.strip()}')[m
[32m+[m
[32m+[m[32m        # Check S_Port if used[m
[32m+[m[32m        Skip_Dst_IP = False[m
[32m+[m[32m        if t_item[pos] in ['eq','gt','lt','neq']:[m
[32m+[m[32m            t_S_Port = f'{t_item[pos]} {t_item[pos+1]}'[m
[32m+[m[32m            pos = pos+2[m
[32m+[m[32m        elif t_item[pos] == 'range': # source port range[m
[32m+[m[32m            if t_item[pos+1].count('.') == 3:[m
[32m+[m[32m                t_Dest = f'range {t_item[pos+1]} {t_item[pos+2]}'[m
[32m+[m[32m                t_S_Port = ''[m
[32m+[m[32m                pos = pos+3[m
[32m+[m[32m                Skip_Dst_IP = True[m
[32m+[m[32m            else:[m
[32m+[m[32m                t_S_Port = f'range {t_item[pos+1]} {t_item[pos+2]}'[m
[32m+[m[32m                pos = pos+3[m
[32m+[m[32m        else:[m
[32m+[m[32m            t_S_Port = ''[m
[32m+[m
[32m+[m[32m        # DST_IP field[m
[32m+[m[32m        if Skip_Dst_IP == True:[m
[32m+[m[32m            pass[m
[32m+[m[32m        else:[m
[32m+[m[32m            if t_item[pos].count('.') == 3:[m
[32m+[m[32m                t_Dest = f'{t_item[pos]} {t_item[pos+1]}'[m
[32m+[m[32m                pos = pos+2[m
[32m+[m[32m            elif 'host' in t_item[pos]:[m
[32m+[m[32m                t_Dest = f'host {t_item[pos+1]}'[m
[32m+[m[32m                pos = pos+2[m
[32m+[m[32m            elif ( (t_item[pos]=='object') or (t_item[pos]=='object-group') ):[m
[32m+[m[32m                t_Dest = f'{t_item[pos]} {t_item[pos+1]}'[m
[32m+[m[32m                pos = pos+2[m
[32m+[m[32m            elif 'any' in t_item[pos]:[m
[32m+[m[32m                t_Dest = t_item[pos][m
[32m+[m[32m                pos = pos+1[m
[32m+[m[32m            elif t_item[pos] == 'range': # range nel DST ip[m
[32m+[m[32m                t_Dest = f'range {t_item[pos+1]} {t_item[pos+2]}'[m
[32m+[m[32m                pos = pos+3[m
[32m+[m[32m            else:[m
[32m+[m[32m                print(f't_Dest: Unhandled DST {t_item[pos]} in ACL: {t_Show_ACL_Line.strip()}')[m
[32m+[m[32m                t_Dest = ''[m
[32m+[m
[32m+[m[32m        t_rest = ' '.join(t_item[pos:])[m
[32m+[m[32m        t_Rest = t_rest[m
[32m+[m
[32m+[m[32m        row = [[m
[32m+[m[32m            t_ACL,        # ACL[m
[32m+[m[32m            t_Name,       # Name[m
[32m+[m[32m            t_Line,       # Line[m
[32m+[m[32m            t_Type,       # Type[m
[32m+[m[32m            t_Action,     # Action[m
[32m+[m[32m            t_Service,    # Service[m
[32m+[m[32m            t_Source,     # Source[m
[32m+[m[32m            t_S_Port,     # S_Port[m
[32m+[m[32m            t_Dest,       # Dest[m
[32m+[m[32m            t_Rest,       # Rest[m
[32m+[m[32m        ][m
[32m+[m[32m        rows.append(row)[m
[32m+[m
[32m+[m[32m    a = pd.DataFrame(rows, columns=col_names)[m
[32m+[m[32m    return a[m
[32m+[m[32m#=============================================================================================================================[m
[32m+[m[32mdef t_ASA_ACL_to_DF_light(Show_ACL_Lines):[m
[32m+[m[32m    """[m
[32m+[m[32m    Converts the output from the "show access-list" neglegting from the command in a DataFrame[m
     'Rest' = 'D_Port','Rest','Inactive','Hitcnt','Hash'[m
     """[m
 [m
[1mdiff --git a/app/models.py b/app/models.py[m
[1mindex 1e9b880..1210700 100644[m
[1m--- a/app/models.py[m
[1m+++ b/app/models.py[m
[36m@@ -595,7 +595,10 @@[m [mclass Bad_News(models.Model):[m
     def __str__(self):[m
         #return self.HostName[m
         return '%s | %s | %s' % (self.HostName, self.Tmiestamp, self.Content)[m
[31m-    [m
[32m+[m
[32m+[m[32m    def t_Tmiestamp(self):[m
[32m+[m[32m        return self.Tmiestamp.strftime("%Y-%m-%d")[m
[32m+[m
     @classmethod[m
     def has_bad_news(cls):[m
         return cls.objects.filter(Flag=True).exists()[m
[1mdiff --git a/app/templates/badnews.html b/app/templates/badnews.html[m
[1mindex 7929081..e752a45 100644[m
[1m--- a/app/templates/badnews.html[m
[1m+++ b/app/templates/badnews.html[m
[36m@@ -72,32 +72,33 @@[m
                 });[m
             </script>             [m
             <div class="card-body">[m
[31m-                <table class="table-bordered table-condensed table-striped" id="dataTable" width="100%" cellspacing="0" data-order='[[ 1, "asc" ]]' data-page-length="100">[m
[32m+[m[32m                <div style="max-width: 100%; overflow-x: auto;">[m
[32m+[m[32m                <table class="table-bordered table-condensed table-striped w-auto" id="dataTable" width="100%" cellspacing="0" data-order='[[ 1, "desc" ]]' data-page-length="100">[m
                     <thead>[m
                         <tr>[m
[31m-                            <th data-toggle="tooltip" title="Hostname">Hostname</th>[m
[31m-                            <th data-toggle="tooltip" title="TimeStamp">TimeStamp &nbsp;<i class="far fa-calendar-alt text-primary"></i></th>[m
[31m-                            <th data-toggle="tooltip" title="Command Line">Command Line</th>[m
[31m-                            <th data-toggle="tooltip" title="Flag">Flag &nbsp;<i class="far fa-check-square text-primary"></i></th>[m
[32m+[m[32m                            <th class="px-2 text-nowrap" data-toggle="tooltip" title="Hostname">Hostname</th>[m
[32m+[m[32m                            <th class="px-2 text-nowrap" data-toggle="tooltip" title="TimeStamp">TimeStamp &nbsp;<i class="far fa-calendar-alt text-primary"></i></th>[m
[32m+[m[32m                            <th class="px-2 text-nowrap" data-toggle="tooltip" title="Flag">Flag &nbsp;<i class="far fa-check-square text-primary"></i></th>[m
[32m+[m[32m                            <th class="px-2 text-nowrap" data-toggle="tooltip" title="Command Line">Command Line</th>[m
                         </tr>[m
                     </thead>[m
                     <tbody>[m
                        [m
                         {% for t_line in My_Bad_News %}[m
                             <tr>[m
[31m-                                <td>[m
[32m+[m[32m                                <td class="px-2 text-nowrap">[m
                                     {{ t_line.HostName }}[m
 [m
                                 </td>[m
[31m-                                <td>{{ t_line.Tmiestamp }}</td>[m
[31m-                                <td>{{ t_line.Content|safe }}</td>[m
[31m-                                <td>{{ t_line.Flag|safe }}</td>[m
[31m-                               [m
[32m+[m[32m                                <td class="px-2 text-nowrap">{{ t_line.t_Tmiestamp }}</td>[m
[32m+[m[32m                                <td class="px-2 text-nowrap">{{ t_line.Flag|safe }}</td>[m
[32m+[m[32m                                <td class="px-2 text-nowrap">{{ t_line.Content|safe }}</td>[m
                             </tr>[m
                         {% endfor %}[m
 [m
                     </tbody>[m
                 </table>[m
[32m+[m[32m                </div>[m
                 <script>[m
                     $(document).ready(function() {[m
                         $('#dataTable').DataTable({[m
[1mdiff --git a/app/templates/dashboard.html b/app/templates/dashboard.html[m
[1mindex 06176b0..f3a5d3c 100644[m
[1m--- a/app/templates/dashboard.html[m
[1m+++ b/app/templates/dashboard.html[m
[36m@@ -541,25 +541,25 @@[m
                                 </div>[m
                                 <div class="col-9">[m
 [m
[31m-                                    {% if This_Device.Prct_N_ACL_HitCnt_Zero < 8 %}[m
[32m+[m[32m                                    {% if This_Device.Prct_N_ACL_HitCnt_Zero_toDel < 8 %}[m
                                     <a href="{% url 'deltahitcnt0acl' FW_NAME %}" class="btn btn-success btn-icon-split">[m
                                         <span class="icon text-white-50">Delta HitCnt = 0</span>[m
[31m-                                        <span class="text">{{This_Device.Prct_N_ACL_HitCnt_Zero}}%</span>[m
[32m+[m[32m                                        <span class="text">{{This_Device.Prct_N_ACL_HitCnt_Zero_toDel}}%</span>[m
                                     </a>[m
[31m-                                    {%  elif This_Device.Prct_N_ACL_HitCnt_Zero < 24 %}[m
[32m+[m[32m                                    {%  elif This_Device.Prct_N_ACL_HitCnt_Zero_toDel < 24 %}[m
                                     <a href="{% url 'deltahitcnt0acl' FW_NAME %}" class="btn btn-warning btn-icon-split">[m
                                         <span class="icon text-white-50">Delta HitCnt = 0</span>[m
[31m-                                        <span class="text">{{This_Device.Prct_N_ACL_HitCnt_Zero}}%</span>[m
[32m+[m[32m                                        <span class="text">{{This_Device.Prct_N_ACL_HitCnt_Zero_toDel}}%</span>[m
                                     </a>[m
[31m-                                    {%  elif This_Device.Prct_N_ACL_HitCnt_Zero < 50 %}[m
[32m+[m[32m                                    {%  elif This_Device.Prct_N_ACL_HitCnt_Zero_toDel < 50 %}[m
                                     <a href="{% url 'deltahitcnt0acl' FW_NAME %}" class="btn btn-orange btn-icon-split">[m
                                         <span class="icon text-white-50">Delta HitCnt = 0</span>[m
[31m-                                        <span class="text">{{This_Device.Prct_N_ACL_HitCnt_Zero}}%</span>[m
[32m+[m[32m                                        <span class="text">{{This_Device.Prct_N_ACL_HitCnt_Zero_toDel}}%</span>[m
                                     </a>[m
                                     {%  else %}[m
                                     <a href="{% url 'deltahitcnt0acl' FW_NAME %}" class="btn btn-danger btn-icon-split">[m
                                         <span class="icon text-white-50">Delta HitCnt = 0</span>[m
[31m-                                        <span class="text">{{This_Device.Prct_N_ACL_HitCnt_Zero}}%</span>[m
[32m+[m[32m                                        <span class="text">{{This_Device.Prct_N_ACL_HitCnt_Zero_toDel}}%</span>[m
                                     </a>[m
                                     {% endif %}[m
 [m
[36m@@ -1897,64 +1897,22 @@[m
                                 </div>[m
 [m
 [m
[31m-                                <!-- Inactive ACL Card -->[m
[32m+[m[32m                                <!-- Top x Hitted ACL -->[m
                                 <div class="col-xl-3 col-md-6 mb-4">[m
[31m-                                    <a href="{% url 'inactiveacl' FW_NAME %}" class="custom-card">[m
[31m-                                    <!--<div class="card border-left-success shadow h-100 py-2">-->[m
[31m-                                    {% if This_Device.Prct_N_ACL_Inactive < 8 %}[m
[31m-                                        <div class="card border-left-success shadow h-100 py-2">[m
[31m-                                    {%  elif This_Device.Prct_N_ACL_Inactive < 24 %}[m
[31m-                                        <div class="card border-left-warning shadow h-100 py-2">[m
[31m-                                    {%  elif This_Device.Prct_N_ACL_Inactive < 50 %}[m
[31m-                                        <div class="card border-left-orange shadow h-100 py-2">[m
[31m-                                    {%  else %}[m
[31m-                                        <div class="card border-left-danger shadow h-100 py-2">[m
[31m-                                    {% endif %}[m
[32m+[m[32m                                    <a href="{% url 'Most_Hitted_ACL' FW_NAME %}" class="custom-card">[m
[32m+[m[32m                                    <div class="card border-left-info shadow h-100 py-2">[m[41m                                      [m
                                         <div class="card-body">[m
                                             <div class="row no-gutters align-items-center">[m
                                                 <div class="col mr-2">[m
                                                     <div class="h5 font-weight-bold text-primary mb-1">[m
[31m-                                                        Inactive[m
[31m-                                                    </div>[m
[31m-                                                    <div class="row no-gutters align-items-center">[m
[31m-                                                        <div class="col-auto">[m
[31m-                                                            <div class="h5 mb-0 mr-3 font-weight-bold text-gray-800">[m
[31m-                                                                {{This_Device.Prct_N_ACL_Inactive}}%[m
[31m-                                                            </div>[m
[31m-                                                        </div>[m
[31m-                                                        <div class="col">[m
[31m-                                                            <div class="progress progress-sm mr-2">[m
[31m-                                                                <div class="progress-bar bg-primary" [m
[31m-                                                                    role="progressbar"[m
[31m-                                                                    style="width: {{This_Device.Prct_N_ACL_Inactive}}%" aria-valuenow="100" [m
[31m-                                                                    aria-valuemin="0"[m
[31m-                                                                    aria-valuemax="100">[m
[31m-                                                                </div>[m
[31m-                                                            </div>[m
[31m-                                                        </div>[m
[32m+[m[32m                                                        {{ My_Global_Settings.N_ACL_Most_Triggered }} Most Triggered ACL[m
                                                     </div>[m
                                                 </div>[m
[31m-                                                <div class="col-auto">[m
[31m-                                                    {% if This_Device.Prct_N_ACL_Inactive < 8 %}[m
[31m-                                                        <img  style="width: 4rem;" src="{% static 'img/Gauge_1.jpg' %}">[m
[31m-                                                    {%  elif This_Device.Prct_N_ACL_Inactive < 24 %}[m
[31m-                                                        <img  style="width: 4rem;" src="{% static 'img/Gauge_2.jpg' %}">[m
[31m-                                                    {%  elif This_Device.Prct_N_ACL_Inactive < 50 %}[m
[31m-                                                        <img  style="width: 4rem;" src="{% static 'img/Gauge_3.jpg' %}">[m
[31m-                                                    {%  else %}[m
[31m-                                                        <img  style="width: 4rem;" src="{% static 'img/Gauge_4.jpg' %}">[m
[31m-                                                    {% endif %}[m
[31m-                                                </div>[m
                                             </div>[m
                                             <div class="h5 mb-0 font-weight-bold text-gray-800">[m
                                                 <table>[m
                                                     <tr>[m
[31m-                                                        <th>ACL Total Lines:&nbsp;&nbsp;&nbsp;</th>[m
[31m-                                                        <th>{{ This_Device.N_ACL_Lines }}</th>[m
[31m-                                                    </tr>[m
[31m-                                                    <tr>[m
[31m-                                                        <th>N Inactive Lines:&nbsp;&nbsp;&nbsp;</th>[m
[31m-                                                        <th>{{ This_Device.N_ACL_Inactive }}</th>[m
[32m+[m[32m                                                        <th>Reorder ACL Lines based on Delta HitCnt</th>[m
                                                     </tr>[m
                                                 </table>[m
                                             </div>[m
[36m@@ -1962,8 +1920,7 @@[m
                                     </div>[m
                                     </a>[m
                                 </div>[m
[31m-            [m
[31m-            [m
[32m+[m
                                 <!-- No Log for ACL Card -->[m
                                 <div class="col-xl-3 col-md-6 mb-4">[m
                                     <a href="{% url 'nologacl' FW_NAME %}" class="custom-card">[m
[36m@@ -2165,22 +2122,64 @@[m
                                 </div>[m
 [m
 [m
[31m-                                <!-- Top x Hitted ACL -->[m
[32m+[m[32m                                <!-- Inactive ACL Card -->[m
                                 <div class="col-xl-3 col-md-6 mb-4">[m
[31m-                                    <a href="{% url 'Most_Hitted_ACL' FW_NAME %}" class="custom-card">[m
[31m-                                    <div class="card border-left-info shadow h-100 py-2">                                      [m
[32m+[m[32m                                    <a href="{% url 'inactiveacl' FW_NAME %}" class="custom-card">[m
[32m+[m[32m                                    <!--<div class="card border-left-success shadow h-100 py-2">-->[m
[32m+[m[32m                                    {% if This_Device.Prct_N_ACL_Inactive < 8 %}[m
[32m+[m[32m                                        <div class="card border-left-success shadow h-100 py-2">[m
[32m+[m[32m                                    {%  elif This_Device.Prct_N_ACL_Inactive < 24 %}[m
[32m+[m[32m                                        <div class="card border-left-warning shadow h-100 py-2">[m
[32m+[m[32m                                    {%  elif This_Device.Prct_N_ACL_Inactive < 50 %}[m
[32m+[m[32m                                        <div class="card border-left-orange shadow h-100 py-2">[m
[32m+[m[32m                                    {%  else %}[m
[32m+[m[32m                                        <div class="card border-left-danger shadow h-100 py-2">[m
[32m+[m[32m                                    {% endif %}[m
                                         <div class="card-body">[m
                                             <div class="row no-gutters align-items-center">[m
                                                 <div class="col mr-2">[m
                                                     <div class="h5 font-weight-bold text-primary mb-1">[m
[31m-                                                        {{ My_Global_Settings.N_ACL_Most_Triggered }} Most Triggered ACL[m
[32m+[m[32m                                                        Inactive[m
[32m+[m[32m                                                    </div>[m
[32m+[m[32m                                                    <div class="row no-gutters align-items-center">[m
[32m+[m[32m                                                        <div class="col-auto">[m
[32m+[m[32m                                                            <div class="h5 mb-0 mr-3 font-weight-bold text-gray-800">[m
[32m+[m[32m                                                                {{This_Device.Prct_N_ACL_Inactive}}%[m
[32m+[m[32m                                                            </div>[m
[32m+[m[32m                                                        </div>[m
[32m+[m[32m                                                        <div class="col">[m
[32m+[m[32m                                                            <div class="progress progress-sm mr-2">[m
[32m+[m[32m                                                                <div class="progress-bar bg-primary"[m[41m [m
[32m+[m[32m                                                                    role="progressbar"[m
[32m+[m[32m                                                                    style="width: {{This_Device.Prct_N_ACL_Inactive}}%" aria-valuenow="100"[m[41m [m
[32m+[m[32m                                                                    aria-valuemin="0"[m
[32m+[m[32m                                                                    aria-valuemax="100">[m
[32m+[m[32m                                                                </div>[m
[32m+[m[32m                                                            </div>[m
[32m+[m[32m                                                        </div>[m
                                                     </div>[m
                                                 </div>[m
[32m+[m[32m                                                <div class="col-auto">[m
[32m+[m[32m                                                    {% if This_Device.Prct_N_ACL_Inactive < 8 %}[m
[32m+[m[32m                                                        <img  style="width: 4rem;" src="{% static 'img/Gauge_1.jpg' %}">[m
[32m+[m[32m                                                    {%  elif This_Device.Prct_N_ACL_Inactive < 24 %}[m
[32m+[m[32m                                                        <img  style="width: 4rem;" src="{% static 'img/Gauge_2.jpg' %}">[m
[32m+[m[32m                                                    {%  elif This_Device.Prct_N_ACL_Inactive < 50 %}[m
[32m+[m[32m                                                        <img  style="width: 4rem;" src="{% static 'img/Gauge_3.jpg' %}">[m
[32m+[m[32m                                                    {%  else %}[m
[32m+[m[32m                                                        <img  style="width: 4rem;" src="{% static 'img/Gauge_4.jpg' %}">[m
[32m+[m[32m                                                    {% endif %}[m
[32m+[m[32m                                                </div>[m
                                             </div>[m
                                             <div class="h5 mb-0 font-weight-bold text-gray-800">[m
                                                 <table>[m
                                                     <tr>[m
[31m-                                                        <th>Reorder ACL Lines based on Delta HitCnt</th>[m
[32m+[m[32m                                                        <th>ACL Total Lines:&nbsp;&nbsp;&nbsp;</th>[m
[32m+[m[32m                                                        <th>{{ This_Device.N_ACL_Lines }}</th>[m
[32m+[m[32m                                                    </tr>[m
[32m+[m[32m                                                    <tr>[m
[32m+[m[32m                                                        <th>N Inactive Lines:&nbsp;&nbsp;&nbsp;</th>[m
[32m+[m[32m                                                        <th>{{ This_Device.N_ACL_Inactive }}</th>[m
                                                     </tr>[m
                                                 </table>[m
                                             </div>[m
[36m@@ -2189,6 +2188,7 @@[m
                                     </a>[m
                                 </div>[m
 [m
[32m+[m
                                 <!-- Deny ACL Triggering too much -->[m
                                 <div class="col-xl-3 col-md-6 mb-4">[m
                                     <a href="{% url 'deny_acl_triggered' FW_NAME %}" class="custom-card">[m
[1mdiff --git a/app/templates/deltahitcnt0acl.html b/app/templates/deltahitcnt0acl.html[m
[1mindex fd5d3a1..eadecca 100644[m
[1m--- a/app/templates/deltahitcnt0acl.html[m
[1m+++ b/app/templates/deltahitcnt0acl.html[m
[36m@@ -78,7 +78,7 @@[m
                 </style>[m
                 <div class="card-body">[m
                   {{ This_Device.N_ACL_HitCnt_Zero_toDel }} ACLs lines over {{ This_Device.N_ACL_Active }} ({{This_Device.Prct_N_ACL_HitCnt_Zero_toDel}}%) have not been hitted for more than {{ My_Global_Settings.Max_ACL_Inactive_Age }} days and can be turned inactive<br>[m
[31m-                  <script new DataTable('#example', {order: [[2, 'asc']]});></script>[m
[32m+[m[32m                  <!--<script new DataTable('#example');></script>-->[m
                   {% include Watch_FName%}[m
                 </div>[m
             </div>[m
[36m@@ -100,7 +100,7 @@[m
                 </style>[m
                 <div class="card-body">[m
                     {{ This_Device.N_ACL_HitCnt_Zero_Aging }} ACLs lines over {{ This_Device.N_ACL_Active }} are still aging...[m
[31m-                  <script new DataTable('#example', {order: [[2, 'asc']]});></script>[m
[32m+[m[32m                  <!--<script new DataTable('#example');></script>-->[m
                   {% include Watch_FName_2%}[m
                 </div>[m
             </div>[m
[36m@@ -123,6 +123,7 @@[m
     <!-- /.container-fluid -->[m
     </div>[m
 </div>[m
[32m+[m
 <!-- End of Main Content -->[m
 [m
 <script>[m
[36m@@ -142,7 +143,25 @@[m [mfunction openTab(evt, TabName) {[m
 [m
 // Get the element with id="defaultOpen" and click on it[m
 document.getElementById("defaultOpen").click();[m
[32m+[m
[32m+[m[32m$(document).ready(function () {[m
[32m+[m[32m    $('#dataTable1').DataTable();[m
[32m+[m[32m    $('#dataTable2').DataTable();[m
[32m+[m[32m    $('#dataTable3').DataTable();[m
[32m+[m[32m});[m
 </script>[m
 [m
 {% endblock %}[m
 [m
[32m+[m
[32m+[m
[32m+[m[32m<!--[m
[32m+[m[32m{% autoescape on %}[m
[32m+[m[32m    {% block javascript %}[m
[32m+[m[32m        <script src="{% static 'vendor/datatables/jquery.dataTables.min.js' %}"></script>[m
[32m+[m[32m        <script src="{% static 'vendor/datatables/dataTables.bootstrap4.min.js' %}"></script>[m
[32m+[m[32m        <script src="{% static 'js/demo/datatables-demo.js' %}" ></script>[m
[32m+[m[32m    {% endblock javascript %}[m
[32m+[m[32m{% endautoescape %}[m
[32m+[m
[32m+[m[32m-->[m
\ No newline at end of file[m
[1mdiff --git a/app/templates/inactiveacl.html b/app/templates/inactiveacl.html[m
[1mindex f67315d..e5a8a21 100644[m
[1m--- a/app/templates/inactiveacl.html[m
[1m+++ b/app/templates/inactiveacl.html[m
[36m@@ -78,7 +78,7 @@[m
                 </style>[m
                 <div class="card-body">[m
                   {{ This_Device.N_ACL_Inactive_toDel }} ACLs lines over {{ This_Device.N_ACL_Lines }} ({{This_Device.Prct_N_ACL_Inactive_toDel}}%) have been inactive for more than {{ My_Global_Settings.Max_ACL_Inactive_Age }} days <br>[m
[31m-                  <script new DataTable('#example', {order: [[2, 'asc']]});></script>[m
[32m+[m[32m                  <!--<script new DataTable('#example');></script>-->[m
                   {% include Watch_FName%}[m
                 </div>[m
             </div>[m
[36m@@ -100,7 +100,7 @@[m
                 </style>[m
                 <div class="card-body">[m
                   The following are still aging... <br>[m
[31m-                  <script new DataTable('#example', {order: [[2, 'asc']]});></script>[m
[32m+[m[32m                  <!--<script new DataTable('#example');></script>-->[m
                   {% include Watch_FName_2%}[m
                 </div>[m
             </div>[m
[36m@@ -142,6 +142,12 @@[m [mfunction openTab(evt, TabName) {[m
 [m
 // Get the element with id="defaultOpen" and click on it[m
 document.getElementById("defaultOpen").click();[m
[32m+[m
[32m+[m[32m$(document).ready(function () {[m
[32m+[m[32m    $('#dataTable1').DataTable();[m
[32m+[m[32m    $('#dataTable2').DataTable();[m
[32m+[m[32m    $('#dataTable3').DataTable();[m
[32m+[m[32m});[m
 </script>[m
 [m
 {% endblock %}[m
[1mdiff --git a/app/templates/submask_table.html b/app/templates/submask_table.html[m
[1mindex e49f0d6..4d452a7 100644[m
[1m--- a/app/templates/submask_table.html[m
[1m+++ b/app/templates/submask_table.html[m
[36m@@ -114,7 +114,7 @@[m
                                     <td class="text-center bg-gradient-light  "><div class="text-dark"><strong>68</strong></div></td>[m
                                 </tr>[m
                                 <tr>[m
[31m-                                    <td class="text-center bg-gradient-light  "><div class="text-dark"><strong>71</strong></div></td>[m
[32m+[m[32m                                    <td class="text-center bg-gradient-light  "><div class="text-dark"><strong>72</strong></div></td>[m
                                     <td class=" text-center bg-gradient-warning" rowspan="2"><div class="text-white"><strong>/29</strong></div></td>[m
                                 </tr>[m
                                 <tr>[m
[1mdiff --git a/app/views.py b/app/views.py[m
[1mindex 02670e7..45441a5 100644[m
[1m--- a/app/views.py[m
[1m+++ b/app/views.py[m
[36m@@ -1512,19 +1512,35 @@[m [mdef Color_Line(IN_Line):[m
     Green_Color  = '#1cb836'[m
     Purple_Color = '#8f1489'[m
     Brown_Color  = '#995c00'[m
[32m+[m[32m    Marked_Words = ['range','interface','password','username','any','any4','any6','0.0.0.0'][m
[32m+[m[41m    [m
 [m
     OUT_Line = ''[m
     for t_word in IN_Line.split():[m
[31m-        if t_word in Blu_Words:[m
[31m-            OUT_Line = OUT_Line + '<font color="%s"> %s </font>' %(Blu_Color, t_word)[m
[31m-        elif t_word in Red_Words:[m
[31m-            OUT_Line = OUT_Line + '<font color="%s"> %s </font>' %(Red_Color, t_word)[m
[31m-        elif t_word in Green_Words:[m
[31m-            OUT_Line = OUT_Line + '<font color="%s"> %s </font>' %(Green_Color, t_word)[m
[31m-        elif t_word in Purple_Words:[m
[31m-            OUT_Line = OUT_Line + '<font color="%s"> %s </font>' %(Purple_Color, t_word)[m
[31m-        elif t_word in Brown_Words:[m
[31m-            OUT_Line = OUT_Line + '<font color="%s"> %s </font>' %(Brown_Color, t_word)[m
[32m+[m[32m        if t_word in Marked_Words:[m
[32m+[m[32m            if t_word in Blu_Words:[m
[32m+[m[32m                OUT_Line = OUT_Line + f'<mark style="color:{Blu_Color};"> {t_word} </mark>'[m
[32m+[m[32m            elif t_word in Red_Words:[m
[32m+[m[32m                OUT_Line = OUT_Line + f'<mark style="color:{Red_Color};"> {t_word} </mark>'[m
[32m+[m[32m            elif t_word in Green_Words:[m
[32m+[m[32m                OUT_Line = OUT_Line + f'<mark style="color:{Green_Color};"> {t_word} </mark>'[m
[32m+[m[32m            elif t_word in Purple_Words:[m
[32m+[m[32m                OUT_Line = OUT_Line + f'<mark style="color:{Purple_Color};"> {t_word} </mark>'[m
[32m+[m[32m            elif t_word in Brown_Words:[m
[32m+[m[32m                OUT_Line = OUT_Line + f'<mark style="color:{Brown_Color};"> {t_word} </mark>'[m
[32m+[m[32m            else:[m
[32m+[m[32m                OUT_Line = OUT_Line + f' {t_word} '[m
         else:[m
[31m-            OUT_Line = OUT_Line + '%s ' %t_word[m
[32m+[m[32m            if t_word in Blu_Words:[m
[32m+[m[32m                OUT_Line = OUT_Line + f'<font color="{Blu_Color}"> {t_word} </font>'[m
[32m+[m[32m            elif t_word in Red_Words:[m
[32m+[m[32m                OUT_Line = OUT_Line + f'<font color="{Red_Color}"> {t_word} </font>'[m
[32m+[m[32m            elif t_word in Green_Words:[m
[32m+[m[32m                OUT_Line = OUT_Line + f'<font color="{Green_Color}"> {t_word} </font>'[m
[32m+[m[32m            elif t_word in Purple_Words:[m
[32m+[m[32m                OUT_Line = OUT_Line + f'<font color="{Purple_Color}"> {t_word} </font>'[m
[32m+[m[32m            elif t_word in Brown_Words:[m
[32m+[m[32m                OUT_Line = OUT_Line + f'<font color="{Brown_Color}"> {t_word} </font>'[m
[32m+[m[32m            else:[m
[32m+[m[32m                OUT_Line = OUT_Line + f' {t_word} '[m
     return OUT_Line[m
